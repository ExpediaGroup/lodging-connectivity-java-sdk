//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.4'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.sandbox.type;

import com.apollographql.apollo3.api.Optional;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.time.LocalDate;
import java.util.List;

/**
 * Input to update a reservation
 */
public class UpdateReservationInput {
  public final Optional<Integer> adultCount;

  public final Optional<LocalDate> checkInDate;

  public final Optional<LocalDate> checkOutDate;

  public final Optional<List<Integer>> childAges;

  public final Optional<Integer> childCount;

  public final Optional<String> clientMutationId;

  public final String id;

  public final Optional<Boolean> sendNotification;

  public final Optional<String> specialRequestText;

  public final Optional<ReservationStatusInput> status;

  private transient volatile int $hashCode;

  private transient volatile boolean $hashCodeMemoized;

  private transient volatile String $toString;

  public UpdateReservationInput(Optional<Integer> adultCount, Optional<LocalDate> checkInDate,
      Optional<LocalDate> checkOutDate, Optional<List<Integer>> childAges,
      Optional<Integer> childCount, Optional<String> clientMutationId, String id,
      Optional<Boolean> sendNotification, Optional<String> specialRequestText,
      Optional<ReservationStatusInput> status) {
    this.adultCount = adultCount;
    this.checkInDate = checkInDate;
    this.checkOutDate = checkOutDate;
    this.childAges = childAges;
    this.childCount = childCount;
    this.clientMutationId = clientMutationId;
    this.id = id;
    this.sendNotification = sendNotification;
    this.specialRequestText = specialRequestText;
    this.status = status;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof UpdateReservationInput) {
      UpdateReservationInput that = (UpdateReservationInput) o;
      return ((this.adultCount == null) ? (that.adultCount == null) : this.adultCount.equals(that.adultCount))
       &&((this.checkInDate == null) ? (that.checkInDate == null) : this.checkInDate.equals(that.checkInDate))
       &&((this.checkOutDate == null) ? (that.checkOutDate == null) : this.checkOutDate.equals(that.checkOutDate))
       &&((this.childAges == null) ? (that.childAges == null) : this.childAges.equals(that.childAges))
       &&((this.childCount == null) ? (that.childCount == null) : this.childCount.equals(that.childCount))
       &&((this.clientMutationId == null) ? (that.clientMutationId == null) : this.clientMutationId.equals(that.clientMutationId))
       &&((this.id == null) ? (that.id == null) : this.id.equals(that.id))
       &&((this.sendNotification == null) ? (that.sendNotification == null) : this.sendNotification.equals(that.sendNotification))
       &&((this.specialRequestText == null) ? (that.specialRequestText == null) : this.specialRequestText.equals(that.specialRequestText))
       &&((this.status == null) ? (that.status == null) : this.status.equals(that.status));
    }
    return false;
  }

  @Override
  public int hashCode() {
    if (!$hashCodeMemoized) {
      int __h = 1;
      __h *= 1000003;
      __h ^= (adultCount == null) ? 0 : adultCount.hashCode();
      __h *= 1000003;
      __h ^= (checkInDate == null) ? 0 : checkInDate.hashCode();
      __h *= 1000003;
      __h ^= (checkOutDate == null) ? 0 : checkOutDate.hashCode();
      __h *= 1000003;
      __h ^= (childAges == null) ? 0 : childAges.hashCode();
      __h *= 1000003;
      __h ^= (childCount == null) ? 0 : childCount.hashCode();
      __h *= 1000003;
      __h ^= (clientMutationId == null) ? 0 : clientMutationId.hashCode();
      __h *= 1000003;
      __h ^= (id == null) ? 0 : id.hashCode();
      __h *= 1000003;
      __h ^= (sendNotification == null) ? 0 : sendNotification.hashCode();
      __h *= 1000003;
      __h ^= (specialRequestText == null) ? 0 : specialRequestText.hashCode();
      __h *= 1000003;
      __h ^= (status == null) ? 0 : status.hashCode();
      $hashCode = __h;
      $hashCodeMemoized = true;
    }
    return $hashCode;
  }

  @Override
  public String toString() {
    if ($toString == null) {
      $toString = "UpdateReservationInput{"
        + "adultCount=" + adultCount + ", "
        + "checkInDate=" + checkInDate + ", "
        + "checkOutDate=" + checkOutDate + ", "
        + "childAges=" + childAges + ", "
        + "childCount=" + childCount + ", "
        + "clientMutationId=" + clientMutationId + ", "
        + "id=" + id + ", "
        + "sendNotification=" + sendNotification + ", "
        + "specialRequestText=" + specialRequestText + ", "
        + "status=" + status
        + "}";
    }
    return $toString;
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private Optional<Integer> adultCount = Optional.absent();

    private Optional<LocalDate> checkInDate = Optional.absent();

    private Optional<LocalDate> checkOutDate = Optional.absent();

    private Optional<List<Integer>> childAges = Optional.absent();

    private Optional<Integer> childCount = Optional.absent();

    private Optional<String> clientMutationId = Optional.absent();

    private String id;

    private Optional<Boolean> sendNotification = Optional.absent();

    private Optional<String> specialRequestText = Optional.absent();

    private Optional<ReservationStatusInput> status = Optional.absent();

    Builder() {
    }

    /**
     * New adult count of the reservation.
     */
    public Builder adultCount(Integer adultCount) {
      this.adultCount = Optional.present(adultCount);
      return this;
    }

    /**
     * New check-in date of the reservation.
     */
    public Builder checkInDate(LocalDate checkInDate) {
      this.checkInDate = Optional.present(checkInDate);
      return this;
    }

    /**
     * New check-out date of the reservation.
     */
    public Builder checkOutDate(LocalDate checkOutDate) {
      this.checkOutDate = Optional.present(checkOutDate);
      return this;
    }

    /**
     * Ages of children as per new child counts. If not specified, defaults to a list of random child ages.
     */
    public Builder childAges(List<Integer> childAges) {
      this.childAges = Optional.present(childAges);
      return this;
    }

    /**
     * New child count of the reservation.
     */
    public Builder childCount(Integer childCount) {
      this.childCount = Optional.present(childCount);
      return this;
    }

    /**
     * Client mutation ID. Optional value that is echoed back in the response.
     */
    public Builder clientMutationId(String clientMutationId) {
      this.clientMutationId = Optional.present(clientMutationId);
      return this;
    }

    /**
     * ID of the reservation to update.
     */
    public Builder id(String id) {
      this.id = id;
      return this;
    }

    /**
     * Whether to send a notification upon the change of the reservation dates.
     */
    public Builder sendNotification(Boolean sendNotification) {
      this.sendNotification = Optional.present(sendNotification);
      return this;
    }

    /**
     * New special request text of the reservation.
     */
    public Builder specialRequestText(String specialRequestText) {
      this.specialRequestText = Optional.present(specialRequestText);
      return this;
    }

    /**
     * New status of the reservation.
     */
    public Builder status(ReservationStatusInput status) {
      this.status = Optional.present(status);
      return this;
    }

    public UpdateReservationInput build() {
      return new UpdateReservationInput(adultCount, checkInDate, checkOutDate, childAges, childCount, clientMutationId, id, sendNotification, specialRequestText, status);
    }
  }
}
