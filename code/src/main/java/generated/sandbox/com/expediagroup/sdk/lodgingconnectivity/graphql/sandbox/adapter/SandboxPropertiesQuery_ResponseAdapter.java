//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.sandbox.adapter;

import com.apollographql.apollo.api.Adapter;
import com.apollographql.apollo.api.Adapters;
import com.apollographql.apollo.api.Assertions;
import com.apollographql.apollo.api.CustomScalarAdapters;
import com.apollographql.apollo.api.ListAdapter;
import com.apollographql.apollo.api.ObjectAdapter;
import com.apollographql.apollo.api.json.JsonReader;
import com.apollographql.apollo.api.json.JsonWriter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.sandbox.SandboxPropertiesQuery;
import com.expediagroup.sdk.lodgingconnectivity.graphql.sandbox.fragment.SandboxReservationFragment;
import com.expediagroup.sdk.lodgingconnectivity.graphql.sandbox.type.adapter.OptionalAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.sandbox.type.adapter.OptionalAdapters;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

public class SandboxPropertiesQuery_ResponseAdapter {
  public enum Data implements Adapter<SandboxPropertiesQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("properties");

    @Override
    public SandboxPropertiesQuery.Data fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      SandboxPropertiesQuery.Properties _properties = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _properties = new ObjectAdapter<SandboxPropertiesQuery.Properties>(Properties.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_properties, "properties");

      return new SandboxPropertiesQuery.Data(
        _properties
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        SandboxPropertiesQuery.Data value) throws IOException {
      writer.name("properties");
      new ObjectAdapter<SandboxPropertiesQuery.Properties>(Properties.INSTANCE, false).toJson(writer, customScalarAdapters, value.properties);
    }
  }

  public enum Properties implements Adapter<SandboxPropertiesQuery.Properties> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("cursor", "totalCount", "elements");

    @Override
    public SandboxPropertiesQuery.Properties fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Optional<String> _cursor = null;
      Integer _totalCount = null;
      List<SandboxPropertiesQuery.Element> _elements = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _cursor = OptionalAdapters.OptionalStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _totalCount = Adapters.IntAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _elements = new ListAdapter<>(new ObjectAdapter<SandboxPropertiesQuery.Element>(Element.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_totalCount, "totalCount");
      Assertions.checkFieldNotMissing(_elements, "elements");

      return new SandboxPropertiesQuery.Properties(
        _cursor,
        _totalCount,
        _elements
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        SandboxPropertiesQuery.Properties value) throws IOException {
      writer.name("cursor");
      OptionalAdapters.OptionalStringAdapter.toJson(writer, customScalarAdapters, value.cursor);

      writer.name("totalCount");
      Adapters.IntAdapter.toJson(writer, customScalarAdapters, value.totalCount);

      writer.name("elements");
      new ListAdapter<>(new ObjectAdapter<SandboxPropertiesQuery.Element>(Element.INSTANCE, false)).toJson(writer, customScalarAdapters, value.elements);
    }
  }

  public enum Element implements Adapter<SandboxPropertiesQuery.Element> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id", "name", "reservations");

    @Override
    public SandboxPropertiesQuery.Element fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _id = null;
      String _name = null;
      Optional<SandboxPropertiesQuery.Reservations> _reservations = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _id = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _name = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _reservations = new OptionalAdapter<>(new ObjectAdapter<SandboxPropertiesQuery.Reservations>(Reservations.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_id, "id");
      Assertions.checkFieldNotMissing(_name, "name");

      return new SandboxPropertiesQuery.Element(
        _id,
        _name,
        _reservations
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        SandboxPropertiesQuery.Element value) throws IOException {
      writer.name("id");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.id);

      writer.name("name");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.name);

      writer.name("reservations");
      new OptionalAdapter<>(new ObjectAdapter<SandboxPropertiesQuery.Reservations>(Reservations.INSTANCE, false)).toJson(writer, customScalarAdapters, value.reservations);
    }
  }

  public enum Reservations implements Adapter<SandboxPropertiesQuery.Reservations> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("totalCount", "cursor", "elements");

    @Override
    public SandboxPropertiesQuery.Reservations fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Integer _totalCount = null;
      Optional<String> _cursor = null;
      List<SandboxPropertiesQuery.Element1> _elements = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _totalCount = Adapters.IntAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _cursor = OptionalAdapters.OptionalStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _elements = new ListAdapter<>(new ObjectAdapter<SandboxPropertiesQuery.Element1>(Element1.INSTANCE, true)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_totalCount, "totalCount");
      Assertions.checkFieldNotMissing(_elements, "elements");

      return new SandboxPropertiesQuery.Reservations(
        _totalCount,
        _cursor,
        _elements
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        SandboxPropertiesQuery.Reservations value) throws IOException {
      writer.name("totalCount");
      Adapters.IntAdapter.toJson(writer, customScalarAdapters, value.totalCount);

      writer.name("cursor");
      OptionalAdapters.OptionalStringAdapter.toJson(writer, customScalarAdapters, value.cursor);

      writer.name("elements");
      new ListAdapter<>(new ObjectAdapter<SandboxPropertiesQuery.Element1>(Element1.INSTANCE, true)).toJson(writer, customScalarAdapters, value.elements);
    }
  }

  public enum Element1 implements Adapter<SandboxPropertiesQuery.Element1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename");

    @Override
    public SandboxPropertiesQuery.Element1 fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String __typename = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      reader.rewind();
      SandboxReservationFragment _sandboxReservationFragment = com.expediagroup.sdk.lodgingconnectivity.graphql.sandbox.fragment.SandboxReservationFragmentImpl_ResponseAdapter.SandboxReservationFragment.INSTANCE.fromJson(reader, customScalarAdapters);

      Assertions.checkFieldNotMissing(__typename, "__typename");

      return new SandboxPropertiesQuery.Element1(
        __typename,
        _sandboxReservationFragment
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        SandboxPropertiesQuery.Element1 value) throws IOException {
      writer.name("__typename");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.__typename);

      com.expediagroup.sdk.lodgingconnectivity.graphql.sandbox.fragment.SandboxReservationFragmentImpl_ResponseAdapter.SandboxReservationFragment.INSTANCE.toJson(writer, customScalarAdapters, value.sandboxReservationFragment);
    }
  }
}
