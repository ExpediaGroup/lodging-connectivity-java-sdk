//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.4'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.sandbox.type;

import com.apollographql.apollo3.api.Optional;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.time.LocalDate;
import java.util.List;

/**
 * Input to create a reservation
 */
public class CreateReservationInput {
  public final Optional<List<String>> accessibilityText;

  public final Optional<Integer> adultCount;

  public final Optional<String> bedTypes;

  public final Optional<BusinessModelInput> businessModel;

  public final Optional<LocalDate> checkInDate;

  public final Optional<LocalDate> checkOutDate;

  public final Optional<List<Integer>> childAges;

  public final Optional<Integer> childCount;

  public final Optional<String> clientMutationId;

  public final Optional<String> multiRoomText;

  public final Optional<GuestInput> primaryGuest;

  public final String propertyId;

  public final Optional<ReconciliationTypeInput> reconciliationType;

  public final Optional<RemittanceTypeInput> remittanceType;

  public final Optional<Boolean> sendNotification;

  public final Optional<String> smokingType;

  public final Optional<String> specialRequest;

  public final Optional<ReservationStatusInput> status;

  public final Optional<List<ReservationValueAddedPromotionInput>> valueAddedPromotions;

  private transient volatile int $hashCode;

  private transient volatile boolean $hashCodeMemoized;

  private transient volatile String $toString;

  public CreateReservationInput(Optional<List<String>> accessibilityText,
      Optional<Integer> adultCount, Optional<String> bedTypes,
      Optional<BusinessModelInput> businessModel, Optional<LocalDate> checkInDate,
      Optional<LocalDate> checkOutDate, Optional<List<Integer>> childAges,
      Optional<Integer> childCount, Optional<String> clientMutationId,
      Optional<String> multiRoomText, Optional<GuestInput> primaryGuest, String propertyId,
      Optional<ReconciliationTypeInput> reconciliationType,
      Optional<RemittanceTypeInput> remittanceType, Optional<Boolean> sendNotification,
      Optional<String> smokingType, Optional<String> specialRequest,
      Optional<ReservationStatusInput> status,
      Optional<List<ReservationValueAddedPromotionInput>> valueAddedPromotions) {
    this.accessibilityText = accessibilityText;
    this.adultCount = adultCount;
    this.bedTypes = bedTypes;
    this.businessModel = businessModel;
    this.checkInDate = checkInDate;
    this.checkOutDate = checkOutDate;
    this.childAges = childAges;
    this.childCount = childCount;
    this.clientMutationId = clientMutationId;
    this.multiRoomText = multiRoomText;
    this.primaryGuest = primaryGuest;
    this.propertyId = propertyId;
    this.reconciliationType = reconciliationType;
    this.remittanceType = remittanceType;
    this.sendNotification = sendNotification;
    this.smokingType = smokingType;
    this.specialRequest = specialRequest;
    this.status = status;
    this.valueAddedPromotions = valueAddedPromotions;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof CreateReservationInput) {
      CreateReservationInput that = (CreateReservationInput) o;
      return ((this.accessibilityText == null) ? (that.accessibilityText == null) : this.accessibilityText.equals(that.accessibilityText))
       &&((this.adultCount == null) ? (that.adultCount == null) : this.adultCount.equals(that.adultCount))
       &&((this.bedTypes == null) ? (that.bedTypes == null) : this.bedTypes.equals(that.bedTypes))
       &&((this.businessModel == null) ? (that.businessModel == null) : this.businessModel.equals(that.businessModel))
       &&((this.checkInDate == null) ? (that.checkInDate == null) : this.checkInDate.equals(that.checkInDate))
       &&((this.checkOutDate == null) ? (that.checkOutDate == null) : this.checkOutDate.equals(that.checkOutDate))
       &&((this.childAges == null) ? (that.childAges == null) : this.childAges.equals(that.childAges))
       &&((this.childCount == null) ? (that.childCount == null) : this.childCount.equals(that.childCount))
       &&((this.clientMutationId == null) ? (that.clientMutationId == null) : this.clientMutationId.equals(that.clientMutationId))
       &&((this.multiRoomText == null) ? (that.multiRoomText == null) : this.multiRoomText.equals(that.multiRoomText))
       &&((this.primaryGuest == null) ? (that.primaryGuest == null) : this.primaryGuest.equals(that.primaryGuest))
       &&((this.propertyId == null) ? (that.propertyId == null) : this.propertyId.equals(that.propertyId))
       &&((this.reconciliationType == null) ? (that.reconciliationType == null) : this.reconciliationType.equals(that.reconciliationType))
       &&((this.remittanceType == null) ? (that.remittanceType == null) : this.remittanceType.equals(that.remittanceType))
       &&((this.sendNotification == null) ? (that.sendNotification == null) : this.sendNotification.equals(that.sendNotification))
       &&((this.smokingType == null) ? (that.smokingType == null) : this.smokingType.equals(that.smokingType))
       &&((this.specialRequest == null) ? (that.specialRequest == null) : this.specialRequest.equals(that.specialRequest))
       &&((this.status == null) ? (that.status == null) : this.status.equals(that.status))
       &&((this.valueAddedPromotions == null) ? (that.valueAddedPromotions == null) : this.valueAddedPromotions.equals(that.valueAddedPromotions));
    }
    return false;
  }

  @Override
  public int hashCode() {
    if (!$hashCodeMemoized) {
      int __h = 1;
      __h *= 1000003;
      __h ^= (accessibilityText == null) ? 0 : accessibilityText.hashCode();
      __h *= 1000003;
      __h ^= (adultCount == null) ? 0 : adultCount.hashCode();
      __h *= 1000003;
      __h ^= (bedTypes == null) ? 0 : bedTypes.hashCode();
      __h *= 1000003;
      __h ^= (businessModel == null) ? 0 : businessModel.hashCode();
      __h *= 1000003;
      __h ^= (checkInDate == null) ? 0 : checkInDate.hashCode();
      __h *= 1000003;
      __h ^= (checkOutDate == null) ? 0 : checkOutDate.hashCode();
      __h *= 1000003;
      __h ^= (childAges == null) ? 0 : childAges.hashCode();
      __h *= 1000003;
      __h ^= (childCount == null) ? 0 : childCount.hashCode();
      __h *= 1000003;
      __h ^= (clientMutationId == null) ? 0 : clientMutationId.hashCode();
      __h *= 1000003;
      __h ^= (multiRoomText == null) ? 0 : multiRoomText.hashCode();
      __h *= 1000003;
      __h ^= (primaryGuest == null) ? 0 : primaryGuest.hashCode();
      __h *= 1000003;
      __h ^= (propertyId == null) ? 0 : propertyId.hashCode();
      __h *= 1000003;
      __h ^= (reconciliationType == null) ? 0 : reconciliationType.hashCode();
      __h *= 1000003;
      __h ^= (remittanceType == null) ? 0 : remittanceType.hashCode();
      __h *= 1000003;
      __h ^= (sendNotification == null) ? 0 : sendNotification.hashCode();
      __h *= 1000003;
      __h ^= (smokingType == null) ? 0 : smokingType.hashCode();
      __h *= 1000003;
      __h ^= (specialRequest == null) ? 0 : specialRequest.hashCode();
      __h *= 1000003;
      __h ^= (status == null) ? 0 : status.hashCode();
      __h *= 1000003;
      __h ^= (valueAddedPromotions == null) ? 0 : valueAddedPromotions.hashCode();
      $hashCode = __h;
      $hashCodeMemoized = true;
    }
    return $hashCode;
  }

  @Override
  public String toString() {
    if ($toString == null) {
      $toString = "CreateReservationInput{"
        + "accessibilityText=" + accessibilityText + ", "
        + "adultCount=" + adultCount + ", "
        + "bedTypes=" + bedTypes + ", "
        + "businessModel=" + businessModel + ", "
        + "checkInDate=" + checkInDate + ", "
        + "checkOutDate=" + checkOutDate + ", "
        + "childAges=" + childAges + ", "
        + "childCount=" + childCount + ", "
        + "clientMutationId=" + clientMutationId + ", "
        + "multiRoomText=" + multiRoomText + ", "
        + "primaryGuest=" + primaryGuest + ", "
        + "propertyId=" + propertyId + ", "
        + "reconciliationType=" + reconciliationType + ", "
        + "remittanceType=" + remittanceType + ", "
        + "sendNotification=" + sendNotification + ", "
        + "smokingType=" + smokingType + ", "
        + "specialRequest=" + specialRequest + ", "
        + "status=" + status + ", "
        + "valueAddedPromotions=" + valueAddedPromotions
        + "}";
    }
    return $toString;
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private Optional<List<String>> accessibilityText = Optional.absent();

    private Optional<Integer> adultCount = Optional.absent();

    private Optional<String> bedTypes = Optional.absent();

    private Optional<BusinessModelInput> businessModel = Optional.absent();

    private Optional<LocalDate> checkInDate = Optional.absent();

    private Optional<LocalDate> checkOutDate = Optional.absent();

    private Optional<List<Integer>> childAges = Optional.absent();

    private Optional<Integer> childCount = Optional.absent();

    private Optional<String> clientMutationId = Optional.absent();

    private Optional<String> multiRoomText = Optional.absent();

    private Optional<GuestInput> primaryGuest = Optional.absent();

    private String propertyId;

    private Optional<ReconciliationTypeInput> reconciliationType = Optional.absent();

    private Optional<RemittanceTypeInput> remittanceType = Optional.absent();

    private Optional<Boolean> sendNotification = Optional.absent();

    private Optional<String> smokingType = Optional.absent();

    private Optional<String> specialRequest = Optional.absent();

    private Optional<ReservationStatusInput> status = Optional.absent();

    private Optional<List<ReservationValueAddedPromotionInput>> valueAddedPromotions = Optional.absent();

    Builder() {
    }

    /**
     * Accessibility requests made by the guest for the reservation. Defaults to a single accessibility text with value "In-room accessibility (in select rooms)".
     */
    public Builder accessibilityText(List<String> accessibilityText) {
      this.accessibilityText = Optional.present(accessibilityText);
      return this;
    }

    /**
     * Adult count. Defaults to 2.
     */
    public Builder adultCount(Integer adultCount) {
      this.adultCount = Optional.present(adultCount);
      return this;
    }

    /**
     * Bed types of the reservation. Defaults to "2 Queen Beds".
     */
    public Builder bedTypes(String bedTypes) {
      this.bedTypes = Optional.present(bedTypes);
      return this;
    }

    /**
     * Entity that collects payment for the reservation. Defaults to EXPEDIA_COLLECT.
     */
    public Builder businessModel(BusinessModelInput businessModel) {
      this.businessModel = Optional.present(businessModel);
      return this;
    }

    /**
     * Check-in date (format: YYYY-MM-DD) of the reservation. Defaults to a date in a near future.
     */
    public Builder checkInDate(LocalDate checkInDate) {
      this.checkInDate = Optional.present(checkInDate);
      return this;
    }

    /**
     * Check-out date (format: YYYY-MM-DD) of the reservation. Defaults to a random date in the month after the check-in date.
     */
    public Builder checkOutDate(LocalDate checkOutDate) {
      this.checkOutDate = Optional.present(checkOutDate);
      return this;
    }

    /**
     * Ages of children associated with the reservation. If not specified, defaults to a list of 1 or 2 random child ages.
     */
    public Builder childAges(List<Integer> childAges) {
      this.childAges = Optional.present(childAges);
      return this;
    }

    /**
     * Child count. If not specified, defaults to the number of child ages provided (or its default).
     */
    public Builder childCount(Integer childCount) {
      this.childCount = Optional.present(childCount);
      return this;
    }

    /**
     * Client mutation ID. Optional value that is echoed back in the response.
     */
    public Builder clientMutationId(String clientMutationId) {
      this.clientMutationId = Optional.present(clientMutationId);
      return this;
    }

    /**
     * Text that is displayed to guests if there are multiple rooms associated with the reservation.
     */
    public Builder multiRoomText(String multiRoomText) {
      this.multiRoomText = Optional.present(multiRoomText);
      return this;
    }

    /**
     * Guest who made the reservation. Guest personal information cannot be set and is automatically generated.
     */
    public Builder primaryGuest(GuestInput primaryGuest) {
      this.primaryGuest = Optional.present(primaryGuest);
      return this;
    }

    /**
     * Property id on which to associate the reservation.
     */
    public Builder propertyId(String propertyId) {
      this.propertyId = propertyId;
      return this;
    }

    /**
     * Reconciliation type of the reservation, either MODIFY, CANCEL, NO_SHOW, or null. Defaults to non-reconciled (null).
     */
    public Builder reconciliationType(ReconciliationTypeInput reconciliationType) {
      this.reconciliationType = Optional.present(reconciliationType);
      return this;
    }

    /**
     * Remittance type of the reservation. Defaults to NET.
     */
    public Builder remittanceType(RemittanceTypeInput remittanceType) {
      this.remittanceType = Optional.present(remittanceType);
      return this;
    }

    /**
     * Whether to send a notification upon the creation of the reservation. Defaults to false.
     */
    public Builder sendNotification(Boolean sendNotification) {
      this.sendNotification = Optional.present(sendNotification);
      return this;
    }

    /**
     * Whether smoking is allowed for the reservation. Defaults to "NONSMOKING".
     */
    public Builder smokingType(String smokingType) {
      this.smokingType = Optional.present(smokingType);
      return this;
    }

    /**
     * Text that is displayed to guests if there is a special request associated with the reservation. Defaults to "Expedia test reservation. This is a free-text comment from the traveler.".
     */
    public Builder specialRequest(String specialRequest) {
      this.specialRequest = Optional.present(specialRequest);
      return this;
    }

    /**
     * Current status of the reservation. Defaults to BOOKED.
     */
    public Builder status(ReservationStatusInput status) {
      this.status = Optional.present(status);
      return this;
    }

    /**
     * Value add promotion(s) used to book the reservation. Defaults to a single "Free full breakfast for 2 per day" value added promotion.
     */
    public Builder valueAddedPromotions(
        List<ReservationValueAddedPromotionInput> valueAddedPromotions) {
      this.valueAddedPromotions = Optional.present(valueAddedPromotions);
      return this;
    }

    public CreateReservationInput build() {
      return new CreateReservationInput(accessibilityText, adultCount, bedTypes, businessModel, checkInDate, checkOutDate, childAges, childCount, clientMutationId, multiRoomText, primaryGuest, propertyId, reconciliationType, remittanceType, sendNotification, smokingType, specialRequest, status, valueAddedPromotions);
    }
  }
}
