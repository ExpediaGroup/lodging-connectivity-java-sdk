//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter;

import com.apollographql.apollo.api.Adapter;
import com.apollographql.apollo.api.Adapters;
import com.apollographql.apollo.api.ApolloOptionalAdapter;
import com.apollographql.apollo.api.CustomScalarAdapters;
import com.apollographql.apollo.api.ListAdapter;
import com.apollographql.apollo.api.NullableAdapter;
import com.apollographql.apollo.api.ObjectAdapter;
import com.apollographql.apollo.api.Optional;
import com.apollographql.apollo.api.json.JsonReader;
import com.apollographql.apollo.api.json.JsonWriter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.AcknowledgementRecordInput;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.ApplicableRegulationsInput;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.AttachmentUrlInput;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.RegistrationDetailInput;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.RegistrationRecordInput;
import java.io.IOException;
import java.lang.IllegalStateException;
import java.lang.Override;

public enum RegistrationDetailInput_InputAdapter implements Adapter<RegistrationDetailInput> {
  INSTANCE;

  @Override
  public RegistrationDetailInput fromJson(JsonReader reader,
      CustomScalarAdapters customScalarAdapters) throws IOException {
    throw new IllegalStateException("Input type used in output position");
  }

  @Override
  public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
      RegistrationDetailInput value) throws IOException {
    if (value.acknowledgementRecords instanceof Optional.Present) {
      writer.name("acknowledgementRecords");
      new ApolloOptionalAdapter<>(new NullableAdapter<>(new ListAdapter<>(new ObjectAdapter<AcknowledgementRecordInput>(AcknowledgementRecordInput_InputAdapter.INSTANCE, false)))).toJson(writer, customScalarAdapters, value.acknowledgementRecords);
    }
    if (value.applicableRegulations instanceof Optional.Present) {
      writer.name("applicableRegulations");
      new ApolloOptionalAdapter<>(new NullableAdapter<>(new ListAdapter<>(new ObjectAdapter<ApplicableRegulationsInput>(ApplicableRegulationsInput_InputAdapter.INSTANCE, false)))).toJson(writer, customScalarAdapters, value.applicableRegulations);
    }
    if (value.attachmentUrls instanceof Optional.Present) {
      writer.name("attachmentUrls");
      new ApolloOptionalAdapter<>(new NullableAdapter<>(new ListAdapter<>(new ObjectAdapter<AttachmentUrlInput>(AttachmentUrlInput_InputAdapter.INSTANCE, false)))).toJson(writer, customScalarAdapters, value.attachmentUrls);
    }
    if (value.displayRegistrationNumber instanceof Optional.Present) {
      writer.name("displayRegistrationNumber");
      new ApolloOptionalAdapter<>(Adapters.NullableStringAdapter).toJson(writer, customScalarAdapters, value.displayRegistrationNumber);
    }
    if (value.exemptionCategories instanceof Optional.Present) {
      writer.name("exemptionCategories");
      new ApolloOptionalAdapter<>(new NullableAdapter<>(new ListAdapter<>(ExemptionCategory_ResponseAdapter.INSTANCE))).toJson(writer, customScalarAdapters, value.exemptionCategories);
    }
    if (value.numberOfPhysicalRooms instanceof Optional.Present) {
      writer.name("numberOfPhysicalRooms");
      new ApolloOptionalAdapter<>(Adapters.NullableIntAdapter).toJson(writer, customScalarAdapters, value.numberOfPhysicalRooms);
    }
    writer.name("registrationRecords");
    new ListAdapter<>(new ObjectAdapter<RegistrationRecordInput>(RegistrationRecordInput_InputAdapter.INSTANCE, false)).toJson(writer, customScalarAdapters, value.registrationRecords);
    writer.name("regulatoryCategory");
    RegulatoryCategory_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.regulatoryCategory);
    if (value.regulatorySubType instanceof Optional.Present) {
      writer.name("regulatorySubType");
      new ApolloOptionalAdapter<>(Adapters.NullableStringAdapter).toJson(writer, customScalarAdapters, value.regulatorySubType);
    }
    writer.name("regulatoryType");
    Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.regulatoryType);
    writer.name("unitId");
    Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.unitId);
  }
}
