//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type;

import com.apollographql.apollo.api.Optional;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;

public class BookingPolicyInput {
  public final Optional<AcceptedPaymentFormsInput> acceptedPaymentForms;

  public final Optional<String> bookingType;

  private transient volatile int $hashCode;

  private transient volatile boolean $hashCodeMemoized;

  private transient volatile String $toString;

  public BookingPolicyInput(Optional<AcceptedPaymentFormsInput> acceptedPaymentForms,
      Optional<String> bookingType) {
    this.acceptedPaymentForms = acceptedPaymentForms;
    this.bookingType = bookingType;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof BookingPolicyInput) {
      BookingPolicyInput that = (BookingPolicyInput) o;
      return ((this.acceptedPaymentForms == null) ? (that.acceptedPaymentForms == null) : this.acceptedPaymentForms.equals(that.acceptedPaymentForms))
       &&((this.bookingType == null) ? (that.bookingType == null) : this.bookingType.equals(that.bookingType));
    }
    return false;
  }

  @Override
  public int hashCode() {
    if (!$hashCodeMemoized) {
      int __h = 1;
      __h *= 1000003;
      __h ^= (acceptedPaymentForms == null) ? 0 : acceptedPaymentForms.hashCode();
      __h *= 1000003;
      __h ^= (bookingType == null) ? 0 : bookingType.hashCode();
      $hashCode = __h;
      $hashCodeMemoized = true;
    }
    return $hashCode;
  }

  @Override
  public String toString() {
    if ($toString == null) {
      $toString = "BookingPolicyInput{"
        + "acceptedPaymentForms=" + acceptedPaymentForms + ", "
        + "bookingType=" + bookingType
        + "}";
    }
    return $toString;
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private Optional<AcceptedPaymentFormsInput> acceptedPaymentForms = Optional.absent();

    private Optional<String> bookingType = Optional.absent();

    Builder() {
    }

    public Builder acceptedPaymentForms(AcceptedPaymentFormsInput acceptedPaymentForms) {
      this.acceptedPaymentForms = Optional.present(acceptedPaymentForms);
      return this;
    }

    public Builder bookingType(String bookingType) {
      this.bookingType = Optional.present(bookingType);
      return this;
    }

    public BookingPolicyInput build() {
      return new BookingPolicyInput(acceptedPaymentForms, bookingType);
    }
  }
}
