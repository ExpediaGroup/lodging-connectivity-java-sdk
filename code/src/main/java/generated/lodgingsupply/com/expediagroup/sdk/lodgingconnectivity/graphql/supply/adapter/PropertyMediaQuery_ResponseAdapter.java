//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.adapter;

import com.apollographql.apollo.api.Adapter;
import com.apollographql.apollo.api.Adapters;
import com.apollographql.apollo.api.Assertions;
import com.apollographql.apollo.api.CustomScalarAdapters;
import com.apollographql.apollo.api.ListAdapter;
import com.apollographql.apollo.api.NullableAdapter;
import com.apollographql.apollo.api.ObjectAdapter;
import com.apollographql.apollo.api.json.JsonReader;
import com.apollographql.apollo.api.json.JsonWriter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.PropertyMediaQuery;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.ImageSource;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.ImageSource_ResponseAdapter;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class PropertyMediaQuery_ResponseAdapter {
  public enum Data implements Adapter<PropertyMediaQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("property");

    @Override
    public PropertyMediaQuery.Data fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      PropertyMediaQuery.Property _property = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _property = new NullableAdapter<>(new ObjectAdapter<PropertyMediaQuery.Property>(Property.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new PropertyMediaQuery.Data(
        _property
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyMediaQuery.Data value) throws IOException {
      writer.name("property");
      new NullableAdapter<>(new ObjectAdapter<PropertyMediaQuery.Property>(Property.INSTANCE, false)).toJson(writer, customScalarAdapters, value.property);
    }
  }

  public enum Property implements Adapter<PropertyMediaQuery.Property> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("media");

    @Override
    public PropertyMediaQuery.Property fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      PropertyMediaQuery.Media _media = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _media = new ObjectAdapter<PropertyMediaQuery.Media>(Media.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_media, "media");

      return new PropertyMediaQuery.Property(
        _media
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyMediaQuery.Property value) throws IOException {
      writer.name("media");
      new ObjectAdapter<PropertyMediaQuery.Media>(Media.INSTANCE, false).toJson(writer, customScalarAdapters, value.media);
    }
  }

  public enum Media implements Adapter<PropertyMediaQuery.Media> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("images");

    @Override
    public PropertyMediaQuery.Media fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      PropertyMediaQuery.Images _images = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _images = new NullableAdapter<>(new ObjectAdapter<PropertyMediaQuery.Images>(Images.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new PropertyMediaQuery.Media(
        _images
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyMediaQuery.Media value) throws IOException {
      writer.name("images");
      new NullableAdapter<>(new ObjectAdapter<PropertyMediaQuery.Images>(Images.INSTANCE, false)).toJson(writer, customScalarAdapters, value.images);
    }
  }

  public enum Images implements Adapter<PropertyMediaQuery.Images> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("elements", "totalCount");

    @Override
    public PropertyMediaQuery.Images fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      List<PropertyMediaQuery.Element> _elements = null;
      Integer _totalCount = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _elements = new ListAdapter<>(new ObjectAdapter<PropertyMediaQuery.Element>(Element.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 1: _totalCount = Adapters.IntAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_elements, "elements");
      Assertions.checkFieldNotMissing(_totalCount, "totalCount");

      return new PropertyMediaQuery.Images(
        _elements,
        _totalCount
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyMediaQuery.Images value) throws IOException {
      writer.name("elements");
      new ListAdapter<>(new ObjectAdapter<PropertyMediaQuery.Element>(Element.INSTANCE, false)).toJson(writer, customScalarAdapters, value.elements);

      writer.name("totalCount");
      Adapters.IntAdapter.toJson(writer, customScalarAdapters, value.totalCount);
    }
  }

  public enum Element implements Adapter<PropertyMediaQuery.Element> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("active", "captions", "featured", "fileName", "id", "order", "originalUrl", "publishedUrl", "rotation", "source", "status", "updatedDate");

    @Override
    public PropertyMediaQuery.Element fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Boolean _active = null;
      List<PropertyMediaQuery.Caption> _captions = null;
      Boolean _featured = null;
      String _fileName = null;
      String _id = null;
      Integer _order = null;
      String _originalUrl = null;
      String _publishedUrl = null;
      Integer _rotation = null;
      ImageSource _source = null;
      PropertyMediaQuery.Status _status = null;
      Object _updatedDate = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _active = Adapters.BooleanAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _captions = new ListAdapter<>(new ObjectAdapter<PropertyMediaQuery.Caption>(Caption.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 2: _featured = Adapters.BooleanAdapter.fromJson(reader, customScalarAdapters); break;
          case 3: _fileName = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 4: _id = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 5: _order = Adapters.NullableIntAdapter.fromJson(reader, customScalarAdapters); break;
          case 6: _originalUrl = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 7: _publishedUrl = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 8: _rotation = Adapters.IntAdapter.fromJson(reader, customScalarAdapters); break;
          case 9: _source = ImageSource_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          case 10: _status = new ObjectAdapter<PropertyMediaQuery.Status>(Status.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 11: _updatedDate = Adapters.AnyAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_active, "active");
      Assertions.checkFieldNotMissing(_captions, "captions");
      Assertions.checkFieldNotMissing(_featured, "featured");
      Assertions.checkFieldNotMissing(_id, "id");
      Assertions.checkFieldNotMissing(_rotation, "rotation");
      Assertions.checkFieldNotMissing(_source, "source");
      Assertions.checkFieldNotMissing(_status, "status");
      Assertions.checkFieldNotMissing(_updatedDate, "updatedDate");

      return new PropertyMediaQuery.Element(
        _active,
        _captions,
        _featured,
        _fileName,
        _id,
        _order,
        _originalUrl,
        _publishedUrl,
        _rotation,
        _source,
        _status,
        _updatedDate
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyMediaQuery.Element value) throws IOException {
      writer.name("active");
      Adapters.BooleanAdapter.toJson(writer, customScalarAdapters, value.active);

      writer.name("captions");
      new ListAdapter<>(new ObjectAdapter<PropertyMediaQuery.Caption>(Caption.INSTANCE, false)).toJson(writer, customScalarAdapters, value.captions);

      writer.name("featured");
      Adapters.BooleanAdapter.toJson(writer, customScalarAdapters, value.featured);

      writer.name("fileName");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.fileName);

      writer.name("id");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.id);

      writer.name("order");
      Adapters.NullableIntAdapter.toJson(writer, customScalarAdapters, value.order);

      writer.name("originalUrl");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.originalUrl);

      writer.name("publishedUrl");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.publishedUrl);

      writer.name("rotation");
      Adapters.IntAdapter.toJson(writer, customScalarAdapters, value.rotation);

      writer.name("source");
      ImageSource_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.source);

      writer.name("status");
      new ObjectAdapter<PropertyMediaQuery.Status>(Status.INSTANCE, false).toJson(writer, customScalarAdapters, value.status);

      writer.name("updatedDate");
      Adapters.AnyAdapter.toJson(writer, customScalarAdapters, value.updatedDate);
    }
  }

  public enum Caption implements Adapter<PropertyMediaQuery.Caption> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("locale", "value");

    @Override
    public PropertyMediaQuery.Caption fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Object _locale = null;
      String _value = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _locale = Adapters.AnyAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _value = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_locale, "locale");
      Assertions.checkFieldNotMissing(_value, "value");

      return new PropertyMediaQuery.Caption(
        _locale,
        _value
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyMediaQuery.Caption value) throws IOException {
      writer.name("locale");
      Adapters.AnyAdapter.toJson(writer, customScalarAdapters, value.locale);

      writer.name("value");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.value);
    }
  }

  public enum Status implements Adapter<PropertyMediaQuery.Status> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("reason", "type");

    @Override
    public PropertyMediaQuery.Status fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _reason = null;
      String _type = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _reason = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _type = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_type, "type");

      return new PropertyMediaQuery.Status(
        _reason,
        _type
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyMediaQuery.Status value) throws IOException {
      writer.name("reason");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.reason);

      writer.name("type");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.type);
    }
  }
}
