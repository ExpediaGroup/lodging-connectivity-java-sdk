//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter;

import com.apollographql.apollo.api.Adapter;
import com.apollographql.apollo.api.CustomScalarAdapters;
import com.apollographql.apollo.api.ListAdapter;
import com.apollographql.apollo.api.ObjectAdapter;
import com.apollographql.apollo.api.json.JsonReader;
import com.apollographql.apollo.api.json.JsonWriter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.AllowedPetsInput;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.LocalizedStringInput;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.UpdatePetsPolicyInput;
import java.io.IOException;
import java.lang.IllegalStateException;
import java.lang.Override;

public enum UpdatePetsPolicyInput_InputAdapter implements Adapter<UpdatePetsPolicyInput> {
  INSTANCE;

  @Override
  public UpdatePetsPolicyInput fromJson(JsonReader reader,
      CustomScalarAdapters customScalarAdapters) throws IOException {
    throw new IllegalStateException("Input type used in output position");
  }

  @Override
  public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
      UpdatePetsPolicyInput value) throws IOException {
    if (value.allowed.isPresent()) {
      writer.name("allowed");
      new OptionalAdapter<>(OptionalAdapters.OptionalBooleanAdapter).toJson(writer, customScalarAdapters, value.allowed);
    }
    if (value.allowedPets.isPresent()) {
      writer.name("allowedPets");
      new OptionalAdapter<>(new OptionalAdapter<>(new ObjectAdapter<AllowedPetsInput>(AllowedPetsInput_InputAdapter.INSTANCE, false))).toJson(writer, customScalarAdapters, value.allowedPets);
    }
    if (value.note.isPresent()) {
      writer.name("note");
      new OptionalAdapter<>(new OptionalAdapter<>(new ListAdapter<>(new ObjectAdapter<LocalizedStringInput>(LocalizedStringInput_InputAdapter.INSTANCE, false)))).toJson(writer, customScalarAdapters, value.note);
    }
  }
}
