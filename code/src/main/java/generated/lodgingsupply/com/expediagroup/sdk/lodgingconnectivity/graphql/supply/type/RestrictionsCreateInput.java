//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type;

import com.apollographql.apollo.api.Optional;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.time.LocalDate;
import java.time.LocalDateTime;

public class RestrictionsCreateInput {
  public final Optional<Boolean> isMemberOnly;

  public final Optional<Boolean> isMobileUserOnly;

  public final Optional<Integer> minLengthOfStay;

  public final Optional<Integer> maxLengthOfStay;

  public final Optional<Integer> minAdvanceBookingDays;

  public final Optional<Integer> maxAdvanceBookingDays;

  public final LocalDateTime bookingLocalDateTimeFrom;

  public final LocalDateTime bookingLocalDateTimeTo;

  public final LocalDate travelDateFrom;

  public final LocalDate travelDateTo;

  public final Optional<Object> sameDayBookingStartTime;

  private transient volatile int $hashCode;

  private transient volatile boolean $hashCodeMemoized;

  private transient volatile String $toString;

  public RestrictionsCreateInput(Optional<Boolean> isMemberOnly, Optional<Boolean> isMobileUserOnly,
      Optional<Integer> minLengthOfStay, Optional<Integer> maxLengthOfStay,
      Optional<Integer> minAdvanceBookingDays, Optional<Integer> maxAdvanceBookingDays,
      LocalDateTime bookingLocalDateTimeFrom, LocalDateTime bookingLocalDateTimeTo,
      LocalDate travelDateFrom, LocalDate travelDateTo, Optional<Object> sameDayBookingStartTime) {
    this.isMemberOnly = isMemberOnly;
    this.isMobileUserOnly = isMobileUserOnly;
    this.minLengthOfStay = minLengthOfStay;
    this.maxLengthOfStay = maxLengthOfStay;
    this.minAdvanceBookingDays = minAdvanceBookingDays;
    this.maxAdvanceBookingDays = maxAdvanceBookingDays;
    this.bookingLocalDateTimeFrom = bookingLocalDateTimeFrom;
    this.bookingLocalDateTimeTo = bookingLocalDateTimeTo;
    this.travelDateFrom = travelDateFrom;
    this.travelDateTo = travelDateTo;
    this.sameDayBookingStartTime = sameDayBookingStartTime;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof RestrictionsCreateInput) {
      RestrictionsCreateInput that = (RestrictionsCreateInput) o;
      return ((this.isMemberOnly == null) ? (that.isMemberOnly == null) : this.isMemberOnly.equals(that.isMemberOnly))
       &&((this.isMobileUserOnly == null) ? (that.isMobileUserOnly == null) : this.isMobileUserOnly.equals(that.isMobileUserOnly))
       &&((this.minLengthOfStay == null) ? (that.minLengthOfStay == null) : this.minLengthOfStay.equals(that.minLengthOfStay))
       &&((this.maxLengthOfStay == null) ? (that.maxLengthOfStay == null) : this.maxLengthOfStay.equals(that.maxLengthOfStay))
       &&((this.minAdvanceBookingDays == null) ? (that.minAdvanceBookingDays == null) : this.minAdvanceBookingDays.equals(that.minAdvanceBookingDays))
       &&((this.maxAdvanceBookingDays == null) ? (that.maxAdvanceBookingDays == null) : this.maxAdvanceBookingDays.equals(that.maxAdvanceBookingDays))
       &&((this.bookingLocalDateTimeFrom == null) ? (that.bookingLocalDateTimeFrom == null) : this.bookingLocalDateTimeFrom.equals(that.bookingLocalDateTimeFrom))
       &&((this.bookingLocalDateTimeTo == null) ? (that.bookingLocalDateTimeTo == null) : this.bookingLocalDateTimeTo.equals(that.bookingLocalDateTimeTo))
       &&((this.travelDateFrom == null) ? (that.travelDateFrom == null) : this.travelDateFrom.equals(that.travelDateFrom))
       &&((this.travelDateTo == null) ? (that.travelDateTo == null) : this.travelDateTo.equals(that.travelDateTo))
       &&((this.sameDayBookingStartTime == null) ? (that.sameDayBookingStartTime == null) : this.sameDayBookingStartTime.equals(that.sameDayBookingStartTime));
    }
    return false;
  }

  @Override
  public int hashCode() {
    if (!$hashCodeMemoized) {
      int __h = 1;
      __h *= 1000003;
      __h ^= (isMemberOnly == null) ? 0 : isMemberOnly.hashCode();
      __h *= 1000003;
      __h ^= (isMobileUserOnly == null) ? 0 : isMobileUserOnly.hashCode();
      __h *= 1000003;
      __h ^= (minLengthOfStay == null) ? 0 : minLengthOfStay.hashCode();
      __h *= 1000003;
      __h ^= (maxLengthOfStay == null) ? 0 : maxLengthOfStay.hashCode();
      __h *= 1000003;
      __h ^= (minAdvanceBookingDays == null) ? 0 : minAdvanceBookingDays.hashCode();
      __h *= 1000003;
      __h ^= (maxAdvanceBookingDays == null) ? 0 : maxAdvanceBookingDays.hashCode();
      __h *= 1000003;
      __h ^= (bookingLocalDateTimeFrom == null) ? 0 : bookingLocalDateTimeFrom.hashCode();
      __h *= 1000003;
      __h ^= (bookingLocalDateTimeTo == null) ? 0 : bookingLocalDateTimeTo.hashCode();
      __h *= 1000003;
      __h ^= (travelDateFrom == null) ? 0 : travelDateFrom.hashCode();
      __h *= 1000003;
      __h ^= (travelDateTo == null) ? 0 : travelDateTo.hashCode();
      __h *= 1000003;
      __h ^= (sameDayBookingStartTime == null) ? 0 : sameDayBookingStartTime.hashCode();
      $hashCode = __h;
      $hashCodeMemoized = true;
    }
    return $hashCode;
  }

  @Override
  public String toString() {
    if ($toString == null) {
      $toString = "RestrictionsCreateInput{"
        + "isMemberOnly=" + isMemberOnly + ", "
        + "isMobileUserOnly=" + isMobileUserOnly + ", "
        + "minLengthOfStay=" + minLengthOfStay + ", "
        + "maxLengthOfStay=" + maxLengthOfStay + ", "
        + "minAdvanceBookingDays=" + minAdvanceBookingDays + ", "
        + "maxAdvanceBookingDays=" + maxAdvanceBookingDays + ", "
        + "bookingLocalDateTimeFrom=" + bookingLocalDateTimeFrom + ", "
        + "bookingLocalDateTimeTo=" + bookingLocalDateTimeTo + ", "
        + "travelDateFrom=" + travelDateFrom + ", "
        + "travelDateTo=" + travelDateTo + ", "
        + "sameDayBookingStartTime=" + sameDayBookingStartTime
        + "}";
    }
    return $toString;
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private Optional<Boolean> isMemberOnly = Optional.absent();

    private Optional<Boolean> isMobileUserOnly = Optional.absent();

    private Optional<Integer> minLengthOfStay = Optional.absent();

    private Optional<Integer> maxLengthOfStay = Optional.absent();

    private Optional<Integer> minAdvanceBookingDays = Optional.absent();

    private Optional<Integer> maxAdvanceBookingDays = Optional.absent();

    private LocalDateTime bookingLocalDateTimeFrom;

    private LocalDateTime bookingLocalDateTimeTo;

    private LocalDate travelDateFrom;

    private LocalDate travelDateTo;

    private Optional<Object> sameDayBookingStartTime = Optional.absent();

    Builder() {
    }

    /**
     * Setting this to true indicates that the promotion is targeted exclusively towards Expedia Group members whose loyalty drives bookings.
     */
    public Builder isMemberOnly(Boolean isMemberOnly) {
      this.isMemberOnly = Optional.present(isMemberOnly);
      return this;
    }

    /**
     * It indicates if this promotion is applicable only for travelers booking on the mobile device.
     * This field will be null in the Query All promotions functionality and will ONLY be returned when querying for a Single Promotion (by specifying the promotion Id).
     */
    public Builder isMobileUserOnly(Boolean isMobileUserOnly) {
      this.isMobileUserOnly = Optional.present(isMobileUserOnly);
      return this;
    }

    /**
     * The minimum duration of stay for which the promotion can be applicable.
     */
    public Builder minLengthOfStay(Integer minLengthOfStay) {
      this.minLengthOfStay = Optional.present(minLengthOfStay);
      return this;
    }

    /**
     * The maximum duration of stay for which the promotion can be applicable. The maximum value possible here is 28.
     */
    public Builder maxLengthOfStay(Integer maxLengthOfStay) {
      this.maxLengthOfStay = Optional.present(maxLengthOfStay);
      return this;
    }

    /**
     * The minimum number of days in advance the reservation must be made for the promotion to be applicable.
     */
    public Builder minAdvanceBookingDays(Integer minAdvanceBookingDays) {
      this.minAdvanceBookingDays = Optional.present(minAdvanceBookingDays);
      return this;
    }

    /**
     * The maximum number of days in advance the reservation must be made for the promotion to be applicable.
     */
    public Builder maxAdvanceBookingDays(Integer maxAdvanceBookingDays) {
      this.maxAdvanceBookingDays = Optional.present(maxAdvanceBookingDays);
      return this;
    }

    /**
     * The Booking Date Time from which this promotion is applicable.
     * YYYY-MM-DDThh:mm:ss . Timezone is the time with respect to the property location.
     */
    public Builder bookingLocalDateTimeFrom(LocalDateTime bookingLocalDateTimeFrom) {
      this.bookingLocalDateTimeFrom = bookingLocalDateTimeFrom;
      return this;
    }

    /**
     * The Booking Date Time until which this promotion is applicable.
     * YYYY-MM-DDThh:mm:ss . Timezone is the time with respect to the property location.
     */
    public Builder bookingLocalDateTimeTo(LocalDateTime bookingLocalDateTimeTo) {
      this.bookingLocalDateTimeTo = bookingLocalDateTimeTo;
      return this;
    }

    /**
     * The Travel date from which this promotion is applicable in YYYY-MM-DD format.
     */
    public Builder travelDateFrom(LocalDate travelDateFrom) {
      this.travelDateFrom = travelDateFrom;
      return this;
    }

    /**
     * The Travel date until which this promotion is applicable in YYYY-MM-DD format.
     */
    public Builder travelDateTo(LocalDate travelDateTo) {
      this.travelDateTo = travelDateTo;
      return this;
    }

    /**
     * Applicable only for SAME_DAY_PROMOTION. The start time for the same day from which the promotion is applicable.
     * The timezone in consideration will be the local time for the property the promotion is applied for.
     */
    public Builder sameDayBookingStartTime(Object sameDayBookingStartTime) {
      this.sameDayBookingStartTime = Optional.present(sameDayBookingStartTime);
      return this;
    }

    public RestrictionsCreateInput build() {
      return new RestrictionsCreateInput(isMemberOnly, isMobileUserOnly, minLengthOfStay, maxLengthOfStay, minAdvanceBookingDays, maxAdvanceBookingDays, bookingLocalDateTimeFrom, bookingLocalDateTimeTo, travelDateFrom, travelDateTo, sameDayBookingStartTime);
    }
  }
}
