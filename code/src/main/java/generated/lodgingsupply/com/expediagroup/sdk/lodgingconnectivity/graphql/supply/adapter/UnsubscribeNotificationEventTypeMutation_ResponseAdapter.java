//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.adapter;

import com.apollographql.apollo.api.Adapter;
import com.apollographql.apollo.api.Adapters;
import com.apollographql.apollo.api.Assertions;
import com.apollographql.apollo.api.CustomScalarAdapters;
import com.apollographql.apollo.api.ObjectAdapter;
import com.apollographql.apollo.api.json.JsonReader;
import com.apollographql.apollo.api.json.JsonWriter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.UnsubscribeNotificationEventTypeMutation;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.OptionalAdapter;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

public class UnsubscribeNotificationEventTypeMutation_ResponseAdapter {
  public enum Data implements Adapter<UnsubscribeNotificationEventTypeMutation.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("unsubscribeNotificationEventType");

    @Override
    public UnsubscribeNotificationEventTypeMutation.Data fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Optional<UnsubscribeNotificationEventTypeMutation.UnsubscribeNotificationEventType> _unsubscribeNotificationEventType = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _unsubscribeNotificationEventType = new OptionalAdapter<>(new ObjectAdapter<UnsubscribeNotificationEventTypeMutation.UnsubscribeNotificationEventType>(UnsubscribeNotificationEventType.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new UnsubscribeNotificationEventTypeMutation.Data(
        _unsubscribeNotificationEventType
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        UnsubscribeNotificationEventTypeMutation.Data value) throws IOException {
      writer.name("unsubscribeNotificationEventType");
      new OptionalAdapter<>(new ObjectAdapter<UnsubscribeNotificationEventTypeMutation.UnsubscribeNotificationEventType>(UnsubscribeNotificationEventType.INSTANCE, false)).toJson(writer, customScalarAdapters, value.unsubscribeNotificationEventType);
    }
  }

  public enum UnsubscribeNotificationEventType implements Adapter<UnsubscribeNotificationEventTypeMutation.UnsubscribeNotificationEventType> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("eventType");

    @Override
    public UnsubscribeNotificationEventTypeMutation.UnsubscribeNotificationEventType fromJson(
        JsonReader reader, CustomScalarAdapters customScalarAdapters) throws IOException {
      String _eventType = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _eventType = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_eventType, "eventType");

      return new UnsubscribeNotificationEventTypeMutation.UnsubscribeNotificationEventType(
        _eventType
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        UnsubscribeNotificationEventTypeMutation.UnsubscribeNotificationEventType value) throws
        IOException {
      writer.name("eventType");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.eventType);
    }
  }
}
