//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.4'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.adapter;

import com.apollographql.apollo3.api.Adapter;
import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.ListAdapter;
import com.apollographql.apollo3.api.NullableAdapter;
import com.apollographql.apollo3.api.ObjectAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.PropertiesByAdvertiserQuery;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class PropertiesByAdvertiserQuery_ResponseAdapter {
  public enum Data implements Adapter<PropertiesByAdvertiserQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("propertiesByAdvertiser");

    @Override
    public PropertiesByAdvertiserQuery.Data fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      PropertiesByAdvertiserQuery.PropertiesByAdvertiser _propertiesByAdvertiser = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _propertiesByAdvertiser = new NullableAdapter<>(new ObjectAdapter<PropertiesByAdvertiserQuery.PropertiesByAdvertiser>(PropertiesByAdvertiser.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new PropertiesByAdvertiserQuery.Data(
        _propertiesByAdvertiser
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertiesByAdvertiserQuery.Data value) throws IOException {
      writer.name("propertiesByAdvertiser");
      new NullableAdapter<>(new ObjectAdapter<PropertiesByAdvertiserQuery.PropertiesByAdvertiser>(PropertiesByAdvertiser.INSTANCE, false)).toJson(writer, customScalarAdapters, value.propertiesByAdvertiser);
    }
  }

  public enum PropertiesByAdvertiser implements Adapter<PropertiesByAdvertiserQuery.PropertiesByAdvertiser> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("cursor", "totalCount", "elements");

    @Override
    public PropertiesByAdvertiserQuery.PropertiesByAdvertiser fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _cursor = null;
      Integer _totalCount = null;
      List<PropertiesByAdvertiserQuery.Element> _elements = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _cursor = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _totalCount = Adapters.IntAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _elements = new ListAdapter<>(new ObjectAdapter<PropertiesByAdvertiserQuery.Element>(Element.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_totalCount, "totalCount");
      Assertions.checkFieldNotMissing(_elements, "elements");

      return new PropertiesByAdvertiserQuery.PropertiesByAdvertiser(
        _cursor,
        _totalCount,
        _elements
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertiesByAdvertiserQuery.PropertiesByAdvertiser value) throws IOException {
      writer.name("cursor");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.cursor);

      writer.name("totalCount");
      Adapters.IntAdapter.toJson(writer, customScalarAdapters, value.totalCount);

      writer.name("elements");
      new ListAdapter<>(new ObjectAdapter<PropertiesByAdvertiserQuery.Element>(Element.INSTANCE, false)).toJson(writer, customScalarAdapters, value.elements);
    }
  }

  public enum Element implements Adapter<PropertiesByAdvertiserQuery.Element> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id", "name");

    @Override
    public PropertiesByAdvertiserQuery.Element fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _id = null;
      String _name = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _id = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _name = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_id, "id");
      Assertions.checkFieldNotMissing(_name, "name");

      return new PropertiesByAdvertiserQuery.Element(
        _id,
        _name
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertiesByAdvertiserQuery.Element value) throws IOException {
      writer.name("id");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.id);

      writer.name("name");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.name);
    }
  }
}
