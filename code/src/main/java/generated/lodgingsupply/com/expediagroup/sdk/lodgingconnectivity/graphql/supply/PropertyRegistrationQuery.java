//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply;

import com.apollographql.apollo.api.Adapter;
import com.apollographql.apollo.api.CompiledField;
import com.apollographql.apollo.api.CustomScalarAdapters;
import com.apollographql.apollo.api.ObjectAdapter;
import com.apollographql.apollo.api.Query;
import com.apollographql.apollo.api.json.JsonWriter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.adapter.PropertyRegistrationQuery_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.adapter.PropertyRegistrationQuery_VariablesAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.selections.PropertyRegistrationQuerySelections;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.IdSource;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.RegulatoryCategory;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.RegulatoryStatus;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;

public class PropertyRegistrationQuery implements Query<PropertyRegistrationQuery.Data> {
  public static final String OPERATION_ID = "7ae05a94ebd1b36ae2d1e59c1b5f2af226545141f6345fcebb282bc3cd95ebfc";

  /**
   * The minimized GraphQL document being sent to the server to save a few bytes.
   * The un-minimized version is:
   *
   * query PropertyRegistration($propertyID: String!, $idSource: IdSource) {
   *   property(id: $propertyID, idSource: $idSource) {
   *     id
   *     name
   *     units {
   *       ids {
   *         id
   *         idSource
   *       }
   *       registration {
   *         district
   *         detail {
   *           compliant {
   *             status
   *             reason
   *           }
   *           regulatoryCategory
   *           numberOfPhysicalRooms
   *           registrationRecords {
   *             registrationNumber
   *             registrationNumberTypeLabel
   *             expiry
   *           }
   *         }
   *       }
   *     }
   *   }
   * }
   */
  public static final String OPERATION_DOCUMENT = "query PropertyRegistration($propertyID: String!, $idSource: IdSource) { property(id: $propertyID, idSource: $idSource) { id name units { ids { id idSource } registration { district detail { compliant { status reason } regulatoryCategory numberOfPhysicalRooms registrationRecords { registrationNumber registrationNumberTypeLabel expiry } } } } } }";

  public static final String OPERATION_NAME = "PropertyRegistration";

  public final String propertyID;

  public final Optional<IdSource> idSource;

  private transient volatile int $hashCode;

  private transient volatile boolean $hashCodeMemoized;

  private transient volatile String $toString;

  public PropertyRegistrationQuery(String propertyID, Optional<IdSource> idSource) {
    this.propertyID = propertyID;
    this.idSource = idSource;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof PropertyRegistrationQuery) {
      PropertyRegistrationQuery that = (PropertyRegistrationQuery) o;
      return ((this.propertyID == null) ? (that.propertyID == null) : this.propertyID.equals(that.propertyID))
       &&((this.idSource == null) ? (that.idSource == null) : this.idSource.equals(that.idSource));
    }
    return false;
  }

  @Override
  public int hashCode() {
    if (!$hashCodeMemoized) {
      int __h = 1;
      __h *= 1000003;
      __h ^= (propertyID == null) ? 0 : propertyID.hashCode();
      __h *= 1000003;
      __h ^= (idSource == null) ? 0 : idSource.hashCode();
      $hashCode = __h;
      $hashCodeMemoized = true;
    }
    return $hashCode;
  }

  @Override
  public String toString() {
    if ($toString == null) {
      $toString = "PropertyRegistrationQuery{"
        + "propertyID=" + propertyID + ", "
        + "idSource=" + idSource
        + "}";
    }
    return $toString;
  }

  public static Builder builder() {
    return new Builder();
  }

  @Override
  public String id() {
    return OPERATION_ID;
  }

  @Override
  public String document() {
    return OPERATION_DOCUMENT;
  }

  @Override
  public String name() {
    return OPERATION_NAME;
  }

  @Override
  public void serializeVariables(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
      boolean withDefaultValues) throws IOException {
    PropertyRegistrationQuery_VariablesAdapter.INSTANCE.serializeVariables(writer, this, customScalarAdapters, withDefaultValues);
  }

  @Override
  public Adapter<Data> adapter() {
    return new ObjectAdapter<Data>(PropertyRegistrationQuery_ResponseAdapter.Data.INSTANCE, false);
  }

  @Override
  public CompiledField rootField() {
    return new CompiledField.Builder(
      "data",
      com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.Query.type
    )
    .selections(PropertyRegistrationQuerySelections.__root)
    .build();
  }

  public static final class Builder {
    private String propertyID;

    private Optional<IdSource> idSource = Optional.empty();

    Builder() {
    }

    public Builder propertyID(String propertyID) {
      this.propertyID = propertyID;
      return this;
    }

    public Builder idSource(IdSource idSource) {
      this.idSource = Optional.of(idSource);
      return this;
    }

    public PropertyRegistrationQuery build() {
      return new PropertyRegistrationQuery(propertyID, idSource);
    }
  }

  public static class Data implements Query.Data {
    public Optional<Property> property;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    private transient volatile String $toString;

    public Data(Optional<Property> property) {
      this.property = property;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof Data) {
        Data that = (Data) o;
        return ((this.property == null) ? (that.property == null) : this.property.equals(that.property));
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int __h = 1;
        __h *= 1000003;
        __h ^= (property == null) ? 0 : property.hashCode();
        $hashCode = __h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "Data{"
          + "property=" + property
          + "}";
      }
      return $toString;
    }
  }

  public static class Property {
    /**
     * the ID of the property whose reservations you want to retrieve
     */
    public String id;

    /**
     * Name/headline of the property for the default locale.
     */
    public String name;

    /**
     * A collection of Unit configurations for the Property
     */
    public Optional<List<Optional<Unit>>> units;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    private transient volatile String $toString;

    public Property(String id, String name, Optional<List<Optional<Unit>>> units) {
      this.id = id;
      this.name = name;
      this.units = units;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof Property) {
        Property that = (Property) o;
        return ((this.id == null) ? (that.id == null) : this.id.equals(that.id))
         &&((this.name == null) ? (that.name == null) : this.name.equals(that.name))
         &&((this.units == null) ? (that.units == null) : this.units.equals(that.units));
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int __h = 1;
        __h *= 1000003;
        __h ^= (id == null) ? 0 : id.hashCode();
        __h *= 1000003;
        __h ^= (name == null) ? 0 : name.hashCode();
        __h *= 1000003;
        __h ^= (units == null) ? 0 : units.hashCode();
        $hashCode = __h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "Property{"
          + "id=" + id + ", "
          + "name=" + name + ", "
          + "units=" + units
          + "}";
      }
      return $toString;
    }
  }

  public static class Unit {
    public Optional<List<Optional<Id>>> ids;

    /**
     * Unit regulatory registration information.
     */
    public Optional<Registration> registration;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    private transient volatile String $toString;

    public Unit(Optional<List<Optional<Id>>> ids, Optional<Registration> registration) {
      this.ids = ids;
      this.registration = registration;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof Unit) {
        Unit that = (Unit) o;
        return ((this.ids == null) ? (that.ids == null) : this.ids.equals(that.ids))
         &&((this.registration == null) ? (that.registration == null) : this.registration.equals(that.registration));
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int __h = 1;
        __h *= 1000003;
        __h ^= (ids == null) ? 0 : ids.hashCode();
        __h *= 1000003;
        __h ^= (registration == null) ? 0 : registration.hashCode();
        $hashCode = __h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "Unit{"
          + "ids=" + ids + ", "
          + "registration=" + registration
          + "}";
      }
      return $toString;
    }
  }

  public static class Id {
    public Optional<String> id;

    public IdSource idSource;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    private transient volatile String $toString;

    public Id(Optional<String> id, IdSource idSource) {
      this.id = id;
      this.idSource = idSource;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof Id) {
        Id that = (Id) o;
        return ((this.id == null) ? (that.id == null) : this.id.equals(that.id))
         &&((this.idSource == null) ? (that.idSource == null) : this.idSource.equals(that.idSource));
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int __h = 1;
        __h *= 1000003;
        __h ^= (id == null) ? 0 : id.hashCode();
        __h *= 1000003;
        __h ^= (idSource == null) ? 0 : idSource.hashCode();
        $hashCode = __h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "Id{"
          + "id=" + id + ", "
          + "idSource=" + idSource
          + "}";
      }
      return $toString;
    }
  }

  public static class Registration {
    /**
     * Geographical jurisdiction identifier. For non-configured districts, this is null.
     */
    public Optional<String> district;

    /**
     * List of registration information for the specified unit of a multi-unit property.
     */
    public Detail detail;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    private transient volatile String $toString;

    public Registration(Optional<String> district, Detail detail) {
      this.district = district;
      this.detail = detail;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof Registration) {
        Registration that = (Registration) o;
        return ((this.district == null) ? (that.district == null) : this.district.equals(that.district))
         &&((this.detail == null) ? (that.detail == null) : this.detail.equals(that.detail));
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int __h = 1;
        __h *= 1000003;
        __h ^= (district == null) ? 0 : district.hashCode();
        __h *= 1000003;
        __h ^= (detail == null) ? 0 : detail.hashCode();
        $hashCode = __h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "Registration{"
          + "district=" + district + ", "
          + "detail=" + detail
          + "}";
      }
      return $toString;
    }
  }

  public static class Detail {
    /**
     * Describes whether the unit is compliant with the local jurisdiction's regulatory requirements.
     */
    public Optional<Compliant> compliant;

    /**
     * Property classification category as maintained by the governing jurisdiction.
     */
    public RegulatoryCategory regulatoryCategory;

    /**
     * Number of rooms in the bookable unit.
     */
    public Optional<Integer> numberOfPhysicalRooms;

    /**
     * Registration records for the bookable unit filed with the governing jurisdiction.
     */
    public List<RegistrationRecord> registrationRecords;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    private transient volatile String $toString;

    public Detail(Optional<Compliant> compliant, RegulatoryCategory regulatoryCategory,
        Optional<Integer> numberOfPhysicalRooms, List<RegistrationRecord> registrationRecords) {
      this.compliant = compliant;
      this.regulatoryCategory = regulatoryCategory;
      this.numberOfPhysicalRooms = numberOfPhysicalRooms;
      this.registrationRecords = registrationRecords;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof Detail) {
        Detail that = (Detail) o;
        return ((this.compliant == null) ? (that.compliant == null) : this.compliant.equals(that.compliant))
         &&((this.regulatoryCategory == null) ? (that.regulatoryCategory == null) : this.regulatoryCategory.equals(that.regulatoryCategory))
         &&((this.numberOfPhysicalRooms == null) ? (that.numberOfPhysicalRooms == null) : this.numberOfPhysicalRooms.equals(that.numberOfPhysicalRooms))
         &&((this.registrationRecords == null) ? (that.registrationRecords == null) : this.registrationRecords.equals(that.registrationRecords));
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int __h = 1;
        __h *= 1000003;
        __h ^= (compliant == null) ? 0 : compliant.hashCode();
        __h *= 1000003;
        __h ^= (regulatoryCategory == null) ? 0 : regulatoryCategory.hashCode();
        __h *= 1000003;
        __h ^= (numberOfPhysicalRooms == null) ? 0 : numberOfPhysicalRooms.hashCode();
        __h *= 1000003;
        __h ^= (registrationRecords == null) ? 0 : registrationRecords.hashCode();
        $hashCode = __h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "Detail{"
          + "compliant=" + compliant + ", "
          + "regulatoryCategory=" + regulatoryCategory + ", "
          + "numberOfPhysicalRooms=" + numberOfPhysicalRooms + ", "
          + "registrationRecords=" + registrationRecords
          + "}";
      }
      return $toString;
    }
  }

  public static class Compliant {
    /**
     * Whether the property is compliant or not.
     */
    public RegulatoryStatus status;

    /**
     * Reason why the unit is in or out of compliance.
     */
    public String reason;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    private transient volatile String $toString;

    public Compliant(RegulatoryStatus status, String reason) {
      this.status = status;
      this.reason = reason;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof Compliant) {
        Compliant that = (Compliant) o;
        return ((this.status == null) ? (that.status == null) : this.status.equals(that.status))
         &&((this.reason == null) ? (that.reason == null) : this.reason.equals(that.reason));
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int __h = 1;
        __h *= 1000003;
        __h ^= (status == null) ? 0 : status.hashCode();
        __h *= 1000003;
        __h ^= (reason == null) ? 0 : reason.hashCode();
        $hashCode = __h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "Compliant{"
          + "status=" + status + ", "
          + "reason=" + reason
          + "}";
      }
      return $toString;
    }
  }

  public static class RegistrationRecord {
    /**
     * Registration record ID.
     */
    public String registrationNumber;

    /**
     * Localized registration number type.
     */
    public Optional<String> registrationNumberTypeLabel;

    /**
     * Registration record expiration date in this format: yyyy-mm-dd.
     */
    public Optional<String> expiry;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    private transient volatile String $toString;

    public RegistrationRecord(String registrationNumber,
        Optional<String> registrationNumberTypeLabel, Optional<String> expiry) {
      this.registrationNumber = registrationNumber;
      this.registrationNumberTypeLabel = registrationNumberTypeLabel;
      this.expiry = expiry;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof RegistrationRecord) {
        RegistrationRecord that = (RegistrationRecord) o;
        return ((this.registrationNumber == null) ? (that.registrationNumber == null) : this.registrationNumber.equals(that.registrationNumber))
         &&((this.registrationNumberTypeLabel == null) ? (that.registrationNumberTypeLabel == null) : this.registrationNumberTypeLabel.equals(that.registrationNumberTypeLabel))
         &&((this.expiry == null) ? (that.expiry == null) : this.expiry.equals(that.expiry));
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int __h = 1;
        __h *= 1000003;
        __h ^= (registrationNumber == null) ? 0 : registrationNumber.hashCode();
        __h *= 1000003;
        __h ^= (registrationNumberTypeLabel == null) ? 0 : registrationNumberTypeLabel.hashCode();
        __h *= 1000003;
        __h ^= (expiry == null) ? 0 : expiry.hashCode();
        $hashCode = __h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "RegistrationRecord{"
          + "registrationNumber=" + registrationNumber + ", "
          + "registrationNumberTypeLabel=" + registrationNumberTypeLabel + ", "
          + "expiry=" + expiry
          + "}";
      }
      return $toString;
    }
  }
}
