//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type;

import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.time.LocalTime;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

public class ExactOrApproximateTimeInput {
  public final Optional<Optional<String>> approximateTime;

  public final Optional<Optional<LocalTime>> exactTime;

  private transient volatile int $hashCode;

  private transient volatile boolean $hashCodeMemoized;

  private transient volatile String $toString;

  public ExactOrApproximateTimeInput(Optional<Optional<String>> approximateTime,
      Optional<Optional<LocalTime>> exactTime) {
    this.approximateTime = approximateTime;
    this.exactTime = exactTime;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof ExactOrApproximateTimeInput) {
      ExactOrApproximateTimeInput that = (ExactOrApproximateTimeInput) o;
      return ((this.approximateTime == null) ? (that.approximateTime == null) : this.approximateTime.equals(that.approximateTime))
       &&((this.exactTime == null) ? (that.exactTime == null) : this.exactTime.equals(that.exactTime));
    }
    return false;
  }

  @Override
  public int hashCode() {
    if (!$hashCodeMemoized) {
      int __h = 1;
      __h *= 1000003;
      __h ^= (approximateTime == null) ? 0 : approximateTime.hashCode();
      __h *= 1000003;
      __h ^= (exactTime == null) ? 0 : exactTime.hashCode();
      $hashCode = __h;
      $hashCodeMemoized = true;
    }
    return $hashCode;
  }

  @Override
  public String toString() {
    if ($toString == null) {
      $toString = "ExactOrApproximateTimeInput{"
        + "approximateTime=" + approximateTime + ", "
        + "exactTime=" + exactTime
        + "}";
    }
    return $toString;
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private Optional<Optional<String>> approximateTime = Optional.empty();

    private Optional<Optional<LocalTime>> exactTime = Optional.empty();

    Builder() {
    }

    public Builder approximateTime(@NotNull Optional<String> approximateTime) {
      this.approximateTime = Optional.of(approximateTime);
      return this;
    }

    public Builder exactTime(@NotNull Optional<LocalTime> exactTime) {
      this.exactTime = Optional.of(exactTime);
      return this;
    }

    public ExactOrApproximateTimeInput build() {
      return new ExactOrApproximateTimeInput(approximateTime, exactTime);
    }
  }
}
