//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.adapter;

import com.apollographql.apollo.api.Adapter;
import com.apollographql.apollo.api.Adapters;
import com.apollographql.apollo.api.Assertions;
import com.apollographql.apollo.api.CustomScalarAdapters;
import com.apollographql.apollo.api.ListAdapter;
import com.apollographql.apollo.api.ObjectAdapter;
import com.apollographql.apollo.api.json.JsonReader;
import com.apollographql.apollo.api.json.JsonWriter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.PropertyRegistrationQuery;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.IdSource;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.RegulatoryCategory;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.RegulatoryStatus;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.IdSource_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.OptionalAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.OptionalAdapters;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.RegulatoryCategory_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.RegulatoryStatus_ResponseAdapter;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

public class PropertyRegistrationQuery_ResponseAdapter {
  public enum Data implements Adapter<PropertyRegistrationQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("property");

    @Override
    public PropertyRegistrationQuery.Data fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Optional<PropertyRegistrationQuery.Property> _property = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _property = new OptionalAdapter<>(new ObjectAdapter<PropertyRegistrationQuery.Property>(Property.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new PropertyRegistrationQuery.Data(
        _property
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyRegistrationQuery.Data value) throws IOException {
      writer.name("property");
      new OptionalAdapter<>(new ObjectAdapter<PropertyRegistrationQuery.Property>(Property.INSTANCE, false)).toJson(writer, customScalarAdapters, value.property);
    }
  }

  public enum Property implements Adapter<PropertyRegistrationQuery.Property> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id", "name", "units");

    @Override
    public PropertyRegistrationQuery.Property fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _id = null;
      String _name = null;
      Optional<List<Optional<PropertyRegistrationQuery.Unit>>> _units = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _id = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _name = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _units = new OptionalAdapter<>(new ListAdapter<>(new OptionalAdapter<>(new ObjectAdapter<PropertyRegistrationQuery.Unit>(Unit.INSTANCE, false)))).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_id, "id");
      Assertions.checkFieldNotMissing(_name, "name");

      return new PropertyRegistrationQuery.Property(
        _id,
        _name,
        _units
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyRegistrationQuery.Property value) throws IOException {
      writer.name("id");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.id);

      writer.name("name");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.name);

      writer.name("units");
      new OptionalAdapter<>(new ListAdapter<>(new OptionalAdapter<>(new ObjectAdapter<PropertyRegistrationQuery.Unit>(Unit.INSTANCE, false)))).toJson(writer, customScalarAdapters, value.units);
    }
  }

  public enum Unit implements Adapter<PropertyRegistrationQuery.Unit> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("ids", "registration");

    @Override
    public PropertyRegistrationQuery.Unit fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Optional<List<Optional<PropertyRegistrationQuery.Id>>> _ids = null;
      Optional<PropertyRegistrationQuery.Registration> _registration = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _ids = new OptionalAdapter<>(new ListAdapter<>(new OptionalAdapter<>(new ObjectAdapter<PropertyRegistrationQuery.Id>(Id.INSTANCE, false)))).fromJson(reader, customScalarAdapters); break;
          case 1: _registration = new OptionalAdapter<>(new ObjectAdapter<PropertyRegistrationQuery.Registration>(Registration.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new PropertyRegistrationQuery.Unit(
        _ids,
        _registration
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyRegistrationQuery.Unit value) throws IOException {
      writer.name("ids");
      new OptionalAdapter<>(new ListAdapter<>(new OptionalAdapter<>(new ObjectAdapter<PropertyRegistrationQuery.Id>(Id.INSTANCE, false)))).toJson(writer, customScalarAdapters, value.ids);

      writer.name("registration");
      new OptionalAdapter<>(new ObjectAdapter<PropertyRegistrationQuery.Registration>(Registration.INSTANCE, false)).toJson(writer, customScalarAdapters, value.registration);
    }
  }

  public enum Id implements Adapter<PropertyRegistrationQuery.Id> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id", "idSource");

    @Override
    public PropertyRegistrationQuery.Id fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Optional<String> _id = null;
      IdSource _idSource = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _id = OptionalAdapters.OptionalStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _idSource = IdSource_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_idSource, "idSource");

      return new PropertyRegistrationQuery.Id(
        _id,
        _idSource
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyRegistrationQuery.Id value) throws IOException {
      writer.name("id");
      OptionalAdapters.OptionalStringAdapter.toJson(writer, customScalarAdapters, value.id);

      writer.name("idSource");
      IdSource_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.idSource);
    }
  }

  public enum Registration implements Adapter<PropertyRegistrationQuery.Registration> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("district", "detail");

    @Override
    public PropertyRegistrationQuery.Registration fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Optional<String> _district = null;
      PropertyRegistrationQuery.Detail _detail = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _district = OptionalAdapters.OptionalStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _detail = new ObjectAdapter<PropertyRegistrationQuery.Detail>(Detail.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_detail, "detail");

      return new PropertyRegistrationQuery.Registration(
        _district,
        _detail
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyRegistrationQuery.Registration value) throws IOException {
      writer.name("district");
      OptionalAdapters.OptionalStringAdapter.toJson(writer, customScalarAdapters, value.district);

      writer.name("detail");
      new ObjectAdapter<PropertyRegistrationQuery.Detail>(Detail.INSTANCE, false).toJson(writer, customScalarAdapters, value.detail);
    }
  }

  public enum Detail implements Adapter<PropertyRegistrationQuery.Detail> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("compliant", "regulatoryCategory", "numberOfPhysicalRooms", "registrationRecords");

    @Override
    public PropertyRegistrationQuery.Detail fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Optional<PropertyRegistrationQuery.Compliant> _compliant = null;
      RegulatoryCategory _regulatoryCategory = null;
      Optional<Integer> _numberOfPhysicalRooms = null;
      List<PropertyRegistrationQuery.RegistrationRecord> _registrationRecords = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _compliant = new OptionalAdapter<>(new ObjectAdapter<PropertyRegistrationQuery.Compliant>(Compliant.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 1: _regulatoryCategory = RegulatoryCategory_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          case 2: _numberOfPhysicalRooms = OptionalAdapters.OptionalIntAdapter.fromJson(reader, customScalarAdapters); break;
          case 3: _registrationRecords = new ListAdapter<>(new ObjectAdapter<PropertyRegistrationQuery.RegistrationRecord>(RegistrationRecord.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_regulatoryCategory, "regulatoryCategory");
      Assertions.checkFieldNotMissing(_registrationRecords, "registrationRecords");

      return new PropertyRegistrationQuery.Detail(
        _compliant,
        _regulatoryCategory,
        _numberOfPhysicalRooms,
        _registrationRecords
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyRegistrationQuery.Detail value) throws IOException {
      writer.name("compliant");
      new OptionalAdapter<>(new ObjectAdapter<PropertyRegistrationQuery.Compliant>(Compliant.INSTANCE, false)).toJson(writer, customScalarAdapters, value.compliant);

      writer.name("regulatoryCategory");
      RegulatoryCategory_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.regulatoryCategory);

      writer.name("numberOfPhysicalRooms");
      OptionalAdapters.OptionalIntAdapter.toJson(writer, customScalarAdapters, value.numberOfPhysicalRooms);

      writer.name("registrationRecords");
      new ListAdapter<>(new ObjectAdapter<PropertyRegistrationQuery.RegistrationRecord>(RegistrationRecord.INSTANCE, false)).toJson(writer, customScalarAdapters, value.registrationRecords);
    }
  }

  public enum Compliant implements Adapter<PropertyRegistrationQuery.Compliant> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("status", "reason");

    @Override
    public PropertyRegistrationQuery.Compliant fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      RegulatoryStatus _status = null;
      String _reason = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _status = RegulatoryStatus_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          case 1: _reason = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_status, "status");
      Assertions.checkFieldNotMissing(_reason, "reason");

      return new PropertyRegistrationQuery.Compliant(
        _status,
        _reason
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyRegistrationQuery.Compliant value) throws IOException {
      writer.name("status");
      RegulatoryStatus_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.status);

      writer.name("reason");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.reason);
    }
  }

  public enum RegistrationRecord implements Adapter<PropertyRegistrationQuery.RegistrationRecord> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("registrationNumber", "registrationNumberTypeLabel", "expiry");

    @Override
    public PropertyRegistrationQuery.RegistrationRecord fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _registrationNumber = null;
      Optional<String> _registrationNumberTypeLabel = null;
      Optional<String> _expiry = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _registrationNumber = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _registrationNumberTypeLabel = OptionalAdapters.OptionalStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _expiry = OptionalAdapters.OptionalStringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_registrationNumber, "registrationNumber");

      return new PropertyRegistrationQuery.RegistrationRecord(
        _registrationNumber,
        _registrationNumberTypeLabel,
        _expiry
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyRegistrationQuery.RegistrationRecord value) throws IOException {
      writer.name("registrationNumber");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.registrationNumber);

      writer.name("registrationNumberTypeLabel");
      OptionalAdapters.OptionalStringAdapter.toJson(writer, customScalarAdapters, value.registrationNumberTypeLabel);

      writer.name("expiry");
      OptionalAdapters.OptionalStringAdapter.toJson(writer, customScalarAdapters, value.expiry);
    }
  }
}
