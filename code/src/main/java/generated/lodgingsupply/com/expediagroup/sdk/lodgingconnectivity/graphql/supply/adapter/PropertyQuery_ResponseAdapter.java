//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.adapter;

import com.apollographql.apollo.api.Adapter;
import com.apollographql.apollo.api.Adapters;
import com.apollographql.apollo.api.Assertions;
import com.apollographql.apollo.api.CustomScalarAdapters;
import com.apollographql.apollo.api.ListAdapter;
import com.apollographql.apollo.api.NullableAdapter;
import com.apollographql.apollo.api.ObjectAdapter;
import com.apollographql.apollo.api.json.JsonReader;
import com.apollographql.apollo.api.json.JsonWriter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.PropertyQuery;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.ContactType;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.IdSource;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.PhoneNumberType;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.ContactType_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.IdSource_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.PhoneNumberType_ResponseAdapter;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class PropertyQuery_ResponseAdapter {
  public enum Data implements Adapter<PropertyQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("property");

    @Override
    public PropertyQuery.Data fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      PropertyQuery.Property _property = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _property = new NullableAdapter<>(new ObjectAdapter<PropertyQuery.Property>(Property.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new PropertyQuery.Data(
        _property
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyQuery.Data value) throws IOException {
      writer.name("property");
      new NullableAdapter<>(new ObjectAdapter<PropertyQuery.Property>(Property.INSTANCE, false)).toJson(writer, customScalarAdapters, value.property);
    }
  }

  public enum Property implements Adapter<PropertyQuery.Property> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id", "name", "names", "defaultLocale", "contacts", "ids", "type", "address", "location", "taxRecords");

    @Override
    public PropertyQuery.Property fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _id = null;
      String _name = null;
      List<PropertyQuery.Name> _names = null;
      Object _defaultLocale = null;
      List<PropertyQuery.Contact> _contacts = null;
      List<PropertyQuery.Id> _ids = null;
      PropertyQuery.Type _type = null;
      PropertyQuery.Address _address = null;
      PropertyQuery.Location _location = null;
      List<PropertyQuery.TaxRecord> _taxRecords = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _id = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _name = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _names = new NullableAdapter<>(new ListAdapter<>(new ObjectAdapter<PropertyQuery.Name>(Name.INSTANCE, false))).fromJson(reader, customScalarAdapters); break;
          case 3: _defaultLocale = Adapters.AnyAdapter.fromJson(reader, customScalarAdapters); break;
          case 4: _contacts = new NullableAdapter<>(new ListAdapter<>(new ObjectAdapter<PropertyQuery.Contact>(Contact.INSTANCE, false))).fromJson(reader, customScalarAdapters); break;
          case 5: _ids = new ListAdapter<>(new ObjectAdapter<PropertyQuery.Id>(Id.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 6: _type = new ObjectAdapter<PropertyQuery.Type>(Type.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 7: _address = new ObjectAdapter<PropertyQuery.Address>(Address.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 8: _location = new ObjectAdapter<PropertyQuery.Location>(Location.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 9: _taxRecords = new ListAdapter<>(new ObjectAdapter<PropertyQuery.TaxRecord>(TaxRecord.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_id, "id");
      Assertions.checkFieldNotMissing(_name, "name");
      Assertions.checkFieldNotMissing(_defaultLocale, "defaultLocale");
      Assertions.checkFieldNotMissing(_ids, "ids");
      Assertions.checkFieldNotMissing(_type, "type");
      Assertions.checkFieldNotMissing(_address, "address");
      Assertions.checkFieldNotMissing(_location, "location");
      Assertions.checkFieldNotMissing(_taxRecords, "taxRecords");

      return new PropertyQuery.Property(
        _id,
        _name,
        _names,
        _defaultLocale,
        _contacts,
        _ids,
        _type,
        _address,
        _location,
        _taxRecords
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyQuery.Property value) throws IOException {
      writer.name("id");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.id);

      writer.name("name");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.name);

      writer.name("names");
      new NullableAdapter<>(new ListAdapter<>(new ObjectAdapter<PropertyQuery.Name>(Name.INSTANCE, false))).toJson(writer, customScalarAdapters, value.names);

      writer.name("defaultLocale");
      Adapters.AnyAdapter.toJson(writer, customScalarAdapters, value.defaultLocale);

      writer.name("contacts");
      new NullableAdapter<>(new ListAdapter<>(new ObjectAdapter<PropertyQuery.Contact>(Contact.INSTANCE, false))).toJson(writer, customScalarAdapters, value.contacts);

      writer.name("ids");
      new ListAdapter<>(new ObjectAdapter<PropertyQuery.Id>(Id.INSTANCE, false)).toJson(writer, customScalarAdapters, value.ids);

      writer.name("type");
      new ObjectAdapter<PropertyQuery.Type>(Type.INSTANCE, false).toJson(writer, customScalarAdapters, value.type);

      writer.name("address");
      new ObjectAdapter<PropertyQuery.Address>(Address.INSTANCE, false).toJson(writer, customScalarAdapters, value.address);

      writer.name("location");
      new ObjectAdapter<PropertyQuery.Location>(Location.INSTANCE, false).toJson(writer, customScalarAdapters, value.location);

      writer.name("taxRecords");
      new ListAdapter<>(new ObjectAdapter<PropertyQuery.TaxRecord>(TaxRecord.INSTANCE, false)).toJson(writer, customScalarAdapters, value.taxRecords);
    }
  }

  public enum Name implements Adapter<PropertyQuery.Name> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("locale", "value");

    @Override
    public PropertyQuery.Name fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      Object _locale = null;
      String _value = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _locale = Adapters.AnyAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _value = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_locale, "locale");
      Assertions.checkFieldNotMissing(_value, "value");

      return new PropertyQuery.Name(
        _locale,
        _value
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyQuery.Name value) throws IOException {
      writer.name("locale");
      Adapters.AnyAdapter.toJson(writer, customScalarAdapters, value.locale);

      writer.name("value");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.value);
    }
  }

  public enum Contact implements Adapter<PropertyQuery.Contact> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("emailAddresses", "name", "type", "phoneNumbers");

    @Override
    public PropertyQuery.Contact fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      List<String> _emailAddresses = null;
      String _name = null;
      ContactType _type = null;
      List<PropertyQuery.PhoneNumber> _phoneNumbers = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _emailAddresses = new NullableAdapter<>(new ListAdapter<>(Adapters.StringAdapter)).fromJson(reader, customScalarAdapters); break;
          case 1: _name = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _type = ContactType_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          case 3: _phoneNumbers = new NullableAdapter<>(new ListAdapter<>(new ObjectAdapter<PropertyQuery.PhoneNumber>(PhoneNumber.INSTANCE, false))).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_type, "type");

      return new PropertyQuery.Contact(
        _emailAddresses,
        _name,
        _type,
        _phoneNumbers
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyQuery.Contact value) throws IOException {
      writer.name("emailAddresses");
      new NullableAdapter<>(new ListAdapter<>(Adapters.StringAdapter)).toJson(writer, customScalarAdapters, value.emailAddresses);

      writer.name("name");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.name);

      writer.name("type");
      ContactType_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.type);

      writer.name("phoneNumbers");
      new NullableAdapter<>(new ListAdapter<>(new ObjectAdapter<PropertyQuery.PhoneNumber>(PhoneNumber.INSTANCE, false))).toJson(writer, customScalarAdapters, value.phoneNumbers);
    }
  }

  public enum PhoneNumber implements Adapter<PropertyQuery.PhoneNumber> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("areaCode", "countryCode", "extension", "number", "phoneNumberType");

    @Override
    public PropertyQuery.PhoneNumber fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _areaCode = null;
      String _countryCode = null;
      String _extension = null;
      String _number = null;
      PhoneNumberType _phoneNumberType = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _areaCode = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _countryCode = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _extension = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 3: _number = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 4: _phoneNumberType = PhoneNumberType_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_number, "number");
      Assertions.checkFieldNotMissing(_phoneNumberType, "phoneNumberType");

      return new PropertyQuery.PhoneNumber(
        _areaCode,
        _countryCode,
        _extension,
        _number,
        _phoneNumberType
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyQuery.PhoneNumber value) throws IOException {
      writer.name("areaCode");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.areaCode);

      writer.name("countryCode");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.countryCode);

      writer.name("extension");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.extension);

      writer.name("number");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.number);

      writer.name("phoneNumberType");
      PhoneNumberType_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.phoneNumberType);
    }
  }

  public enum Id implements Adapter<PropertyQuery.Id> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id", "idSource");

    @Override
    public PropertyQuery.Id fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      String _id = null;
      IdSource _idSource = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _id = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _idSource = IdSource_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_idSource, "idSource");

      return new PropertyQuery.Id(
        _id,
        _idSource
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyQuery.Id value) throws IOException {
      writer.name("id");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.id);

      writer.name("idSource");
      IdSource_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.idSource);
    }
  }

  public enum Type implements Adapter<PropertyQuery.Type> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("code");

    @Override
    public PropertyQuery.Type fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      String _code = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _code = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_code, "code");

      return new PropertyQuery.Type(
        _code
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyQuery.Type value) throws IOException {
      writer.name("code");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.code);
    }
  }

  public enum Address implements Adapter<PropertyQuery.Address> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("addressLines", "administrativeArea", "countryCode", "locality", "postalCode");

    @Override
    public PropertyQuery.Address fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      List<String> _addressLines = null;
      String _administrativeArea = null;
      Object _countryCode = null;
      String _locality = null;
      String _postalCode = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _addressLines = new ListAdapter<>(Adapters.StringAdapter).fromJson(reader, customScalarAdapters); break;
          case 1: _administrativeArea = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _countryCode = Adapters.AnyAdapter.fromJson(reader, customScalarAdapters); break;
          case 3: _locality = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 4: _postalCode = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_addressLines, "addressLines");
      Assertions.checkFieldNotMissing(_countryCode, "countryCode");
      Assertions.checkFieldNotMissing(_locality, "locality");
      Assertions.checkFieldNotMissing(_postalCode, "postalCode");

      return new PropertyQuery.Address(
        _addressLines,
        _administrativeArea,
        _countryCode,
        _locality,
        _postalCode
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyQuery.Address value) throws IOException {
      writer.name("addressLines");
      new ListAdapter<>(Adapters.StringAdapter).toJson(writer, customScalarAdapters, value.addressLines);

      writer.name("administrativeArea");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.administrativeArea);

      writer.name("countryCode");
      Adapters.AnyAdapter.toJson(writer, customScalarAdapters, value.countryCode);

      writer.name("locality");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.locality);

      writer.name("postalCode");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.postalCode);
    }
  }

  public enum Location implements Adapter<PropertyQuery.Location> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("hideExactLocation", "coordinates");

    @Override
    public PropertyQuery.Location fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Boolean _hideExactLocation = null;
      PropertyQuery.Coordinates _coordinates = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _hideExactLocation = Adapters.BooleanAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _coordinates = new NullableAdapter<>(new ObjectAdapter<PropertyQuery.Coordinates>(Coordinates.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_hideExactLocation, "hideExactLocation");

      return new PropertyQuery.Location(
        _hideExactLocation,
        _coordinates
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyQuery.Location value) throws IOException {
      writer.name("hideExactLocation");
      Adapters.BooleanAdapter.toJson(writer, customScalarAdapters, value.hideExactLocation);

      writer.name("coordinates");
      new NullableAdapter<>(new ObjectAdapter<PropertyQuery.Coordinates>(Coordinates.INSTANCE, false)).toJson(writer, customScalarAdapters, value.coordinates);
    }
  }

  public enum Coordinates implements Adapter<PropertyQuery.Coordinates> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("latitude", "longitude");

    @Override
    public PropertyQuery.Coordinates fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Double _latitude = null;
      Double _longitude = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _latitude = Adapters.DoubleAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _longitude = Adapters.DoubleAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_latitude, "latitude");
      Assertions.checkFieldNotMissing(_longitude, "longitude");

      return new PropertyQuery.Coordinates(
        _latitude,
        _longitude
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyQuery.Coordinates value) throws IOException {
      writer.name("latitude");
      Adapters.DoubleAdapter.toJson(writer, customScalarAdapters, value.latitude);

      writer.name("longitude");
      Adapters.DoubleAdapter.toJson(writer, customScalarAdapters, value.longitude);
    }
  }

  public enum TaxRecord implements Adapter<PropertyQuery.TaxRecord> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("attributes", "categoryCode", "validationResult");

    @Override
    public PropertyQuery.TaxRecord fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      List<PropertyQuery.Attribute> _attributes = null;
      String _categoryCode = null;
      PropertyQuery.ValidationResult1 _validationResult = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _attributes = new ListAdapter<>(new ObjectAdapter<PropertyQuery.Attribute>(Attribute.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 1: _categoryCode = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _validationResult = new ObjectAdapter<PropertyQuery.ValidationResult1>(ValidationResult1.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_attributes, "attributes");
      Assertions.checkFieldNotMissing(_categoryCode, "categoryCode");
      Assertions.checkFieldNotMissing(_validationResult, "validationResult");

      return new PropertyQuery.TaxRecord(
        _attributes,
        _categoryCode,
        _validationResult
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyQuery.TaxRecord value) throws IOException {
      writer.name("attributes");
      new ListAdapter<>(new ObjectAdapter<PropertyQuery.Attribute>(Attribute.INSTANCE, false)).toJson(writer, customScalarAdapters, value.attributes);

      writer.name("categoryCode");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.categoryCode);

      writer.name("validationResult");
      new ObjectAdapter<PropertyQuery.ValidationResult1>(ValidationResult1.INSTANCE, false).toJson(writer, customScalarAdapters, value.validationResult);
    }
  }

  public enum Attribute implements Adapter<PropertyQuery.Attribute> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("name", "validationResult", "value");

    @Override
    public PropertyQuery.Attribute fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _name = null;
      PropertyQuery.ValidationResult _validationResult = null;
      PropertyQuery.Value _value = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _name = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _validationResult = new ObjectAdapter<PropertyQuery.ValidationResult>(ValidationResult.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 2: _value = new ObjectAdapter<PropertyQuery.Value>(Value.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_name, "name");
      Assertions.checkFieldNotMissing(_validationResult, "validationResult");
      Assertions.checkFieldNotMissing(_value, "value");

      return new PropertyQuery.Attribute(
        _name,
        _validationResult,
        _value
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyQuery.Attribute value) throws IOException {
      writer.name("name");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.name);

      writer.name("validationResult");
      new ObjectAdapter<PropertyQuery.ValidationResult>(ValidationResult.INSTANCE, false).toJson(writer, customScalarAdapters, value.validationResult);

      writer.name("value");
      new ObjectAdapter<PropertyQuery.Value>(Value.INSTANCE, false).toJson(writer, customScalarAdapters, value.value);
    }
  }

  public enum ValidationResult implements Adapter<PropertyQuery.ValidationResult> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("messages", "valid");

    @Override
    public PropertyQuery.ValidationResult fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      List<String> _messages = null;
      Boolean _valid = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _messages = new ListAdapter<>(Adapters.StringAdapter).fromJson(reader, customScalarAdapters); break;
          case 1: _valid = Adapters.BooleanAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_messages, "messages");
      Assertions.checkFieldNotMissing(_valid, "valid");

      return new PropertyQuery.ValidationResult(
        _messages,
        _valid
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyQuery.ValidationResult value) throws IOException {
      writer.name("messages");
      new ListAdapter<>(Adapters.StringAdapter).toJson(writer, customScalarAdapters, value.messages);

      writer.name("valid");
      Adapters.BooleanAdapter.toJson(writer, customScalarAdapters, value.valid);
    }
  }

  public enum Value implements Adapter<PropertyQuery.Value> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("type", "value");

    @Override
    public PropertyQuery.Value fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _type = null;
      String _value = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _type = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _value = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_type, "type");

      return new PropertyQuery.Value(
        _type,
        _value
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyQuery.Value value) throws IOException {
      writer.name("type");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.type);

      writer.name("value");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.value);
    }
  }

  public enum ValidationResult1 implements Adapter<PropertyQuery.ValidationResult1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("complianceStatusCode", "messages");

    @Override
    public PropertyQuery.ValidationResult1 fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _complianceStatusCode = null;
      List<String> _messages = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _complianceStatusCode = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _messages = new ListAdapter<>(Adapters.StringAdapter).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_complianceStatusCode, "complianceStatusCode");
      Assertions.checkFieldNotMissing(_messages, "messages");

      return new PropertyQuery.ValidationResult1(
        _complianceStatusCode,
        _messages
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyQuery.ValidationResult1 value) throws IOException {
      writer.name("complianceStatusCode");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.complianceStatusCode);

      writer.name("messages");
      new ListAdapter<>(Adapters.StringAdapter).toJson(writer, customScalarAdapters, value.messages);
    }
  }
}
