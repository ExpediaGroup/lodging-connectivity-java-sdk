//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.adapter;

import com.apollographql.apollo.api.Adapter;
import com.apollographql.apollo.api.Adapters;
import com.apollographql.apollo.api.Assertions;
import com.apollographql.apollo.api.BPossibleTypes;
import com.apollographql.apollo.api.BTerm;
import com.apollographql.apollo.api.BooleanExpression;
import com.apollographql.apollo.api.BooleanExpressions;
import com.apollographql.apollo.api.CustomScalarAdapters;
import com.apollographql.apollo.api.ListAdapter;
import com.apollographql.apollo.api.ObjectAdapter;
import com.apollographql.apollo.api.json.JsonReader;
import com.apollographql.apollo.api.json.JsonWriter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.PropertyReservationsQuery;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.BusinessModel;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.CancellationPenaltyRuleType;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.CancellationWindowTemporalUnit;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.CurrencyCode;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.Decimal;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.DistributionChannel;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.EmailAddress;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.IdSource;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.InstallmentPaymentStatus;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.InventoryType;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.MerchantOfRecord;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.PaymentInstrumentType;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.RateTimeUnit;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.RateType;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.RemittanceType;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.ReservationPaymentStatus;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.ReservationStatus;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.SupplierFeeType;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.SupplierOperatingModel;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.TravelPurpose;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.VrboCancellationReason;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.BusinessModel_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.CancellationPenaltyRuleType_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.CancellationWindowTemporalUnit_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.DistributionChannel_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.IdSource_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.InstallmentPaymentStatus_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.InventoryType_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.MerchantOfRecord_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.OptionalAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.OptionalAdapters;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.PaymentInstrumentType_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.RateTimeUnit_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.RateType_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.RemittanceType_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.ReservationPaymentStatus_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.ReservationStatus_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.SupplierFeeType_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.SupplierOperatingModel_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.TravelPurpose_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.VrboCancellationReason_ResponseAdapter;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

public class PropertyReservationsQuery_ResponseAdapter {
  public enum Data implements Adapter<PropertyReservationsQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("property");

    @Override
    public PropertyReservationsQuery.Data fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Optional<PropertyReservationsQuery.Property> _property = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _property = new OptionalAdapter<>(new ObjectAdapter<PropertyReservationsQuery.Property>(Property.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new PropertyReservationsQuery.Data(
        _property
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.Data value) throws IOException {
      writer.name("property");
      new OptionalAdapter<>(new ObjectAdapter<PropertyReservationsQuery.Property>(Property.INSTANCE, false)).toJson(writer, customScalarAdapters, value.property);
    }
  }

  public enum Property implements Adapter<PropertyReservationsQuery.Property> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("reservations");

    @Override
    public PropertyReservationsQuery.Property fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      PropertyReservationsQuery.Reservations _reservations = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _reservations = new ObjectAdapter<PropertyReservationsQuery.Reservations>(Reservations.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_reservations, "reservations");

      return new PropertyReservationsQuery.Property(
        _reservations
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.Property value) throws IOException {
      writer.name("reservations");
      new ObjectAdapter<PropertyReservationsQuery.Reservations>(Reservations.INSTANCE, false).toJson(writer, customScalarAdapters, value.reservations);
    }
  }

  public enum Reservations implements Adapter<PropertyReservationsQuery.Reservations> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("totalCount", "pageInfo", "edges");

    @Override
    public PropertyReservationsQuery.Reservations fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Optional<Integer> _totalCount = null;
      Optional<PropertyReservationsQuery.PageInfo> _pageInfo = null;
      List<Optional<PropertyReservationsQuery.Edge>> _edges = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _totalCount = OptionalAdapters.OptionalIntAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _pageInfo = new OptionalAdapter<>(new ObjectAdapter<PropertyReservationsQuery.PageInfo>(PageInfo.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 2: _edges = new ListAdapter<>(new OptionalAdapter<>(new ObjectAdapter<PropertyReservationsQuery.Edge>(Edge.INSTANCE, false))).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_edges, "edges");

      return new PropertyReservationsQuery.Reservations(
        _totalCount,
        _pageInfo,
        _edges
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.Reservations value) throws IOException {
      writer.name("totalCount");
      OptionalAdapters.OptionalIntAdapter.toJson(writer, customScalarAdapters, value.totalCount);

      writer.name("pageInfo");
      new OptionalAdapter<>(new ObjectAdapter<PropertyReservationsQuery.PageInfo>(PageInfo.INSTANCE, false)).toJson(writer, customScalarAdapters, value.pageInfo);

      writer.name("edges");
      new ListAdapter<>(new OptionalAdapter<>(new ObjectAdapter<PropertyReservationsQuery.Edge>(Edge.INSTANCE, false))).toJson(writer, customScalarAdapters, value.edges);
    }
  }

  public enum PageInfo implements Adapter<PropertyReservationsQuery.PageInfo> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("endCursor", "hasNextPage");

    @Override
    public PropertyReservationsQuery.PageInfo fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Optional<String> _endCursor = null;
      Boolean _hasNextPage = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _endCursor = OptionalAdapters.OptionalStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _hasNextPage = Adapters.BooleanAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_hasNextPage, "hasNextPage");

      return new PropertyReservationsQuery.PageInfo(
        _endCursor,
        _hasNextPage
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.PageInfo value) throws IOException {
      writer.name("endCursor");
      OptionalAdapters.OptionalStringAdapter.toJson(writer, customScalarAdapters, value.endCursor);

      writer.name("hasNextPage");
      Adapters.BooleanAdapter.toJson(writer, customScalarAdapters, value.hasNextPage);
    }
  }

  public enum Edge implements Adapter<PropertyReservationsQuery.Edge> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("cursor", "node");

    @Override
    public PropertyReservationsQuery.Edge fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _cursor = null;
      PropertyReservationsQuery.Node _node = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _cursor = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _node = new ObjectAdapter<PropertyReservationsQuery.Node>(Node.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_cursor, "cursor");
      Assertions.checkFieldNotMissing(_node, "node");

      return new PropertyReservationsQuery.Edge(
        _cursor,
        _node
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.Edge value) throws IOException {
      writer.name("cursor");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.cursor);

      writer.name("node");
      new ObjectAdapter<PropertyReservationsQuery.Node>(Node.INSTANCE, false).toJson(writer, customScalarAdapters, value.node);
    }
  }

  public enum Node implements Adapter<PropertyReservationsQuery.Node> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id", "alternativeIds", "accessibilityText", "adultCount", "amounts", "audit", "bedTypes", "businessModel", "cancellation", "cancellationPolicy", "checkInDate", "checkOutDate", "childAges", "childCount", "creationDateTime", "distribution", "guests", "inventoryType", "isReconciled", "lastUpdatedDateTime", "merchantOfRecord", "messageThreadId", "multiRoomText", "payment", "paymentInstructions", "petCount", "policies", "primaryGuest", "rateIds", "reconciliationEligibility", "reconciliationType", "remittanceType", "reservationIds", "smokingType", "source", "specialRequest", "status", "statuses", "stayDates", "subStatus", "supplierAmount", "supplierOperatingModel", "tidsCode", "totalGuestCount", "unitIds", "valueAddedPromotions", "vrboAmounts");

    @Override
    public PropertyReservationsQuery.Node fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _id = null;
      PropertyReservationsQuery.AlternativeIds _alternativeIds = null;
      Optional<List<String>> _accessibilityText = null;
      Integer _adultCount = null;
      Optional<PropertyReservationsQuery.Amounts> _amounts = null;
      PropertyReservationsQuery.Audit _audit = null;
      Optional<String> _bedTypes = null;
      BusinessModel _businessModel = null;
      Optional<PropertyReservationsQuery.Cancellation> _cancellation = null;
      Optional<PropertyReservationsQuery.CancellationPolicy> _cancellationPolicy = null;
      LocalDate _checkInDate = null;
      LocalDate _checkOutDate = null;
      Optional<List<Optional<Integer>>> _childAges = null;
      Integer _childCount = null;
      String _creationDateTime = null;
      PropertyReservationsQuery.Distribution _distribution = null;
      PropertyReservationsQuery.Guests _guests = null;
      Optional<InventoryType> _inventoryType = null;
      Optional<Boolean> _isReconciled = null;
      String _lastUpdatedDateTime = null;
      MerchantOfRecord _merchantOfRecord = null;
      Optional<String> _messageThreadId = null;
      Optional<String> _multiRoomText = null;
      PropertyReservationsQuery.Payment _payment = null;
      String _paymentInstructions = null;
      Optional<Integer> _petCount = null;
      PropertyReservationsQuery.Policies _policies = null;
      PropertyReservationsQuery.PrimaryGuest1 _primaryGuest = null;
      List<PropertyReservationsQuery.RateId> _rateIds = null;
      Optional<PropertyReservationsQuery.ReconciliationEligibility> _reconciliationEligibility = null;
      Optional<String> _reconciliationType = null;
      Optional<RemittanceType> _remittanceType = null;
      List<PropertyReservationsQuery.ReservationId> _reservationIds = null;
      String _smokingType = null;
      String _source = null;
      Optional<String> _specialRequest = null;
      ReservationStatus _status = null;
      PropertyReservationsQuery.Statuses _statuses = null;
      PropertyReservationsQuery.StayDates _stayDates = null;
      Optional<String> _subStatus = null;
      Optional<PropertyReservationsQuery.SupplierAmount> _supplierAmount = null;
      Optional<SupplierOperatingModel> _supplierOperatingModel = null;
      Optional<Integer> _tidsCode = null;
      Integer _totalGuestCount = null;
      List<PropertyReservationsQuery.UnitId> _unitIds = null;
      List<PropertyReservationsQuery.ValueAddedPromotion> _valueAddedPromotions = null;
      Optional<PropertyReservationsQuery.VrboAmounts> _vrboAmounts = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _id = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _alternativeIds = new ObjectAdapter<PropertyReservationsQuery.AlternativeIds>(AlternativeIds.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 2: _accessibilityText = new OptionalAdapter<>(new ListAdapter<>(Adapters.StringAdapter)).fromJson(reader, customScalarAdapters); break;
          case 3: _adultCount = Adapters.IntAdapter.fromJson(reader, customScalarAdapters); break;
          case 4: _amounts = new OptionalAdapter<>(new ObjectAdapter<PropertyReservationsQuery.Amounts>(Amounts.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 5: _audit = new ObjectAdapter<PropertyReservationsQuery.Audit>(Audit.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 6: _bedTypes = OptionalAdapters.OptionalStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 7: _businessModel = BusinessModel_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          case 8: _cancellation = new OptionalAdapter<>(new ObjectAdapter<PropertyReservationsQuery.Cancellation>(Cancellation.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 9: _cancellationPolicy = new OptionalAdapter<>(new ObjectAdapter<PropertyReservationsQuery.CancellationPolicy>(CancellationPolicy.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 10: _checkInDate = com.apollographql.adapter.core.JavaLocalDateAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          case 11: _checkOutDate = com.apollographql.adapter.core.JavaLocalDateAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          case 12: _childAges = new OptionalAdapter<>(new ListAdapter<>(OptionalAdapters.OptionalIntAdapter)).fromJson(reader, customScalarAdapters); break;
          case 13: _childCount = Adapters.IntAdapter.fromJson(reader, customScalarAdapters); break;
          case 14: _creationDateTime = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 15: _distribution = new ObjectAdapter<PropertyReservationsQuery.Distribution>(Distribution.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 16: _guests = new ObjectAdapter<PropertyReservationsQuery.Guests>(Guests.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 17: _inventoryType = new OptionalAdapter<>(InventoryType_ResponseAdapter.INSTANCE).fromJson(reader, customScalarAdapters); break;
          case 18: _isReconciled = OptionalAdapters.OptionalBooleanAdapter.fromJson(reader, customScalarAdapters); break;
          case 19: _lastUpdatedDateTime = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 20: _merchantOfRecord = MerchantOfRecord_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          case 21: _messageThreadId = OptionalAdapters.OptionalStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 22: _multiRoomText = OptionalAdapters.OptionalStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 23: _payment = new ObjectAdapter<PropertyReservationsQuery.Payment>(Payment.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 24: _paymentInstructions = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 25: _petCount = OptionalAdapters.OptionalIntAdapter.fromJson(reader, customScalarAdapters); break;
          case 26: _policies = new ObjectAdapter<PropertyReservationsQuery.Policies>(Policies.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 27: _primaryGuest = new ObjectAdapter<PropertyReservationsQuery.PrimaryGuest1>(PrimaryGuest1.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 28: _rateIds = new ListAdapter<>(new ObjectAdapter<PropertyReservationsQuery.RateId>(RateId.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 29: _reconciliationEligibility = new OptionalAdapter<>(new ObjectAdapter<PropertyReservationsQuery.ReconciliationEligibility>(ReconciliationEligibility.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 30: _reconciliationType = OptionalAdapters.OptionalStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 31: _remittanceType = new OptionalAdapter<>(RemittanceType_ResponseAdapter.INSTANCE).fromJson(reader, customScalarAdapters); break;
          case 32: _reservationIds = new ListAdapter<>(new ObjectAdapter<PropertyReservationsQuery.ReservationId>(ReservationId.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 33: _smokingType = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 34: _source = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 35: _specialRequest = OptionalAdapters.OptionalStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 36: _status = ReservationStatus_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          case 37: _statuses = new ObjectAdapter<PropertyReservationsQuery.Statuses>(Statuses.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 38: _stayDates = new ObjectAdapter<PropertyReservationsQuery.StayDates>(StayDates.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 39: _subStatus = OptionalAdapters.OptionalStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 40: _supplierAmount = new OptionalAdapter<>(new ObjectAdapter<PropertyReservationsQuery.SupplierAmount>(SupplierAmount.INSTANCE, true)).fromJson(reader, customScalarAdapters); break;
          case 41: _supplierOperatingModel = new OptionalAdapter<>(SupplierOperatingModel_ResponseAdapter.INSTANCE).fromJson(reader, customScalarAdapters); break;
          case 42: _tidsCode = OptionalAdapters.OptionalIntAdapter.fromJson(reader, customScalarAdapters); break;
          case 43: _totalGuestCount = Adapters.IntAdapter.fromJson(reader, customScalarAdapters); break;
          case 44: _unitIds = new ListAdapter<>(new ObjectAdapter<PropertyReservationsQuery.UnitId>(UnitId.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 45: _valueAddedPromotions = new ListAdapter<>(new ObjectAdapter<PropertyReservationsQuery.ValueAddedPromotion>(ValueAddedPromotion.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 46: _vrboAmounts = new OptionalAdapter<>(new ObjectAdapter<PropertyReservationsQuery.VrboAmounts>(VrboAmounts.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_id, "id");
      Assertions.checkFieldNotMissing(_alternativeIds, "alternativeIds");
      Assertions.checkFieldNotMissing(_adultCount, "adultCount");
      Assertions.checkFieldNotMissing(_audit, "audit");
      Assertions.checkFieldNotMissing(_businessModel, "businessModel");
      Assertions.checkFieldNotMissing(_checkInDate, "checkInDate");
      Assertions.checkFieldNotMissing(_checkOutDate, "checkOutDate");
      Assertions.checkFieldNotMissing(_childCount, "childCount");
      Assertions.checkFieldNotMissing(_creationDateTime, "creationDateTime");
      Assertions.checkFieldNotMissing(_distribution, "distribution");
      Assertions.checkFieldNotMissing(_guests, "guests");
      Assertions.checkFieldNotMissing(_lastUpdatedDateTime, "lastUpdatedDateTime");
      Assertions.checkFieldNotMissing(_merchantOfRecord, "merchantOfRecord");
      Assertions.checkFieldNotMissing(_payment, "payment");
      Assertions.checkFieldNotMissing(_paymentInstructions, "paymentInstructions");
      Assertions.checkFieldNotMissing(_policies, "policies");
      Assertions.checkFieldNotMissing(_primaryGuest, "primaryGuest");
      Assertions.checkFieldNotMissing(_rateIds, "rateIds");
      Assertions.checkFieldNotMissing(_reservationIds, "reservationIds");
      Assertions.checkFieldNotMissing(_smokingType, "smokingType");
      Assertions.checkFieldNotMissing(_source, "source");
      Assertions.checkFieldNotMissing(_status, "status");
      Assertions.checkFieldNotMissing(_statuses, "statuses");
      Assertions.checkFieldNotMissing(_stayDates, "stayDates");
      Assertions.checkFieldNotMissing(_totalGuestCount, "totalGuestCount");
      Assertions.checkFieldNotMissing(_unitIds, "unitIds");
      Assertions.checkFieldNotMissing(_valueAddedPromotions, "valueAddedPromotions");

      return new PropertyReservationsQuery.Node(
        _id,
        _alternativeIds,
        _accessibilityText,
        _adultCount,
        _amounts,
        _audit,
        _bedTypes,
        _businessModel,
        _cancellation,
        _cancellationPolicy,
        _checkInDate,
        _checkOutDate,
        _childAges,
        _childCount,
        _creationDateTime,
        _distribution,
        _guests,
        _inventoryType,
        _isReconciled,
        _lastUpdatedDateTime,
        _merchantOfRecord,
        _messageThreadId,
        _multiRoomText,
        _payment,
        _paymentInstructions,
        _petCount,
        _policies,
        _primaryGuest,
        _rateIds,
        _reconciliationEligibility,
        _reconciliationType,
        _remittanceType,
        _reservationIds,
        _smokingType,
        _source,
        _specialRequest,
        _status,
        _statuses,
        _stayDates,
        _subStatus,
        _supplierAmount,
        _supplierOperatingModel,
        _tidsCode,
        _totalGuestCount,
        _unitIds,
        _valueAddedPromotions,
        _vrboAmounts
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.Node value) throws IOException {
      writer.name("id");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.id);

      writer.name("alternativeIds");
      new ObjectAdapter<PropertyReservationsQuery.AlternativeIds>(AlternativeIds.INSTANCE, false).toJson(writer, customScalarAdapters, value.alternativeIds);

      writer.name("accessibilityText");
      new OptionalAdapter<>(new ListAdapter<>(Adapters.StringAdapter)).toJson(writer, customScalarAdapters, value.accessibilityText);

      writer.name("adultCount");
      Adapters.IntAdapter.toJson(writer, customScalarAdapters, value.adultCount);

      writer.name("amounts");
      new OptionalAdapter<>(new ObjectAdapter<PropertyReservationsQuery.Amounts>(Amounts.INSTANCE, false)).toJson(writer, customScalarAdapters, value.amounts);

      writer.name("audit");
      new ObjectAdapter<PropertyReservationsQuery.Audit>(Audit.INSTANCE, false).toJson(writer, customScalarAdapters, value.audit);

      writer.name("bedTypes");
      OptionalAdapters.OptionalStringAdapter.toJson(writer, customScalarAdapters, value.bedTypes);

      writer.name("businessModel");
      BusinessModel_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.businessModel);

      writer.name("cancellation");
      new OptionalAdapter<>(new ObjectAdapter<PropertyReservationsQuery.Cancellation>(Cancellation.INSTANCE, false)).toJson(writer, customScalarAdapters, value.cancellation);

      writer.name("cancellationPolicy");
      new OptionalAdapter<>(new ObjectAdapter<PropertyReservationsQuery.CancellationPolicy>(CancellationPolicy.INSTANCE, false)).toJson(writer, customScalarAdapters, value.cancellationPolicy);

      writer.name("checkInDate");
      com.apollographql.adapter.core.JavaLocalDateAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.checkInDate);

      writer.name("checkOutDate");
      com.apollographql.adapter.core.JavaLocalDateAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.checkOutDate);

      writer.name("childAges");
      new OptionalAdapter<>(new ListAdapter<>(OptionalAdapters.OptionalIntAdapter)).toJson(writer, customScalarAdapters, value.childAges);

      writer.name("childCount");
      Adapters.IntAdapter.toJson(writer, customScalarAdapters, value.childCount);

      writer.name("creationDateTime");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.creationDateTime);

      writer.name("distribution");
      new ObjectAdapter<PropertyReservationsQuery.Distribution>(Distribution.INSTANCE, false).toJson(writer, customScalarAdapters, value.distribution);

      writer.name("guests");
      new ObjectAdapter<PropertyReservationsQuery.Guests>(Guests.INSTANCE, false).toJson(writer, customScalarAdapters, value.guests);

      writer.name("inventoryType");
      new OptionalAdapter<>(InventoryType_ResponseAdapter.INSTANCE).toJson(writer, customScalarAdapters, value.inventoryType);

      writer.name("isReconciled");
      OptionalAdapters.OptionalBooleanAdapter.toJson(writer, customScalarAdapters, value.isReconciled);

      writer.name("lastUpdatedDateTime");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.lastUpdatedDateTime);

      writer.name("merchantOfRecord");
      MerchantOfRecord_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.merchantOfRecord);

      writer.name("messageThreadId");
      OptionalAdapters.OptionalStringAdapter.toJson(writer, customScalarAdapters, value.messageThreadId);

      writer.name("multiRoomText");
      OptionalAdapters.OptionalStringAdapter.toJson(writer, customScalarAdapters, value.multiRoomText);

      writer.name("payment");
      new ObjectAdapter<PropertyReservationsQuery.Payment>(Payment.INSTANCE, false).toJson(writer, customScalarAdapters, value.payment);

      writer.name("paymentInstructions");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.paymentInstructions);

      writer.name("petCount");
      OptionalAdapters.OptionalIntAdapter.toJson(writer, customScalarAdapters, value.petCount);

      writer.name("policies");
      new ObjectAdapter<PropertyReservationsQuery.Policies>(Policies.INSTANCE, false).toJson(writer, customScalarAdapters, value.policies);

      writer.name("primaryGuest");
      new ObjectAdapter<PropertyReservationsQuery.PrimaryGuest1>(PrimaryGuest1.INSTANCE, false).toJson(writer, customScalarAdapters, value.primaryGuest);

      writer.name("rateIds");
      new ListAdapter<>(new ObjectAdapter<PropertyReservationsQuery.RateId>(RateId.INSTANCE, false)).toJson(writer, customScalarAdapters, value.rateIds);

      writer.name("reconciliationEligibility");
      new OptionalAdapter<>(new ObjectAdapter<PropertyReservationsQuery.ReconciliationEligibility>(ReconciliationEligibility.INSTANCE, false)).toJson(writer, customScalarAdapters, value.reconciliationEligibility);

      writer.name("reconciliationType");
      OptionalAdapters.OptionalStringAdapter.toJson(writer, customScalarAdapters, value.reconciliationType);

      writer.name("remittanceType");
      new OptionalAdapter<>(RemittanceType_ResponseAdapter.INSTANCE).toJson(writer, customScalarAdapters, value.remittanceType);

      writer.name("reservationIds");
      new ListAdapter<>(new ObjectAdapter<PropertyReservationsQuery.ReservationId>(ReservationId.INSTANCE, false)).toJson(writer, customScalarAdapters, value.reservationIds);

      writer.name("smokingType");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.smokingType);

      writer.name("source");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.source);

      writer.name("specialRequest");
      OptionalAdapters.OptionalStringAdapter.toJson(writer, customScalarAdapters, value.specialRequest);

      writer.name("status");
      ReservationStatus_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.status);

      writer.name("statuses");
      new ObjectAdapter<PropertyReservationsQuery.Statuses>(Statuses.INSTANCE, false).toJson(writer, customScalarAdapters, value.statuses);

      writer.name("stayDates");
      new ObjectAdapter<PropertyReservationsQuery.StayDates>(StayDates.INSTANCE, false).toJson(writer, customScalarAdapters, value.stayDates);

      writer.name("subStatus");
      OptionalAdapters.OptionalStringAdapter.toJson(writer, customScalarAdapters, value.subStatus);

      writer.name("supplierAmount");
      new OptionalAdapter<>(new ObjectAdapter<PropertyReservationsQuery.SupplierAmount>(SupplierAmount.INSTANCE, true)).toJson(writer, customScalarAdapters, value.supplierAmount);

      writer.name("supplierOperatingModel");
      new OptionalAdapter<>(SupplierOperatingModel_ResponseAdapter.INSTANCE).toJson(writer, customScalarAdapters, value.supplierOperatingModel);

      writer.name("tidsCode");
      OptionalAdapters.OptionalIntAdapter.toJson(writer, customScalarAdapters, value.tidsCode);

      writer.name("totalGuestCount");
      Adapters.IntAdapter.toJson(writer, customScalarAdapters, value.totalGuestCount);

      writer.name("unitIds");
      new ListAdapter<>(new ObjectAdapter<PropertyReservationsQuery.UnitId>(UnitId.INSTANCE, false)).toJson(writer, customScalarAdapters, value.unitIds);

      writer.name("valueAddedPromotions");
      new ListAdapter<>(new ObjectAdapter<PropertyReservationsQuery.ValueAddedPromotion>(ValueAddedPromotion.INSTANCE, false)).toJson(writer, customScalarAdapters, value.valueAddedPromotions);

      writer.name("vrboAmounts");
      new OptionalAdapter<>(new ObjectAdapter<PropertyReservationsQuery.VrboAmounts>(VrboAmounts.INSTANCE, false)).toJson(writer, customScalarAdapters, value.vrboAmounts);
    }
  }

  public enum AlternativeIds implements Adapter<PropertyReservationsQuery.AlternativeIds> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("supplierId");

    @Override
    public PropertyReservationsQuery.AlternativeIds fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _supplierId = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _supplierId = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_supplierId, "supplierId");

      return new PropertyReservationsQuery.AlternativeIds(
        _supplierId
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.AlternativeIds value) throws IOException {
      writer.name("supplierId");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.supplierId);
    }
  }

  public enum Amounts implements Adapter<PropertyReservationsQuery.Amounts> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("nightlyPayments", "summary");

    @Override
    public PropertyReservationsQuery.Amounts fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      PropertyReservationsQuery.NightlyPayments _nightlyPayments = null;
      List<PropertyReservationsQuery.Summary> _summary = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _nightlyPayments = new ObjectAdapter<PropertyReservationsQuery.NightlyPayments>(NightlyPayments.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 1: _summary = new ListAdapter<>(new ObjectAdapter<PropertyReservationsQuery.Summary>(Summary.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_nightlyPayments, "nightlyPayments");
      Assertions.checkFieldNotMissing(_summary, "summary");

      return new PropertyReservationsQuery.Amounts(
        _nightlyPayments,
        _summary
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.Amounts value) throws IOException {
      writer.name("nightlyPayments");
      new ObjectAdapter<PropertyReservationsQuery.NightlyPayments>(NightlyPayments.INSTANCE, false).toJson(writer, customScalarAdapters, value.nightlyPayments);

      writer.name("summary");
      new ListAdapter<>(new ObjectAdapter<PropertyReservationsQuery.Summary>(Summary.INSTANCE, false)).toJson(writer, customScalarAdapters, value.summary);
    }
  }

  public enum NightlyPayments implements Adapter<PropertyReservationsQuery.NightlyPayments> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("cancellationAmounts", "dailyAmounts", "perStayAmounts");

    @Override
    public PropertyReservationsQuery.NightlyPayments fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      List<PropertyReservationsQuery.CancellationAmount> _cancellationAmounts = null;
      List<PropertyReservationsQuery.DailyAmount> _dailyAmounts = null;
      List<PropertyReservationsQuery.PerStayAmount> _perStayAmounts = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _cancellationAmounts = new ListAdapter<>(new ObjectAdapter<PropertyReservationsQuery.CancellationAmount>(CancellationAmount.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 1: _dailyAmounts = new ListAdapter<>(new ObjectAdapter<PropertyReservationsQuery.DailyAmount>(DailyAmount.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 2: _perStayAmounts = new ListAdapter<>(new ObjectAdapter<PropertyReservationsQuery.PerStayAmount>(PerStayAmount.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_cancellationAmounts, "cancellationAmounts");
      Assertions.checkFieldNotMissing(_dailyAmounts, "dailyAmounts");
      Assertions.checkFieldNotMissing(_perStayAmounts, "perStayAmounts");

      return new PropertyReservationsQuery.NightlyPayments(
        _cancellationAmounts,
        _dailyAmounts,
        _perStayAmounts
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.NightlyPayments value) throws IOException {
      writer.name("cancellationAmounts");
      new ListAdapter<>(new ObjectAdapter<PropertyReservationsQuery.CancellationAmount>(CancellationAmount.INSTANCE, false)).toJson(writer, customScalarAdapters, value.cancellationAmounts);

      writer.name("dailyAmounts");
      new ListAdapter<>(new ObjectAdapter<PropertyReservationsQuery.DailyAmount>(DailyAmount.INSTANCE, false)).toJson(writer, customScalarAdapters, value.dailyAmounts);

      writer.name("perStayAmounts");
      new ListAdapter<>(new ObjectAdapter<PropertyReservationsQuery.PerStayAmount>(PerStayAmount.INSTANCE, false)).toJson(writer, customScalarAdapters, value.perStayAmounts);
    }
  }

  public enum CancellationAmount implements Adapter<PropertyReservationsQuery.CancellationAmount> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("amount", "description", "percent", "type");

    @Override
    public PropertyReservationsQuery.CancellationAmount fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      PropertyReservationsQuery.Amount _amount = null;
      Optional<String> _description = null;
      Optional<Double> _percent = null;
      String _type = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _amount = new ObjectAdapter<PropertyReservationsQuery.Amount>(Amount.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 1: _description = OptionalAdapters.OptionalStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _percent = OptionalAdapters.OptionalDoubleAdapter.fromJson(reader, customScalarAdapters); break;
          case 3: _type = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_amount, "amount");
      Assertions.checkFieldNotMissing(_type, "type");

      return new PropertyReservationsQuery.CancellationAmount(
        _amount,
        _description,
        _percent,
        _type
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.CancellationAmount value) throws IOException {
      writer.name("amount");
      new ObjectAdapter<PropertyReservationsQuery.Amount>(Amount.INSTANCE, false).toJson(writer, customScalarAdapters, value.amount);

      writer.name("description");
      OptionalAdapters.OptionalStringAdapter.toJson(writer, customScalarAdapters, value.description);

      writer.name("percent");
      OptionalAdapters.OptionalDoubleAdapter.toJson(writer, customScalarAdapters, value.percent);

      writer.name("type");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.type);
    }
  }

  public enum Amount implements Adapter<PropertyReservationsQuery.Amount> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("amount", "currencyCode");

    @Override
    public PropertyReservationsQuery.Amount fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _amount = null;
      String _currencyCode = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _amount = (customScalarAdapters.<String>responseAdapterFor(Decimal.type)).fromJson(reader, customScalarAdapters); break;
          case 1: _currencyCode = (customScalarAdapters.<String>responseAdapterFor(CurrencyCode.type)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_amount, "amount");
      Assertions.checkFieldNotMissing(_currencyCode, "currencyCode");

      return new PropertyReservationsQuery.Amount(
        _amount,
        _currencyCode
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.Amount value) throws IOException {
      writer.name("amount");
      (customScalarAdapters.<String>responseAdapterFor(Decimal.type)).toJson(writer, customScalarAdapters, value.amount);

      writer.name("currencyCode");
      (customScalarAdapters.<String>responseAdapterFor(CurrencyCode.type)).toJson(writer, customScalarAdapters, value.currencyCode);
    }
  }

  public enum DailyAmount implements Adapter<PropertyReservationsQuery.DailyAmount> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("amount", "date", "description", "percent", "type");

    @Override
    public PropertyReservationsQuery.DailyAmount fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      PropertyReservationsQuery.Amount1 _amount = null;
      LocalDate _date = null;
      Optional<String> _description = null;
      Optional<Double> _percent = null;
      String _type = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _amount = new ObjectAdapter<PropertyReservationsQuery.Amount1>(Amount1.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 1: _date = com.apollographql.adapter.core.JavaLocalDateAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          case 2: _description = OptionalAdapters.OptionalStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 3: _percent = OptionalAdapters.OptionalDoubleAdapter.fromJson(reader, customScalarAdapters); break;
          case 4: _type = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_amount, "amount");
      Assertions.checkFieldNotMissing(_date, "date");
      Assertions.checkFieldNotMissing(_type, "type");

      return new PropertyReservationsQuery.DailyAmount(
        _amount,
        _date,
        _description,
        _percent,
        _type
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.DailyAmount value) throws IOException {
      writer.name("amount");
      new ObjectAdapter<PropertyReservationsQuery.Amount1>(Amount1.INSTANCE, false).toJson(writer, customScalarAdapters, value.amount);

      writer.name("date");
      com.apollographql.adapter.core.JavaLocalDateAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.date);

      writer.name("description");
      OptionalAdapters.OptionalStringAdapter.toJson(writer, customScalarAdapters, value.description);

      writer.name("percent");
      OptionalAdapters.OptionalDoubleAdapter.toJson(writer, customScalarAdapters, value.percent);

      writer.name("type");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.type);
    }
  }

  public enum Amount1 implements Adapter<PropertyReservationsQuery.Amount1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("amount", "currencyCode");

    @Override
    public PropertyReservationsQuery.Amount1 fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _amount = null;
      String _currencyCode = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _amount = (customScalarAdapters.<String>responseAdapterFor(Decimal.type)).fromJson(reader, customScalarAdapters); break;
          case 1: _currencyCode = (customScalarAdapters.<String>responseAdapterFor(CurrencyCode.type)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_amount, "amount");
      Assertions.checkFieldNotMissing(_currencyCode, "currencyCode");

      return new PropertyReservationsQuery.Amount1(
        _amount,
        _currencyCode
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.Amount1 value) throws IOException {
      writer.name("amount");
      (customScalarAdapters.<String>responseAdapterFor(Decimal.type)).toJson(writer, customScalarAdapters, value.amount);

      writer.name("currencyCode");
      (customScalarAdapters.<String>responseAdapterFor(CurrencyCode.type)).toJson(writer, customScalarAdapters, value.currencyCode);
    }
  }

  public enum PerStayAmount implements Adapter<PropertyReservationsQuery.PerStayAmount> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("amount", "description", "percent", "type");

    @Override
    public PropertyReservationsQuery.PerStayAmount fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      PropertyReservationsQuery.Amount2 _amount = null;
      Optional<String> _description = null;
      Optional<Double> _percent = null;
      String _type = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _amount = new ObjectAdapter<PropertyReservationsQuery.Amount2>(Amount2.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 1: _description = OptionalAdapters.OptionalStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _percent = OptionalAdapters.OptionalDoubleAdapter.fromJson(reader, customScalarAdapters); break;
          case 3: _type = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_amount, "amount");
      Assertions.checkFieldNotMissing(_type, "type");

      return new PropertyReservationsQuery.PerStayAmount(
        _amount,
        _description,
        _percent,
        _type
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.PerStayAmount value) throws IOException {
      writer.name("amount");
      new ObjectAdapter<PropertyReservationsQuery.Amount2>(Amount2.INSTANCE, false).toJson(writer, customScalarAdapters, value.amount);

      writer.name("description");
      OptionalAdapters.OptionalStringAdapter.toJson(writer, customScalarAdapters, value.description);

      writer.name("percent");
      OptionalAdapters.OptionalDoubleAdapter.toJson(writer, customScalarAdapters, value.percent);

      writer.name("type");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.type);
    }
  }

  public enum Amount2 implements Adapter<PropertyReservationsQuery.Amount2> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("amount", "currencyCode");

    @Override
    public PropertyReservationsQuery.Amount2 fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _amount = null;
      String _currencyCode = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _amount = (customScalarAdapters.<String>responseAdapterFor(Decimal.type)).fromJson(reader, customScalarAdapters); break;
          case 1: _currencyCode = (customScalarAdapters.<String>responseAdapterFor(CurrencyCode.type)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_amount, "amount");
      Assertions.checkFieldNotMissing(_currencyCode, "currencyCode");

      return new PropertyReservationsQuery.Amount2(
        _amount,
        _currencyCode
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.Amount2 value) throws IOException {
      writer.name("amount");
      (customScalarAdapters.<String>responseAdapterFor(Decimal.type)).toJson(writer, customScalarAdapters, value.amount);

      writer.name("currencyCode");
      (customScalarAdapters.<String>responseAdapterFor(CurrencyCode.type)).toJson(writer, customScalarAdapters, value.currencyCode);
    }
  }

  public enum Summary implements Adapter<PropertyReservationsQuery.Summary> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("amount", "description", "percent", "type");

    @Override
    public PropertyReservationsQuery.Summary fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      PropertyReservationsQuery.Amount3 _amount = null;
      Optional<String> _description = null;
      Optional<Double> _percent = null;
      String _type = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _amount = new ObjectAdapter<PropertyReservationsQuery.Amount3>(Amount3.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 1: _description = OptionalAdapters.OptionalStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _percent = OptionalAdapters.OptionalDoubleAdapter.fromJson(reader, customScalarAdapters); break;
          case 3: _type = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_amount, "amount");
      Assertions.checkFieldNotMissing(_type, "type");

      return new PropertyReservationsQuery.Summary(
        _amount,
        _description,
        _percent,
        _type
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.Summary value) throws IOException {
      writer.name("amount");
      new ObjectAdapter<PropertyReservationsQuery.Amount3>(Amount3.INSTANCE, false).toJson(writer, customScalarAdapters, value.amount);

      writer.name("description");
      OptionalAdapters.OptionalStringAdapter.toJson(writer, customScalarAdapters, value.description);

      writer.name("percent");
      OptionalAdapters.OptionalDoubleAdapter.toJson(writer, customScalarAdapters, value.percent);

      writer.name("type");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.type);
    }
  }

  public enum Amount3 implements Adapter<PropertyReservationsQuery.Amount3> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("amount", "currencyCode");

    @Override
    public PropertyReservationsQuery.Amount3 fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _amount = null;
      String _currencyCode = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _amount = (customScalarAdapters.<String>responseAdapterFor(Decimal.type)).fromJson(reader, customScalarAdapters); break;
          case 1: _currencyCode = (customScalarAdapters.<String>responseAdapterFor(CurrencyCode.type)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_amount, "amount");
      Assertions.checkFieldNotMissing(_currencyCode, "currencyCode");

      return new PropertyReservationsQuery.Amount3(
        _amount,
        _currencyCode
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.Amount3 value) throws IOException {
      writer.name("amount");
      (customScalarAdapters.<String>responseAdapterFor(Decimal.type)).toJson(writer, customScalarAdapters, value.amount);

      writer.name("currencyCode");
      (customScalarAdapters.<String>responseAdapterFor(CurrencyCode.type)).toJson(writer, customScalarAdapters, value.currencyCode);
    }
  }

  public enum Audit implements Adapter<PropertyReservationsQuery.Audit> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("creationDateTimeUtc", "lastUpdateDateTimeUtc");

    @Override
    public PropertyReservationsQuery.Audit fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _creationDateTimeUtc = null;
      String _lastUpdateDateTimeUtc = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _creationDateTimeUtc = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _lastUpdateDateTimeUtc = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_creationDateTimeUtc, "creationDateTimeUtc");
      Assertions.checkFieldNotMissing(_lastUpdateDateTimeUtc, "lastUpdateDateTimeUtc");

      return new PropertyReservationsQuery.Audit(
        _creationDateTimeUtc,
        _lastUpdateDateTimeUtc
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.Audit value) throws IOException {
      writer.name("creationDateTimeUtc");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.creationDateTimeUtc);

      writer.name("lastUpdateDateTimeUtc");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.lastUpdateDateTimeUtc);
    }
  }

  public enum Cancellation implements Adapter<PropertyReservationsQuery.Cancellation> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("pendingCancellation", "vrboPrimaryReason");

    @Override
    public PropertyReservationsQuery.Cancellation fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Boolean _pendingCancellation = null;
      Optional<VrboCancellationReason> _vrboPrimaryReason = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _pendingCancellation = Adapters.BooleanAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _vrboPrimaryReason = new OptionalAdapter<>(VrboCancellationReason_ResponseAdapter.INSTANCE).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_pendingCancellation, "pendingCancellation");

      return new PropertyReservationsQuery.Cancellation(
        _pendingCancellation,
        _vrboPrimaryReason
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.Cancellation value) throws IOException {
      writer.name("pendingCancellation");
      Adapters.BooleanAdapter.toJson(writer, customScalarAdapters, value.pendingCancellation);

      writer.name("vrboPrimaryReason");
      new OptionalAdapter<>(VrboCancellationReason_ResponseAdapter.INSTANCE).toJson(writer, customScalarAdapters, value.vrboPrimaryReason);
    }
  }

  public enum CancellationPolicy implements Adapter<PropertyReservationsQuery.CancellationPolicy> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("effectivePolicy", "tiers");

    @Override
    public PropertyReservationsQuery.CancellationPolicy fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Optional<PropertyReservationsQuery.EffectivePolicy> _effectivePolicy = null;
      Optional<List<PropertyReservationsQuery.Tier>> _tiers = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _effectivePolicy = new OptionalAdapter<>(new ObjectAdapter<PropertyReservationsQuery.EffectivePolicy>(EffectivePolicy.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 1: _tiers = new OptionalAdapter<>(new ListAdapter<>(new ObjectAdapter<PropertyReservationsQuery.Tier>(Tier.INSTANCE, false))).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new PropertyReservationsQuery.CancellationPolicy(
        _effectivePolicy,
        _tiers
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.CancellationPolicy value) throws IOException {
      writer.name("effectivePolicy");
      new OptionalAdapter<>(new ObjectAdapter<PropertyReservationsQuery.EffectivePolicy>(EffectivePolicy.INSTANCE, false)).toJson(writer, customScalarAdapters, value.effectivePolicy);

      writer.name("tiers");
      new OptionalAdapter<>(new ListAdapter<>(new ObjectAdapter<PropertyReservationsQuery.Tier>(Tier.INSTANCE, false))).toJson(writer, customScalarAdapters, value.tiers);
    }
  }

  public enum EffectivePolicy implements Adapter<PropertyReservationsQuery.EffectivePolicy> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("endDateTimeUtc", "policyType", "startDateTimeUtc");

    @Override
    public PropertyReservationsQuery.EffectivePolicy fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      OffsetDateTime _endDateTimeUtc = null;
      String _policyType = null;
      OffsetDateTime _startDateTimeUtc = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _endDateTimeUtc = com.expediagroup.sdk.lodgingconnectivity.graphql.adapter.DateTimeAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          case 1: _policyType = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _startDateTimeUtc = com.expediagroup.sdk.lodgingconnectivity.graphql.adapter.DateTimeAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_endDateTimeUtc, "endDateTimeUtc");
      Assertions.checkFieldNotMissing(_policyType, "policyType");
      Assertions.checkFieldNotMissing(_startDateTimeUtc, "startDateTimeUtc");

      return new PropertyReservationsQuery.EffectivePolicy(
        _endDateTimeUtc,
        _policyType,
        _startDateTimeUtc
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.EffectivePolicy value) throws IOException {
      writer.name("endDateTimeUtc");
      com.expediagroup.sdk.lodgingconnectivity.graphql.adapter.DateTimeAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.endDateTimeUtc);

      writer.name("policyType");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.policyType);

      writer.name("startDateTimeUtc");
      com.expediagroup.sdk.lodgingconnectivity.graphql.adapter.DateTimeAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.startDateTimeUtc);
    }
  }

  public enum Tier implements Adapter<PropertyReservationsQuery.Tier> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("cancellationWindow", "penaltyRule");

    @Override
    public PropertyReservationsQuery.Tier fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      PropertyReservationsQuery.CancellationWindow _cancellationWindow = null;
      PropertyReservationsQuery.PenaltyRule _penaltyRule = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _cancellationWindow = new ObjectAdapter<PropertyReservationsQuery.CancellationWindow>(CancellationWindow.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 1: _penaltyRule = new ObjectAdapter<PropertyReservationsQuery.PenaltyRule>(PenaltyRule.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_cancellationWindow, "cancellationWindow");
      Assertions.checkFieldNotMissing(_penaltyRule, "penaltyRule");

      return new PropertyReservationsQuery.Tier(
        _cancellationWindow,
        _penaltyRule
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.Tier value) throws IOException {
      writer.name("cancellationWindow");
      new ObjectAdapter<PropertyReservationsQuery.CancellationWindow>(CancellationWindow.INSTANCE, false).toJson(writer, customScalarAdapters, value.cancellationWindow);

      writer.name("penaltyRule");
      new ObjectAdapter<PropertyReservationsQuery.PenaltyRule>(PenaltyRule.INSTANCE, false).toJson(writer, customScalarAdapters, value.penaltyRule);
    }
  }

  public enum CancellationWindow implements Adapter<PropertyReservationsQuery.CancellationWindow> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("cutoff", "temporalUnit");

    @Override
    public PropertyReservationsQuery.CancellationWindow fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Integer _cutoff = null;
      CancellationWindowTemporalUnit _temporalUnit = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _cutoff = Adapters.IntAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _temporalUnit = CancellationWindowTemporalUnit_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_cutoff, "cutoff");
      Assertions.checkFieldNotMissing(_temporalUnit, "temporalUnit");

      return new PropertyReservationsQuery.CancellationWindow(
        _cutoff,
        _temporalUnit
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.CancellationWindow value) throws IOException {
      writer.name("cutoff");
      Adapters.IntAdapter.toJson(writer, customScalarAdapters, value.cutoff);

      writer.name("temporalUnit");
      CancellationWindowTemporalUnit_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.temporalUnit);
    }
  }

  public enum PenaltyRule implements Adapter<PropertyReservationsQuery.PenaltyRule> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("costFlatAmount", "numberOfNights", "percentage", "priceAmount", "type");

    @Override
    public PropertyReservationsQuery.PenaltyRule fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Optional<PropertyReservationsQuery.CostFlatAmount> _costFlatAmount = null;
      Optional<Integer> _numberOfNights = null;
      Optional<Double> _percentage = null;
      Optional<PropertyReservationsQuery.PriceAmount> _priceAmount = null;
      CancellationPenaltyRuleType _type = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _costFlatAmount = new OptionalAdapter<>(new ObjectAdapter<PropertyReservationsQuery.CostFlatAmount>(CostFlatAmount.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 1: _numberOfNights = OptionalAdapters.OptionalIntAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _percentage = OptionalAdapters.OptionalDoubleAdapter.fromJson(reader, customScalarAdapters); break;
          case 3: _priceAmount = new OptionalAdapter<>(new ObjectAdapter<PropertyReservationsQuery.PriceAmount>(PriceAmount.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 4: _type = CancellationPenaltyRuleType_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_type, "type");

      return new PropertyReservationsQuery.PenaltyRule(
        _costFlatAmount,
        _numberOfNights,
        _percentage,
        _priceAmount,
        _type
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.PenaltyRule value) throws IOException {
      writer.name("costFlatAmount");
      new OptionalAdapter<>(new ObjectAdapter<PropertyReservationsQuery.CostFlatAmount>(CostFlatAmount.INSTANCE, false)).toJson(writer, customScalarAdapters, value.costFlatAmount);

      writer.name("numberOfNights");
      OptionalAdapters.OptionalIntAdapter.toJson(writer, customScalarAdapters, value.numberOfNights);

      writer.name("percentage");
      OptionalAdapters.OptionalDoubleAdapter.toJson(writer, customScalarAdapters, value.percentage);

      writer.name("priceAmount");
      new OptionalAdapter<>(new ObjectAdapter<PropertyReservationsQuery.PriceAmount>(PriceAmount.INSTANCE, false)).toJson(writer, customScalarAdapters, value.priceAmount);

      writer.name("type");
      CancellationPenaltyRuleType_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.type);
    }
  }

  public enum CostFlatAmount implements Adapter<PropertyReservationsQuery.CostFlatAmount> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("amount", "currencyCode");

    @Override
    public PropertyReservationsQuery.CostFlatAmount fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _amount = null;
      String _currencyCode = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _amount = (customScalarAdapters.<String>responseAdapterFor(Decimal.type)).fromJson(reader, customScalarAdapters); break;
          case 1: _currencyCode = (customScalarAdapters.<String>responseAdapterFor(CurrencyCode.type)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_amount, "amount");
      Assertions.checkFieldNotMissing(_currencyCode, "currencyCode");

      return new PropertyReservationsQuery.CostFlatAmount(
        _amount,
        _currencyCode
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.CostFlatAmount value) throws IOException {
      writer.name("amount");
      (customScalarAdapters.<String>responseAdapterFor(Decimal.type)).toJson(writer, customScalarAdapters, value.amount);

      writer.name("currencyCode");
      (customScalarAdapters.<String>responseAdapterFor(CurrencyCode.type)).toJson(writer, customScalarAdapters, value.currencyCode);
    }
  }

  public enum PriceAmount implements Adapter<PropertyReservationsQuery.PriceAmount> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("amount", "currencyCode");

    @Override
    public PropertyReservationsQuery.PriceAmount fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _amount = null;
      String _currencyCode = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _amount = (customScalarAdapters.<String>responseAdapterFor(Decimal.type)).fromJson(reader, customScalarAdapters); break;
          case 1: _currencyCode = (customScalarAdapters.<String>responseAdapterFor(CurrencyCode.type)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_amount, "amount");
      Assertions.checkFieldNotMissing(_currencyCode, "currencyCode");

      return new PropertyReservationsQuery.PriceAmount(
        _amount,
        _currencyCode
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.PriceAmount value) throws IOException {
      writer.name("amount");
      (customScalarAdapters.<String>responseAdapterFor(Decimal.type)).toJson(writer, customScalarAdapters, value.amount);

      writer.name("currencyCode");
      (customScalarAdapters.<String>responseAdapterFor(CurrencyCode.type)).toJson(writer, customScalarAdapters, value.currencyCode);
    }
  }

  public enum Distribution implements Adapter<PropertyReservationsQuery.Distribution> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("distributionChannel", "reservationSource");

    @Override
    public PropertyReservationsQuery.Distribution fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      DistributionChannel _distributionChannel = null;
      Optional<String> _reservationSource = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _distributionChannel = DistributionChannel_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          case 1: _reservationSource = OptionalAdapters.OptionalStringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_distributionChannel, "distributionChannel");

      return new PropertyReservationsQuery.Distribution(
        _distributionChannel,
        _reservationSource
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.Distribution value) throws IOException {
      writer.name("distributionChannel");
      DistributionChannel_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.distributionChannel);

      writer.name("reservationSource");
      OptionalAdapters.OptionalStringAdapter.toJson(writer, customScalarAdapters, value.reservationSource);
    }
  }

  public enum Guests implements Adapter<PropertyReservationsQuery.Guests> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("adultCount", "childCount", "pets", "primaryGuest");

    @Override
    public PropertyReservationsQuery.Guests fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Integer _adultCount = null;
      Integer _childCount = null;
      Optional<PropertyReservationsQuery.Pets> _pets = null;
      PropertyReservationsQuery.PrimaryGuest _primaryGuest = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _adultCount = Adapters.IntAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _childCount = Adapters.IntAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _pets = new OptionalAdapter<>(new ObjectAdapter<PropertyReservationsQuery.Pets>(Pets.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 3: _primaryGuest = new ObjectAdapter<PropertyReservationsQuery.PrimaryGuest>(PrimaryGuest.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_adultCount, "adultCount");
      Assertions.checkFieldNotMissing(_childCount, "childCount");
      Assertions.checkFieldNotMissing(_primaryGuest, "primaryGuest");

      return new PropertyReservationsQuery.Guests(
        _adultCount,
        _childCount,
        _pets,
        _primaryGuest
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.Guests value) throws IOException {
      writer.name("adultCount");
      Adapters.IntAdapter.toJson(writer, customScalarAdapters, value.adultCount);

      writer.name("childCount");
      Adapters.IntAdapter.toJson(writer, customScalarAdapters, value.childCount);

      writer.name("pets");
      new OptionalAdapter<>(new ObjectAdapter<PropertyReservationsQuery.Pets>(Pets.INSTANCE, false)).toJson(writer, customScalarAdapters, value.pets);

      writer.name("primaryGuest");
      new ObjectAdapter<PropertyReservationsQuery.PrimaryGuest>(PrimaryGuest.INSTANCE, false).toJson(writer, customScalarAdapters, value.primaryGuest);
    }
  }

  public enum Pets implements Adapter<PropertyReservationsQuery.Pets> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("travelingWithPets");

    @Override
    public PropertyReservationsQuery.Pets fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Boolean _travelingWithPets = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _travelingWithPets = Adapters.BooleanAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_travelingWithPets, "travelingWithPets");

      return new PropertyReservationsQuery.Pets(
        _travelingWithPets
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.Pets value) throws IOException {
      writer.name("travelingWithPets");
      Adapters.BooleanAdapter.toJson(writer, customScalarAdapters, value.travelingWithPets);
    }
  }

  public enum PrimaryGuest implements Adapter<PropertyReservationsQuery.PrimaryGuest> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("firstName", "lastName", "emailAddress", "fullPhoneNumber");

    @Override
    public PropertyReservationsQuery.PrimaryGuest fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Optional<String> _firstName = null;
      Optional<String> _lastName = null;
      String _emailAddress = null;
      Optional<String> _fullPhoneNumber = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _firstName = OptionalAdapters.OptionalStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _lastName = OptionalAdapters.OptionalStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _emailAddress = (customScalarAdapters.<String>responseAdapterFor(EmailAddress.type)).fromJson(reader, customScalarAdapters); break;
          case 3: _fullPhoneNumber = OptionalAdapters.OptionalStringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_emailAddress, "emailAddress");

      return new PropertyReservationsQuery.PrimaryGuest(
        _firstName,
        _lastName,
        _emailAddress,
        _fullPhoneNumber
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.PrimaryGuest value) throws IOException {
      writer.name("firstName");
      OptionalAdapters.OptionalStringAdapter.toJson(writer, customScalarAdapters, value.firstName);

      writer.name("lastName");
      OptionalAdapters.OptionalStringAdapter.toJson(writer, customScalarAdapters, value.lastName);

      writer.name("emailAddress");
      (customScalarAdapters.<String>responseAdapterFor(EmailAddress.type)).toJson(writer, customScalarAdapters, value.emailAddress);

      writer.name("fullPhoneNumber");
      OptionalAdapters.OptionalStringAdapter.toJson(writer, customScalarAdapters, value.fullPhoneNumber);
    }
  }

  public enum Payment implements Adapter<PropertyReservationsQuery.Payment> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("installments", "instructions", "instrument", "status");

    @Override
    public PropertyReservationsQuery.Payment fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      List<PropertyReservationsQuery.Installment> _installments = null;
      String _instructions = null;
      Optional<PropertyReservationsQuery.Instrument> _instrument = null;
      Optional<ReservationPaymentStatus> _status = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _installments = new ListAdapter<>(new ObjectAdapter<PropertyReservationsQuery.Installment>(Installment.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 1: _instructions = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _instrument = new OptionalAdapter<>(new ObjectAdapter<PropertyReservationsQuery.Instrument>(Instrument.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 3: _status = new OptionalAdapter<>(ReservationPaymentStatus_ResponseAdapter.INSTANCE).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_installments, "installments");
      Assertions.checkFieldNotMissing(_instructions, "instructions");

      return new PropertyReservationsQuery.Payment(
        _installments,
        _instructions,
        _instrument,
        _status
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.Payment value) throws IOException {
      writer.name("installments");
      new ListAdapter<>(new ObjectAdapter<PropertyReservationsQuery.Installment>(Installment.INSTANCE, false)).toJson(writer, customScalarAdapters, value.installments);

      writer.name("instructions");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.instructions);

      writer.name("instrument");
      new OptionalAdapter<>(new ObjectAdapter<PropertyReservationsQuery.Instrument>(Instrument.INSTANCE, false)).toJson(writer, customScalarAdapters, value.instrument);

      writer.name("status");
      new OptionalAdapter<>(ReservationPaymentStatus_ResponseAdapter.INSTANCE).toJson(writer, customScalarAdapters, value.status);
    }
  }

  public enum Installment implements Adapter<PropertyReservationsQuery.Installment> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("amount", "distributions", "dueDate", "installmentId", "paymentStatus");

    @Override
    public PropertyReservationsQuery.Installment fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      PropertyReservationsQuery.Amount4 _amount = null;
      List<PropertyReservationsQuery.Distribution1> _distributions = null;
      LocalDate _dueDate = null;
      Optional<String> _installmentId = null;
      Optional<InstallmentPaymentStatus> _paymentStatus = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _amount = new ObjectAdapter<PropertyReservationsQuery.Amount4>(Amount4.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 1: _distributions = new ListAdapter<>(new ObjectAdapter<PropertyReservationsQuery.Distribution1>(Distribution1.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 2: _dueDate = com.apollographql.adapter.core.JavaLocalDateAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          case 3: _installmentId = OptionalAdapters.OptionalStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 4: _paymentStatus = new OptionalAdapter<>(InstallmentPaymentStatus_ResponseAdapter.INSTANCE).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_amount, "amount");
      Assertions.checkFieldNotMissing(_distributions, "distributions");
      Assertions.checkFieldNotMissing(_dueDate, "dueDate");

      return new PropertyReservationsQuery.Installment(
        _amount,
        _distributions,
        _dueDate,
        _installmentId,
        _paymentStatus
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.Installment value) throws IOException {
      writer.name("amount");
      new ObjectAdapter<PropertyReservationsQuery.Amount4>(Amount4.INSTANCE, false).toJson(writer, customScalarAdapters, value.amount);

      writer.name("distributions");
      new ListAdapter<>(new ObjectAdapter<PropertyReservationsQuery.Distribution1>(Distribution1.INSTANCE, false)).toJson(writer, customScalarAdapters, value.distributions);

      writer.name("dueDate");
      com.apollographql.adapter.core.JavaLocalDateAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.dueDate);

      writer.name("installmentId");
      OptionalAdapters.OptionalStringAdapter.toJson(writer, customScalarAdapters, value.installmentId);

      writer.name("paymentStatus");
      new OptionalAdapter<>(InstallmentPaymentStatus_ResponseAdapter.INSTANCE).toJson(writer, customScalarAdapters, value.paymentStatus);
    }
  }

  public enum Amount4 implements Adapter<PropertyReservationsQuery.Amount4> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("amount", "currencyCode");

    @Override
    public PropertyReservationsQuery.Amount4 fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _amount = null;
      String _currencyCode = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _amount = (customScalarAdapters.<String>responseAdapterFor(Decimal.type)).fromJson(reader, customScalarAdapters); break;
          case 1: _currencyCode = (customScalarAdapters.<String>responseAdapterFor(CurrencyCode.type)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_amount, "amount");
      Assertions.checkFieldNotMissing(_currencyCode, "currencyCode");

      return new PropertyReservationsQuery.Amount4(
        _amount,
        _currencyCode
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.Amount4 value) throws IOException {
      writer.name("amount");
      (customScalarAdapters.<String>responseAdapterFor(Decimal.type)).toJson(writer, customScalarAdapters, value.amount);

      writer.name("currencyCode");
      (customScalarAdapters.<String>responseAdapterFor(CurrencyCode.type)).toJson(writer, customScalarAdapters, value.currencyCode);
    }
  }

  public enum Distribution1 implements Adapter<PropertyReservationsQuery.Distribution1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("amount", "type");

    @Override
    public PropertyReservationsQuery.Distribution1 fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      PropertyReservationsQuery.Amount5 _amount = null;
      String _type = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _amount = new ObjectAdapter<PropertyReservationsQuery.Amount5>(Amount5.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 1: _type = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_amount, "amount");
      Assertions.checkFieldNotMissing(_type, "type");

      return new PropertyReservationsQuery.Distribution1(
        _amount,
        _type
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.Distribution1 value) throws IOException {
      writer.name("amount");
      new ObjectAdapter<PropertyReservationsQuery.Amount5>(Amount5.INSTANCE, false).toJson(writer, customScalarAdapters, value.amount);

      writer.name("type");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.type);
    }
  }

  public enum Amount5 implements Adapter<PropertyReservationsQuery.Amount5> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("currencyCode", "amount");

    @Override
    public PropertyReservationsQuery.Amount5 fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _currencyCode = null;
      String _amount = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _currencyCode = (customScalarAdapters.<String>responseAdapterFor(CurrencyCode.type)).fromJson(reader, customScalarAdapters); break;
          case 1: _amount = (customScalarAdapters.<String>responseAdapterFor(Decimal.type)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_currencyCode, "currencyCode");
      Assertions.checkFieldNotMissing(_amount, "amount");

      return new PropertyReservationsQuery.Amount5(
        _currencyCode,
        _amount
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.Amount5 value) throws IOException {
      writer.name("currencyCode");
      (customScalarAdapters.<String>responseAdapterFor(CurrencyCode.type)).toJson(writer, customScalarAdapters, value.currencyCode);

      writer.name("amount");
      (customScalarAdapters.<String>responseAdapterFor(Decimal.type)).toJson(writer, customScalarAdapters, value.amount);
    }
  }

  public enum Instrument implements Adapter<PropertyReservationsQuery.Instrument> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("token", "type");

    @Override
    public PropertyReservationsQuery.Instrument fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Optional<PropertyReservationsQuery.Token> _token = null;
      PaymentInstrumentType _type = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _token = new OptionalAdapter<>(new ObjectAdapter<PropertyReservationsQuery.Token>(Token.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 1: _type = PaymentInstrumentType_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_type, "type");

      return new PropertyReservationsQuery.Instrument(
        _token,
        _type
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.Instrument value) throws IOException {
      writer.name("token");
      new OptionalAdapter<>(new ObjectAdapter<PropertyReservationsQuery.Token>(Token.INSTANCE, false)).toJson(writer, customScalarAdapters, value.token);

      writer.name("type");
      PaymentInstrumentType_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.type);
    }
  }

  public enum Token implements Adapter<PropertyReservationsQuery.Token> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("expirationDateTime", "value");

    @Override
    public PropertyReservationsQuery.Token fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Optional<String> _expirationDateTime = null;
      Optional<String> _value = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _expirationDateTime = OptionalAdapters.OptionalStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _value = OptionalAdapters.OptionalStringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new PropertyReservationsQuery.Token(
        _expirationDateTime,
        _value
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.Token value) throws IOException {
      writer.name("expirationDateTime");
      OptionalAdapters.OptionalStringAdapter.toJson(writer, customScalarAdapters, value.expirationDateTime);

      writer.name("value");
      OptionalAdapters.OptionalStringAdapter.toJson(writer, customScalarAdapters, value.value);
    }
  }

  public enum Policies implements Adapter<PropertyReservationsQuery.Policies> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("cancellationPolicy");

    @Override
    public PropertyReservationsQuery.Policies fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      PropertyReservationsQuery.CancellationPolicy1 _cancellationPolicy = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _cancellationPolicy = new ObjectAdapter<PropertyReservationsQuery.CancellationPolicy1>(CancellationPolicy1.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_cancellationPolicy, "cancellationPolicy");

      return new PropertyReservationsQuery.Policies(
        _cancellationPolicy
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.Policies value) throws IOException {
      writer.name("cancellationPolicy");
      new ObjectAdapter<PropertyReservationsQuery.CancellationPolicy1>(CancellationPolicy1.INSTANCE, false).toJson(writer, customScalarAdapters, value.cancellationPolicy);
    }
  }

  public enum CancellationPolicy1 implements Adapter<PropertyReservationsQuery.CancellationPolicy1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("effectivePolicy", "tiers");

    @Override
    public PropertyReservationsQuery.CancellationPolicy1 fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Optional<PropertyReservationsQuery.EffectivePolicy1> _effectivePolicy = null;
      Optional<List<PropertyReservationsQuery.Tier1>> _tiers = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _effectivePolicy = new OptionalAdapter<>(new ObjectAdapter<PropertyReservationsQuery.EffectivePolicy1>(EffectivePolicy1.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 1: _tiers = new OptionalAdapter<>(new ListAdapter<>(new ObjectAdapter<PropertyReservationsQuery.Tier1>(Tier1.INSTANCE, false))).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new PropertyReservationsQuery.CancellationPolicy1(
        _effectivePolicy,
        _tiers
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.CancellationPolicy1 value) throws IOException {
      writer.name("effectivePolicy");
      new OptionalAdapter<>(new ObjectAdapter<PropertyReservationsQuery.EffectivePolicy1>(EffectivePolicy1.INSTANCE, false)).toJson(writer, customScalarAdapters, value.effectivePolicy);

      writer.name("tiers");
      new OptionalAdapter<>(new ListAdapter<>(new ObjectAdapter<PropertyReservationsQuery.Tier1>(Tier1.INSTANCE, false))).toJson(writer, customScalarAdapters, value.tiers);
    }
  }

  public enum EffectivePolicy1 implements Adapter<PropertyReservationsQuery.EffectivePolicy1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("endDateTimeUtc", "policyType", "startDateTimeUtc");

    @Override
    public PropertyReservationsQuery.EffectivePolicy1 fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      OffsetDateTime _endDateTimeUtc = null;
      String _policyType = null;
      OffsetDateTime _startDateTimeUtc = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _endDateTimeUtc = com.expediagroup.sdk.lodgingconnectivity.graphql.adapter.DateTimeAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          case 1: _policyType = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _startDateTimeUtc = com.expediagroup.sdk.lodgingconnectivity.graphql.adapter.DateTimeAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_endDateTimeUtc, "endDateTimeUtc");
      Assertions.checkFieldNotMissing(_policyType, "policyType");
      Assertions.checkFieldNotMissing(_startDateTimeUtc, "startDateTimeUtc");

      return new PropertyReservationsQuery.EffectivePolicy1(
        _endDateTimeUtc,
        _policyType,
        _startDateTimeUtc
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.EffectivePolicy1 value) throws IOException {
      writer.name("endDateTimeUtc");
      com.expediagroup.sdk.lodgingconnectivity.graphql.adapter.DateTimeAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.endDateTimeUtc);

      writer.name("policyType");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.policyType);

      writer.name("startDateTimeUtc");
      com.expediagroup.sdk.lodgingconnectivity.graphql.adapter.DateTimeAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.startDateTimeUtc);
    }
  }

  public enum Tier1 implements Adapter<PropertyReservationsQuery.Tier1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("cancellationWindow", "penaltyRule");

    @Override
    public PropertyReservationsQuery.Tier1 fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      PropertyReservationsQuery.CancellationWindow1 _cancellationWindow = null;
      PropertyReservationsQuery.PenaltyRule1 _penaltyRule = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _cancellationWindow = new ObjectAdapter<PropertyReservationsQuery.CancellationWindow1>(CancellationWindow1.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 1: _penaltyRule = new ObjectAdapter<PropertyReservationsQuery.PenaltyRule1>(PenaltyRule1.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_cancellationWindow, "cancellationWindow");
      Assertions.checkFieldNotMissing(_penaltyRule, "penaltyRule");

      return new PropertyReservationsQuery.Tier1(
        _cancellationWindow,
        _penaltyRule
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.Tier1 value) throws IOException {
      writer.name("cancellationWindow");
      new ObjectAdapter<PropertyReservationsQuery.CancellationWindow1>(CancellationWindow1.INSTANCE, false).toJson(writer, customScalarAdapters, value.cancellationWindow);

      writer.name("penaltyRule");
      new ObjectAdapter<PropertyReservationsQuery.PenaltyRule1>(PenaltyRule1.INSTANCE, false).toJson(writer, customScalarAdapters, value.penaltyRule);
    }
  }

  public enum CancellationWindow1 implements Adapter<PropertyReservationsQuery.CancellationWindow1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("cutoff", "temporalUnit");

    @Override
    public PropertyReservationsQuery.CancellationWindow1 fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Integer _cutoff = null;
      CancellationWindowTemporalUnit _temporalUnit = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _cutoff = Adapters.IntAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _temporalUnit = CancellationWindowTemporalUnit_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_cutoff, "cutoff");
      Assertions.checkFieldNotMissing(_temporalUnit, "temporalUnit");

      return new PropertyReservationsQuery.CancellationWindow1(
        _cutoff,
        _temporalUnit
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.CancellationWindow1 value) throws IOException {
      writer.name("cutoff");
      Adapters.IntAdapter.toJson(writer, customScalarAdapters, value.cutoff);

      writer.name("temporalUnit");
      CancellationWindowTemporalUnit_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.temporalUnit);
    }
  }

  public enum PenaltyRule1 implements Adapter<PropertyReservationsQuery.PenaltyRule1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("costFlatAmount", "numberOfNights", "percentage", "priceAmount", "type");

    @Override
    public PropertyReservationsQuery.PenaltyRule1 fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Optional<PropertyReservationsQuery.CostFlatAmount1> _costFlatAmount = null;
      Optional<Integer> _numberOfNights = null;
      Optional<Double> _percentage = null;
      Optional<PropertyReservationsQuery.PriceAmount1> _priceAmount = null;
      CancellationPenaltyRuleType _type = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _costFlatAmount = new OptionalAdapter<>(new ObjectAdapter<PropertyReservationsQuery.CostFlatAmount1>(CostFlatAmount1.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 1: _numberOfNights = OptionalAdapters.OptionalIntAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _percentage = OptionalAdapters.OptionalDoubleAdapter.fromJson(reader, customScalarAdapters); break;
          case 3: _priceAmount = new OptionalAdapter<>(new ObjectAdapter<PropertyReservationsQuery.PriceAmount1>(PriceAmount1.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 4: _type = CancellationPenaltyRuleType_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_type, "type");

      return new PropertyReservationsQuery.PenaltyRule1(
        _costFlatAmount,
        _numberOfNights,
        _percentage,
        _priceAmount,
        _type
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.PenaltyRule1 value) throws IOException {
      writer.name("costFlatAmount");
      new OptionalAdapter<>(new ObjectAdapter<PropertyReservationsQuery.CostFlatAmount1>(CostFlatAmount1.INSTANCE, false)).toJson(writer, customScalarAdapters, value.costFlatAmount);

      writer.name("numberOfNights");
      OptionalAdapters.OptionalIntAdapter.toJson(writer, customScalarAdapters, value.numberOfNights);

      writer.name("percentage");
      OptionalAdapters.OptionalDoubleAdapter.toJson(writer, customScalarAdapters, value.percentage);

      writer.name("priceAmount");
      new OptionalAdapter<>(new ObjectAdapter<PropertyReservationsQuery.PriceAmount1>(PriceAmount1.INSTANCE, false)).toJson(writer, customScalarAdapters, value.priceAmount);

      writer.name("type");
      CancellationPenaltyRuleType_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.type);
    }
  }

  public enum CostFlatAmount1 implements Adapter<PropertyReservationsQuery.CostFlatAmount1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("amount", "currencyCode");

    @Override
    public PropertyReservationsQuery.CostFlatAmount1 fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _amount = null;
      String _currencyCode = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _amount = (customScalarAdapters.<String>responseAdapterFor(Decimal.type)).fromJson(reader, customScalarAdapters); break;
          case 1: _currencyCode = (customScalarAdapters.<String>responseAdapterFor(CurrencyCode.type)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_amount, "amount");
      Assertions.checkFieldNotMissing(_currencyCode, "currencyCode");

      return new PropertyReservationsQuery.CostFlatAmount1(
        _amount,
        _currencyCode
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.CostFlatAmount1 value) throws IOException {
      writer.name("amount");
      (customScalarAdapters.<String>responseAdapterFor(Decimal.type)).toJson(writer, customScalarAdapters, value.amount);

      writer.name("currencyCode");
      (customScalarAdapters.<String>responseAdapterFor(CurrencyCode.type)).toJson(writer, customScalarAdapters, value.currencyCode);
    }
  }

  public enum PriceAmount1 implements Adapter<PropertyReservationsQuery.PriceAmount1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("amount", "currencyCode");

    @Override
    public PropertyReservationsQuery.PriceAmount1 fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _amount = null;
      String _currencyCode = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _amount = (customScalarAdapters.<String>responseAdapterFor(Decimal.type)).fromJson(reader, customScalarAdapters); break;
          case 1: _currencyCode = (customScalarAdapters.<String>responseAdapterFor(CurrencyCode.type)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_amount, "amount");
      Assertions.checkFieldNotMissing(_currencyCode, "currencyCode");

      return new PropertyReservationsQuery.PriceAmount1(
        _amount,
        _currencyCode
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.PriceAmount1 value) throws IOException {
      writer.name("amount");
      (customScalarAdapters.<String>responseAdapterFor(Decimal.type)).toJson(writer, customScalarAdapters, value.amount);

      writer.name("currencyCode");
      (customScalarAdapters.<String>responseAdapterFor(CurrencyCode.type)).toJson(writer, customScalarAdapters, value.currencyCode);
    }
  }

  public enum PrimaryGuest1 implements Adapter<PropertyReservationsQuery.PrimaryGuest1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("emailAddress", "firstName", "lastName", "loyaltyTier", "phoneNumbers", "supplierLoyaltyPlanInfo", "travelPurpose");

    @Override
    public PropertyReservationsQuery.PrimaryGuest1 fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Optional<String> _emailAddress = null;
      String _firstName = null;
      String _lastName = null;
      Optional<String> _loyaltyTier = null;
      Optional<List<PropertyReservationsQuery.PhoneNumber>> _phoneNumbers = null;
      Optional<PropertyReservationsQuery.SupplierLoyaltyPlanInfo> _supplierLoyaltyPlanInfo = null;
      Optional<TravelPurpose> _travelPurpose = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _emailAddress = new OptionalAdapter<>((customScalarAdapters.<String>responseAdapterFor(EmailAddress.type))).fromJson(reader, customScalarAdapters); break;
          case 1: _firstName = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _lastName = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 3: _loyaltyTier = OptionalAdapters.OptionalStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 4: _phoneNumbers = new OptionalAdapter<>(new ListAdapter<>(new ObjectAdapter<PropertyReservationsQuery.PhoneNumber>(PhoneNumber.INSTANCE, false))).fromJson(reader, customScalarAdapters); break;
          case 5: _supplierLoyaltyPlanInfo = new OptionalAdapter<>(new ObjectAdapter<PropertyReservationsQuery.SupplierLoyaltyPlanInfo>(SupplierLoyaltyPlanInfo.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 6: _travelPurpose = new OptionalAdapter<>(TravelPurpose_ResponseAdapter.INSTANCE).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_firstName, "firstName");
      Assertions.checkFieldNotMissing(_lastName, "lastName");

      return new PropertyReservationsQuery.PrimaryGuest1(
        _emailAddress,
        _firstName,
        _lastName,
        _loyaltyTier,
        _phoneNumbers,
        _supplierLoyaltyPlanInfo,
        _travelPurpose
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.PrimaryGuest1 value) throws IOException {
      writer.name("emailAddress");
      new OptionalAdapter<>((customScalarAdapters.<String>responseAdapterFor(EmailAddress.type))).toJson(writer, customScalarAdapters, value.emailAddress);

      writer.name("firstName");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.firstName);

      writer.name("lastName");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.lastName);

      writer.name("loyaltyTier");
      OptionalAdapters.OptionalStringAdapter.toJson(writer, customScalarAdapters, value.loyaltyTier);

      writer.name("phoneNumbers");
      new OptionalAdapter<>(new ListAdapter<>(new ObjectAdapter<PropertyReservationsQuery.PhoneNumber>(PhoneNumber.INSTANCE, false))).toJson(writer, customScalarAdapters, value.phoneNumbers);

      writer.name("supplierLoyaltyPlanInfo");
      new OptionalAdapter<>(new ObjectAdapter<PropertyReservationsQuery.SupplierLoyaltyPlanInfo>(SupplierLoyaltyPlanInfo.INSTANCE, false)).toJson(writer, customScalarAdapters, value.supplierLoyaltyPlanInfo);

      writer.name("travelPurpose");
      new OptionalAdapter<>(TravelPurpose_ResponseAdapter.INSTANCE).toJson(writer, customScalarAdapters, value.travelPurpose);
    }
  }

  public enum PhoneNumber implements Adapter<PropertyReservationsQuery.PhoneNumber> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("areaCode", "countryCode", "number");

    @Override
    public PropertyReservationsQuery.PhoneNumber fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _areaCode = null;
      String _countryCode = null;
      String _number = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _areaCode = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _countryCode = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _number = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_areaCode, "areaCode");
      Assertions.checkFieldNotMissing(_countryCode, "countryCode");
      Assertions.checkFieldNotMissing(_number, "number");

      return new PropertyReservationsQuery.PhoneNumber(
        _areaCode,
        _countryCode,
        _number
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.PhoneNumber value) throws IOException {
      writer.name("areaCode");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.areaCode);

      writer.name("countryCode");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.countryCode);

      writer.name("number");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.number);
    }
  }

  public enum SupplierLoyaltyPlanInfo implements Adapter<PropertyReservationsQuery.SupplierLoyaltyPlanInfo> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("membershipNumber", "planCode");

    @Override
    public PropertyReservationsQuery.SupplierLoyaltyPlanInfo fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Optional<Integer> _membershipNumber = null;
      Optional<String> _planCode = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _membershipNumber = OptionalAdapters.OptionalIntAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _planCode = OptionalAdapters.OptionalStringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new PropertyReservationsQuery.SupplierLoyaltyPlanInfo(
        _membershipNumber,
        _planCode
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.SupplierLoyaltyPlanInfo value) throws IOException {
      writer.name("membershipNumber");
      OptionalAdapters.OptionalIntAdapter.toJson(writer, customScalarAdapters, value.membershipNumber);

      writer.name("planCode");
      OptionalAdapters.OptionalStringAdapter.toJson(writer, customScalarAdapters, value.planCode);
    }
  }

  public enum RateId implements Adapter<PropertyReservationsQuery.RateId> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id", "idSource");

    @Override
    public PropertyReservationsQuery.RateId fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Optional<String> _id = null;
      IdSource _idSource = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _id = OptionalAdapters.OptionalStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _idSource = IdSource_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_idSource, "idSource");

      return new PropertyReservationsQuery.RateId(
        _id,
        _idSource
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.RateId value) throws IOException {
      writer.name("id");
      OptionalAdapters.OptionalStringAdapter.toJson(writer, customScalarAdapters, value.id);

      writer.name("idSource");
      IdSource_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.idSource);
    }
  }

  public enum ReconciliationEligibility implements Adapter<PropertyReservationsQuery.ReconciliationEligibility> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("invalidScenarios", "validScenarios");

    @Override
    public PropertyReservationsQuery.ReconciliationEligibility fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Optional<List<PropertyReservationsQuery.InvalidScenario>> _invalidScenarios = null;
      Optional<List<String>> _validScenarios = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _invalidScenarios = new OptionalAdapter<>(new ListAdapter<>(new ObjectAdapter<PropertyReservationsQuery.InvalidScenario>(InvalidScenario.INSTANCE, false))).fromJson(reader, customScalarAdapters); break;
          case 1: _validScenarios = new OptionalAdapter<>(new ListAdapter<>(Adapters.StringAdapter)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new PropertyReservationsQuery.ReconciliationEligibility(
        _invalidScenarios,
        _validScenarios
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.ReconciliationEligibility value) throws IOException {
      writer.name("invalidScenarios");
      new OptionalAdapter<>(new ListAdapter<>(new ObjectAdapter<PropertyReservationsQuery.InvalidScenario>(InvalidScenario.INSTANCE, false))).toJson(writer, customScalarAdapters, value.invalidScenarios);

      writer.name("validScenarios");
      new OptionalAdapter<>(new ListAdapter<>(Adapters.StringAdapter)).toJson(writer, customScalarAdapters, value.validScenarios);
    }
  }

  public enum InvalidScenario implements Adapter<PropertyReservationsQuery.InvalidScenario> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("reason", "scenario");

    @Override
    public PropertyReservationsQuery.InvalidScenario fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _reason = null;
      String _scenario = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _reason = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _scenario = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_reason, "reason");
      Assertions.checkFieldNotMissing(_scenario, "scenario");

      return new PropertyReservationsQuery.InvalidScenario(
        _reason,
        _scenario
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.InvalidScenario value) throws IOException {
      writer.name("reason");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.reason);

      writer.name("scenario");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.scenario);
    }
  }

  public enum ReservationId implements Adapter<PropertyReservationsQuery.ReservationId> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id", "idSource");

    @Override
    public PropertyReservationsQuery.ReservationId fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Optional<String> _id = null;
      IdSource _idSource = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _id = OptionalAdapters.OptionalStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _idSource = IdSource_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_idSource, "idSource");

      return new PropertyReservationsQuery.ReservationId(
        _id,
        _idSource
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.ReservationId value) throws IOException {
      writer.name("id");
      OptionalAdapters.OptionalStringAdapter.toJson(writer, customScalarAdapters, value.id);

      writer.name("idSource");
      IdSource_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.idSource);
    }
  }

  public enum Statuses implements Adapter<PropertyReservationsQuery.Statuses> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("status");

    @Override
    public PropertyReservationsQuery.Statuses fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      ReservationStatus _status = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _status = ReservationStatus_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_status, "status");

      return new PropertyReservationsQuery.Statuses(
        _status
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.Statuses value) throws IOException {
      writer.name("status");
      ReservationStatus_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.status);
    }
  }

  public enum StayDates implements Adapter<PropertyReservationsQuery.StayDates> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("checkInDate", "checkOutDate");

    @Override
    public PropertyReservationsQuery.StayDates fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      LocalDate _checkInDate = null;
      LocalDate _checkOutDate = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _checkInDate = com.apollographql.adapter.core.JavaLocalDateAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          case 1: _checkOutDate = com.apollographql.adapter.core.JavaLocalDateAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_checkInDate, "checkInDate");
      Assertions.checkFieldNotMissing(_checkOutDate, "checkOutDate");

      return new PropertyReservationsQuery.StayDates(
        _checkInDate,
        _checkOutDate
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.StayDates value) throws IOException {
      writer.name("checkInDate");
      com.apollographql.adapter.core.JavaLocalDateAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.checkInDate);

      writer.name("checkOutDate");
      com.apollographql.adapter.core.JavaLocalDateAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.checkOutDate);
    }
  }

  public enum SupplierAmount implements Adapter<PropertyReservationsQuery.SupplierAmount> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename", "currencyCode", "rateType");

    @Override
    public PropertyReservationsQuery.SupplierAmount fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String __typename = null;
      String _currencyCode = null;
      RateType _rateType = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _currencyCode = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _rateType = RateType_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(__typename, "__typename");
      Optional<PropertyReservationsQuery.OnExpediaSupplierAmount> _onExpediaSupplierAmount = Optional.empty();
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("ExpediaSupplierAmount")), customScalarAdapters.falseVariables, __typename, customScalarAdapters.deferredFragmentIdentifiers, null)) {
        reader.rewind();
        _onExpediaSupplierAmount = Optional.of(com.expediagroup.sdk.lodgingconnectivity.graphql.supply.adapter.PropertyReservationsQuery_ResponseAdapter.OnExpediaSupplierAmount.INSTANCE.fromJson(reader, customScalarAdapters));
      }

      Assertions.checkFieldNotMissing(_currencyCode, "currencyCode");
      Assertions.checkFieldNotMissing(_rateType, "rateType");

      return new PropertyReservationsQuery.SupplierAmount(
        __typename,
        _currencyCode,
        _rateType,
        _onExpediaSupplierAmount
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.SupplierAmount value) throws IOException {
      writer.name("__typename");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.__typename);

      writer.name("currencyCode");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.currencyCode);

      writer.name("rateType");
      RateType_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.rateType);

      if (value.onExpediaSupplierAmount.isPresent()) {
        com.expediagroup.sdk.lodgingconnectivity.graphql.supply.adapter.PropertyReservationsQuery_ResponseAdapter.OnExpediaSupplierAmount.INSTANCE.toJson(writer, customScalarAdapters, value.onExpediaSupplierAmount.get());
      }
    }
  }

  public enum OnExpediaSupplierAmount implements Adapter<PropertyReservationsQuery.OnExpediaSupplierAmount> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("currencyCode", "rateType", "rates", "total");

    @Override
    public PropertyReservationsQuery.OnExpediaSupplierAmount fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _currencyCode = null;
      RateType _rateType = null;
      List<PropertyReservationsQuery.Rate> _rates = null;
      PropertyReservationsQuery.Total _total = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _currencyCode = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _rateType = RateType_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          case 2: _rates = new ListAdapter<>(new ObjectAdapter<PropertyReservationsQuery.Rate>(Rate.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 3: _total = new ObjectAdapter<PropertyReservationsQuery.Total>(Total.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_currencyCode, "currencyCode");
      Assertions.checkFieldNotMissing(_rateType, "rateType");
      Assertions.checkFieldNotMissing(_rates, "rates");
      Assertions.checkFieldNotMissing(_total, "total");

      return new PropertyReservationsQuery.OnExpediaSupplierAmount(
        _currencyCode,
        _rateType,
        _rates,
        _total
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.OnExpediaSupplierAmount value) throws IOException {
      writer.name("currencyCode");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.currencyCode);

      writer.name("rateType");
      RateType_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.rateType);

      writer.name("rates");
      new ListAdapter<>(new ObjectAdapter<PropertyReservationsQuery.Rate>(Rate.INSTANCE, false)).toJson(writer, customScalarAdapters, value.rates);

      writer.name("total");
      new ObjectAdapter<PropertyReservationsQuery.Total>(Total.INSTANCE, false).toJson(writer, customScalarAdapters, value.total);
    }
  }

  public enum Rate implements Adapter<PropertyReservationsQuery.Rate> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("compensation", "fromDate", "rateItems", "rateTimeUnit", "toDate");

    @Override
    public PropertyReservationsQuery.Rate fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      PropertyReservationsQuery.Compensation _compensation = null;
      LocalDate _fromDate = null;
      List<PropertyReservationsQuery.RateItem> _rateItems = null;
      RateTimeUnit _rateTimeUnit = null;
      LocalDate _toDate = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _compensation = new ObjectAdapter<PropertyReservationsQuery.Compensation>(Compensation.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 1: _fromDate = com.apollographql.adapter.core.JavaLocalDateAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          case 2: _rateItems = new ListAdapter<>(new ObjectAdapter<PropertyReservationsQuery.RateItem>(RateItem.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 3: _rateTimeUnit = RateTimeUnit_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          case 4: _toDate = com.apollographql.adapter.core.JavaLocalDateAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_compensation, "compensation");
      Assertions.checkFieldNotMissing(_fromDate, "fromDate");
      Assertions.checkFieldNotMissing(_rateItems, "rateItems");
      Assertions.checkFieldNotMissing(_rateTimeUnit, "rateTimeUnit");
      Assertions.checkFieldNotMissing(_toDate, "toDate");

      return new PropertyReservationsQuery.Rate(
        _compensation,
        _fromDate,
        _rateItems,
        _rateTimeUnit,
        _toDate
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.Rate value) throws IOException {
      writer.name("compensation");
      new ObjectAdapter<PropertyReservationsQuery.Compensation>(Compensation.INSTANCE, false).toJson(writer, customScalarAdapters, value.compensation);

      writer.name("fromDate");
      com.apollographql.adapter.core.JavaLocalDateAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.fromDate);

      writer.name("rateItems");
      new ListAdapter<>(new ObjectAdapter<PropertyReservationsQuery.RateItem>(RateItem.INSTANCE, false)).toJson(writer, customScalarAdapters, value.rateItems);

      writer.name("rateTimeUnit");
      RateTimeUnit_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.rateTimeUnit);

      writer.name("toDate");
      com.apollographql.adapter.core.JavaLocalDateAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.toDate);
    }
  }

  public enum Compensation implements Adapter<PropertyReservationsQuery.Compensation> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("acceleratorPercent", "basePercent");

    @Override
    public PropertyReservationsQuery.Compensation fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Optional<Double> _acceleratorPercent = null;
      Optional<Double> _basePercent = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _acceleratorPercent = OptionalAdapters.OptionalDoubleAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _basePercent = OptionalAdapters.OptionalDoubleAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new PropertyReservationsQuery.Compensation(
        _acceleratorPercent,
        _basePercent
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.Compensation value) throws IOException {
      writer.name("acceleratorPercent");
      OptionalAdapters.OptionalDoubleAdapter.toJson(writer, customScalarAdapters, value.acceleratorPercent);

      writer.name("basePercent");
      OptionalAdapters.OptionalDoubleAdapter.toJson(writer, customScalarAdapters, value.basePercent);
    }
  }

  public enum RateItem implements Adapter<PropertyReservationsQuery.RateItem> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("amount", "feeType");

    @Override
    public PropertyReservationsQuery.RateItem fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Double _amount = null;
      SupplierFeeType _feeType = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _amount = Adapters.DoubleAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _feeType = SupplierFeeType_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_amount, "amount");
      Assertions.checkFieldNotMissing(_feeType, "feeType");

      return new PropertyReservationsQuery.RateItem(
        _amount,
        _feeType
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.RateItem value) throws IOException {
      writer.name("amount");
      Adapters.DoubleAdapter.toJson(writer, customScalarAdapters, value.amount);

      writer.name("feeType");
      SupplierFeeType_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.feeType);
    }
  }

  public enum Total implements Adapter<PropertyReservationsQuery.Total> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("amountAfterTax", "amountBeforeTax", "compensation");

    @Override
    public PropertyReservationsQuery.Total fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Double _amountAfterTax = null;
      Double _amountBeforeTax = null;
      PropertyReservationsQuery.Compensation1 _compensation = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _amountAfterTax = Adapters.DoubleAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _amountBeforeTax = Adapters.DoubleAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _compensation = new ObjectAdapter<PropertyReservationsQuery.Compensation1>(Compensation1.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_amountAfterTax, "amountAfterTax");
      Assertions.checkFieldNotMissing(_amountBeforeTax, "amountBeforeTax");
      Assertions.checkFieldNotMissing(_compensation, "compensation");

      return new PropertyReservationsQuery.Total(
        _amountAfterTax,
        _amountBeforeTax,
        _compensation
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.Total value) throws IOException {
      writer.name("amountAfterTax");
      Adapters.DoubleAdapter.toJson(writer, customScalarAdapters, value.amountAfterTax);

      writer.name("amountBeforeTax");
      Adapters.DoubleAdapter.toJson(writer, customScalarAdapters, value.amountBeforeTax);

      writer.name("compensation");
      new ObjectAdapter<PropertyReservationsQuery.Compensation1>(Compensation1.INSTANCE, false).toJson(writer, customScalarAdapters, value.compensation);
    }
  }

  public enum Compensation1 implements Adapter<PropertyReservationsQuery.Compensation1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("acceleratorPercent", "basePercent");

    @Override
    public PropertyReservationsQuery.Compensation1 fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Optional<Double> _acceleratorPercent = null;
      Optional<Double> _basePercent = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _acceleratorPercent = OptionalAdapters.OptionalDoubleAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _basePercent = OptionalAdapters.OptionalDoubleAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new PropertyReservationsQuery.Compensation1(
        _acceleratorPercent,
        _basePercent
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.Compensation1 value) throws IOException {
      writer.name("acceleratorPercent");
      OptionalAdapters.OptionalDoubleAdapter.toJson(writer, customScalarAdapters, value.acceleratorPercent);

      writer.name("basePercent");
      OptionalAdapters.OptionalDoubleAdapter.toJson(writer, customScalarAdapters, value.basePercent);
    }
  }

  public enum UnitId implements Adapter<PropertyReservationsQuery.UnitId> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id", "idSource");

    @Override
    public PropertyReservationsQuery.UnitId fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Optional<String> _id = null;
      IdSource _idSource = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _id = OptionalAdapters.OptionalStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _idSource = IdSource_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_idSource, "idSource");

      return new PropertyReservationsQuery.UnitId(
        _id,
        _idSource
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.UnitId value) throws IOException {
      writer.name("id");
      OptionalAdapters.OptionalStringAdapter.toJson(writer, customScalarAdapters, value.id);

      writer.name("idSource");
      IdSource_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.idSource);
    }
  }

  public enum ValueAddedPromotion implements Adapter<PropertyReservationsQuery.ValueAddedPromotion> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("description", "id");

    @Override
    public PropertyReservationsQuery.ValueAddedPromotion fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _description = null;
      String _id = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _description = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _id = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_description, "description");
      Assertions.checkFieldNotMissing(_id, "id");

      return new PropertyReservationsQuery.ValueAddedPromotion(
        _description,
        _id
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.ValueAddedPromotion value) throws IOException {
      writer.name("description");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.description);

      writer.name("id");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.id);
    }
  }

  public enum VrboAmounts implements Adapter<PropertyReservationsQuery.VrboAmounts> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("summary");

    @Override
    public PropertyReservationsQuery.VrboAmounts fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      List<PropertyReservationsQuery.Summary1> _summary = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _summary = new ListAdapter<>(new ObjectAdapter<PropertyReservationsQuery.Summary1>(Summary1.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_summary, "summary");

      return new PropertyReservationsQuery.VrboAmounts(
        _summary
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.VrboAmounts value) throws IOException {
      writer.name("summary");
      new ListAdapter<>(new ObjectAdapter<PropertyReservationsQuery.Summary1>(Summary1.INSTANCE, false)).toJson(writer, customScalarAdapters, value.summary);
    }
  }

  public enum Summary1 implements Adapter<PropertyReservationsQuery.Summary1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("amount", "productCode", "type");

    @Override
    public PropertyReservationsQuery.Summary1 fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      PropertyReservationsQuery.Amount6 _amount = null;
      Optional<String> _productCode = null;
      String _type = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _amount = new ObjectAdapter<PropertyReservationsQuery.Amount6>(Amount6.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 1: _productCode = OptionalAdapters.OptionalStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _type = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_amount, "amount");
      Assertions.checkFieldNotMissing(_type, "type");

      return new PropertyReservationsQuery.Summary1(
        _amount,
        _productCode,
        _type
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.Summary1 value) throws IOException {
      writer.name("amount");
      new ObjectAdapter<PropertyReservationsQuery.Amount6>(Amount6.INSTANCE, false).toJson(writer, customScalarAdapters, value.amount);

      writer.name("productCode");
      OptionalAdapters.OptionalStringAdapter.toJson(writer, customScalarAdapters, value.productCode);

      writer.name("type");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.type);
    }
  }

  public enum Amount6 implements Adapter<PropertyReservationsQuery.Amount6> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("amount", "currencyCode");

    @Override
    public PropertyReservationsQuery.Amount6 fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _amount = null;
      String _currencyCode = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _amount = (customScalarAdapters.<String>responseAdapterFor(Decimal.type)).fromJson(reader, customScalarAdapters); break;
          case 1: _currencyCode = (customScalarAdapters.<String>responseAdapterFor(CurrencyCode.type)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_amount, "amount");
      Assertions.checkFieldNotMissing(_currencyCode, "currencyCode");

      return new PropertyReservationsQuery.Amount6(
        _amount,
        _currencyCode
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsQuery.Amount6 value) throws IOException {
      writer.name("amount");
      (customScalarAdapters.<String>responseAdapterFor(Decimal.type)).toJson(writer, customScalarAdapters, value.amount);

      writer.name("currencyCode");
      (customScalarAdapters.<String>responseAdapterFor(CurrencyCode.type)).toJson(writer, customScalarAdapters, value.currencyCode);
    }
  }
}
