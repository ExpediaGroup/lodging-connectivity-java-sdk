//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type;

import com.apollographql.apollo.api.Optional;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.time.LocalDate;

public class ChangeReservationReconciliationInput {
  public final String propertyId;

  public final String reservationId;

  public final Optional<SupplierAmountInput> supplierAmount;

  public final LocalDate checkInDate;

  public final LocalDate checkOutDate;

  public final Optional<ReservationChangeReason> reason;

  private transient volatile int $hashCode;

  private transient volatile boolean $hashCodeMemoized;

  private transient volatile String $toString;

  public ChangeReservationReconciliationInput(String propertyId, String reservationId,
      Optional<SupplierAmountInput> supplierAmount, LocalDate checkInDate, LocalDate checkOutDate,
      Optional<ReservationChangeReason> reason) {
    this.propertyId = propertyId;
    this.reservationId = reservationId;
    this.supplierAmount = supplierAmount;
    this.checkInDate = checkInDate;
    this.checkOutDate = checkOutDate;
    this.reason = reason;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof ChangeReservationReconciliationInput) {
      ChangeReservationReconciliationInput that = (ChangeReservationReconciliationInput) o;
      return ((this.propertyId == null) ? (that.propertyId == null) : this.propertyId.equals(that.propertyId))
       &&((this.reservationId == null) ? (that.reservationId == null) : this.reservationId.equals(that.reservationId))
       &&((this.supplierAmount == null) ? (that.supplierAmount == null) : this.supplierAmount.equals(that.supplierAmount))
       &&((this.checkInDate == null) ? (that.checkInDate == null) : this.checkInDate.equals(that.checkInDate))
       &&((this.checkOutDate == null) ? (that.checkOutDate == null) : this.checkOutDate.equals(that.checkOutDate))
       &&((this.reason == null) ? (that.reason == null) : this.reason.equals(that.reason));
    }
    return false;
  }

  @Override
  public int hashCode() {
    if (!$hashCodeMemoized) {
      int __h = 1;
      __h *= 1000003;
      __h ^= (propertyId == null) ? 0 : propertyId.hashCode();
      __h *= 1000003;
      __h ^= (reservationId == null) ? 0 : reservationId.hashCode();
      __h *= 1000003;
      __h ^= (supplierAmount == null) ? 0 : supplierAmount.hashCode();
      __h *= 1000003;
      __h ^= (checkInDate == null) ? 0 : checkInDate.hashCode();
      __h *= 1000003;
      __h ^= (checkOutDate == null) ? 0 : checkOutDate.hashCode();
      __h *= 1000003;
      __h ^= (reason == null) ? 0 : reason.hashCode();
      $hashCode = __h;
      $hashCodeMemoized = true;
    }
    return $hashCode;
  }

  @Override
  public String toString() {
    if ($toString == null) {
      $toString = "ChangeReservationReconciliationInput{"
        + "propertyId=" + propertyId + ", "
        + "reservationId=" + reservationId + ", "
        + "supplierAmount=" + supplierAmount + ", "
        + "checkInDate=" + checkInDate + ", "
        + "checkOutDate=" + checkOutDate + ", "
        + "reason=" + reason
        + "}";
    }
    return $toString;
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private String propertyId;

    private String reservationId;

    private Optional<SupplierAmountInput> supplierAmount = Optional.absent();

    private LocalDate checkInDate;

    private LocalDate checkOutDate;

    private Optional<ReservationChangeReason> reason = Optional.absent();

    Builder() {
    }

    /**
     * The ID of the property where the change has been requested.
     */
    public Builder propertyId(String propertyId) {
      this.propertyId = propertyId;
      return this;
    }

    /**
     * Identifier associated with the reservation to be changed.
     */
    public Builder reservationId(String reservationId) {
      this.reservationId = reservationId;
      return this;
    }

    /**
     * Updated supplier amount of the reservation.
     */
    public Builder supplierAmount(SupplierAmountInput supplierAmount) {
      this.supplierAmount = Optional.present(supplierAmount);
      return this;
    }

    /**
     * The reconciled check-in date.
     */
    public Builder checkInDate(LocalDate checkInDate) {
      this.checkInDate = checkInDate;
      return this;
    }

    /**
     * The reconciled check-out date.
     */
    public Builder checkOutDate(LocalDate checkOutDate) {
      this.checkOutDate = checkOutDate;
      return this;
    }

    /**
     * The reason for modifying the reservation.
     */
    public Builder reason(ReservationChangeReason reason) {
      this.reason = Optional.present(reason);
      return this;
    }

    public ChangeReservationReconciliationInput build() {
      return new ChangeReservationReconciliationInput(propertyId, reservationId, supplierAmount, checkInDate, checkOutDate, reason);
    }
  }
}
