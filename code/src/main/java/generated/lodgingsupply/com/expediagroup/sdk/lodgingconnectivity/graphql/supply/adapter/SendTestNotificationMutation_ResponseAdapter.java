//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.adapter;

import com.apollographql.apollo.api.Adapter;
import com.apollographql.apollo.api.Adapters;
import com.apollographql.apollo.api.Assertions;
import com.apollographql.apollo.api.CustomScalarAdapters;
import com.apollographql.apollo.api.ObjectAdapter;
import com.apollographql.apollo.api.json.JsonReader;
import com.apollographql.apollo.api.json.JsonWriter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.SendTestNotificationMutation;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.TestNotificationOutcome;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.OptionalAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.OptionalAdapters;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.TestNotificationOutcome_ResponseAdapter;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

public class SendTestNotificationMutation_ResponseAdapter {
  public enum Data implements Adapter<SendTestNotificationMutation.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("sendTestNotification");

    @Override
    public SendTestNotificationMutation.Data fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Optional<SendTestNotificationMutation.SendTestNotification> _sendTestNotification = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _sendTestNotification = new OptionalAdapter<>(new ObjectAdapter<SendTestNotificationMutation.SendTestNotification>(SendTestNotification.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new SendTestNotificationMutation.Data(
        _sendTestNotification
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        SendTestNotificationMutation.Data value) throws IOException {
      writer.name("sendTestNotification");
      new OptionalAdapter<>(new ObjectAdapter<SendTestNotificationMutation.SendTestNotification>(SendTestNotification.INSTANCE, false)).toJson(writer, customScalarAdapters, value.sendTestNotification);
    }
  }

  public enum SendTestNotification implements Adapter<SendTestNotificationMutation.SendTestNotification> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("error", "httpStatusCode", "outcome");

    @Override
    public SendTestNotificationMutation.SendTestNotification fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Optional<SendTestNotificationMutation.Error> _error = null;
      Optional<Integer> _httpStatusCode = null;
      TestNotificationOutcome _outcome = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _error = new OptionalAdapter<>(new ObjectAdapter<SendTestNotificationMutation.Error>(Error.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 1: _httpStatusCode = OptionalAdapters.OptionalIntAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _outcome = TestNotificationOutcome_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_outcome, "outcome");

      return new SendTestNotificationMutation.SendTestNotification(
        _error,
        _httpStatusCode,
        _outcome
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        SendTestNotificationMutation.SendTestNotification value) throws IOException {
      writer.name("error");
      new OptionalAdapter<>(new ObjectAdapter<SendTestNotificationMutation.Error>(Error.INSTANCE, false)).toJson(writer, customScalarAdapters, value.error);

      writer.name("httpStatusCode");
      OptionalAdapters.OptionalIntAdapter.toJson(writer, customScalarAdapters, value.httpStatusCode);

      writer.name("outcome");
      TestNotificationOutcome_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.outcome);
    }
  }

  public enum Error implements Adapter<SendTestNotificationMutation.Error> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("code", "message");

    @Override
    public SendTestNotificationMutation.Error fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _code = null;
      String _message = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _code = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _message = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_code, "code");
      Assertions.checkFieldNotMissing(_message, "message");

      return new SendTestNotificationMutation.Error(
        _code,
        _message
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        SendTestNotificationMutation.Error value) throws IOException {
      writer.name("code");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.code);

      writer.name("message");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.message);
    }
  }
}
