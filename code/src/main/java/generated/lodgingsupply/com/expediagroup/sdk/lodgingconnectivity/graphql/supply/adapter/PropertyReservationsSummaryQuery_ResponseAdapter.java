//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.4'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.adapter;

import com.apollographql.apollo3.api.Adapter;
import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.ListAdapter;
import com.apollographql.apollo3.api.NullableAdapter;
import com.apollographql.apollo3.api.ObjectAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.PropertyReservationsSummaryQuery;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.BusinessModel;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.CancellationPenaltyRuleType;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.CancellationWindowTemporalUnit;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.CurrencyCode;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.DistributionChannel;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.EmailAddress;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.IdSource;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.InventoryType;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.MerchantOfRecord;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.RemittanceType;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.ReservationStatus;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.SupplierOperatingModel;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.TravelPurpose;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.VrboCancellationReason;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.BusinessModel_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.CancellationPenaltyRuleType_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.CancellationWindowTemporalUnit_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.DistributionChannel_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.IdSource_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.InventoryType_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.MerchantOfRecord_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.RemittanceType_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.ReservationStatus_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.SupplierOperatingModel_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.TravelPurpose_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.VrboCancellationReason_ResponseAdapter;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

public class PropertyReservationsSummaryQuery_ResponseAdapter {
  public enum Data implements Adapter<PropertyReservationsSummaryQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("property");

    @Override
    public PropertyReservationsSummaryQuery.Data fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      PropertyReservationsSummaryQuery.Property _property = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _property = new NullableAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.Property>(Property.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new PropertyReservationsSummaryQuery.Data(
        _property
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.Data value) throws IOException {
      writer.name("property");
      new NullableAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.Property>(Property.INSTANCE, false)).toJson(writer, customScalarAdapters, value.property);
    }
  }

  public enum Property implements Adapter<PropertyReservationsSummaryQuery.Property> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("reservations");

    @Override
    public PropertyReservationsSummaryQuery.Property fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      PropertyReservationsSummaryQuery.Reservations _reservations = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _reservations = new ObjectAdapter<PropertyReservationsSummaryQuery.Reservations>(Reservations.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_reservations, "reservations");

      return new PropertyReservationsSummaryQuery.Property(
        _reservations
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.Property value) throws IOException {
      writer.name("reservations");
      new ObjectAdapter<PropertyReservationsSummaryQuery.Reservations>(Reservations.INSTANCE, false).toJson(writer, customScalarAdapters, value.reservations);
    }
  }

  public enum Reservations implements Adapter<PropertyReservationsSummaryQuery.Reservations> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("totalCount", "pageInfo", "edges");

    @Override
    public PropertyReservationsSummaryQuery.Reservations fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Integer _totalCount = null;
      PropertyReservationsSummaryQuery.PageInfo _pageInfo = null;
      List<PropertyReservationsSummaryQuery.Edge> _edges = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _totalCount = Adapters.NullableIntAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _pageInfo = new NullableAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.PageInfo>(PageInfo.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 2: _edges = new ListAdapter<>(new NullableAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.Edge>(Edge.INSTANCE, false))).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_edges, "edges");

      return new PropertyReservationsSummaryQuery.Reservations(
        _totalCount,
        _pageInfo,
        _edges
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.Reservations value) throws IOException {
      writer.name("totalCount");
      Adapters.NullableIntAdapter.toJson(writer, customScalarAdapters, value.totalCount);

      writer.name("pageInfo");
      new NullableAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.PageInfo>(PageInfo.INSTANCE, false)).toJson(writer, customScalarAdapters, value.pageInfo);

      writer.name("edges");
      new ListAdapter<>(new NullableAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.Edge>(Edge.INSTANCE, false))).toJson(writer, customScalarAdapters, value.edges);
    }
  }

  public enum PageInfo implements Adapter<PropertyReservationsSummaryQuery.PageInfo> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("endCursor", "hasNextPage");

    @Override
    public PropertyReservationsSummaryQuery.PageInfo fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _endCursor = null;
      Boolean _hasNextPage = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _endCursor = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _hasNextPage = Adapters.BooleanAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_hasNextPage, "hasNextPage");

      return new PropertyReservationsSummaryQuery.PageInfo(
        _endCursor,
        _hasNextPage
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.PageInfo value) throws IOException {
      writer.name("endCursor");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.endCursor);

      writer.name("hasNextPage");
      Adapters.BooleanAdapter.toJson(writer, customScalarAdapters, value.hasNextPage);
    }
  }

  public enum Edge implements Adapter<PropertyReservationsSummaryQuery.Edge> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("cursor", "node");

    @Override
    public PropertyReservationsSummaryQuery.Edge fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _cursor = null;
      PropertyReservationsSummaryQuery.Node _node = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _cursor = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _node = new ObjectAdapter<PropertyReservationsSummaryQuery.Node>(Node.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_cursor, "cursor");
      Assertions.checkFieldNotMissing(_node, "node");

      return new PropertyReservationsSummaryQuery.Edge(
        _cursor,
        _node
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.Edge value) throws IOException {
      writer.name("cursor");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.cursor);

      writer.name("node");
      new ObjectAdapter<PropertyReservationsSummaryQuery.Node>(Node.INSTANCE, false).toJson(writer, customScalarAdapters, value.node);
    }
  }

  public enum Node implements Adapter<PropertyReservationsSummaryQuery.Node> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id", "alternativeIds", "accessibilityText", "adultCount", "audit", "bedTypes", "businessModel", "cancellation", "cancellationPolicy", "checkInDate", "checkOutDate", "childAges", "childCount", "creationDateTime", "distribution", "guests", "inventoryType", "isReconciled", "lastUpdatedDateTime", "merchantOfRecord", "messageThreadId", "multiRoomText", "paymentInstructions", "petCount", "policies", "primaryGuest", "rateIds", "reconciliationEligibility", "reconciliationType", "remittanceType", "reservationIds", "smokingType", "source", "specialRequest", "status", "statuses", "stayDates", "subStatus", "supplierOperatingModel", "tidsCode", "totalGuestCount", "unitIds", "valueAddedPromotions");

    @Override
    public PropertyReservationsSummaryQuery.Node fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _id = null;
      PropertyReservationsSummaryQuery.AlternativeIds _alternativeIds = null;
      List<String> _accessibilityText = null;
      Integer _adultCount = null;
      PropertyReservationsSummaryQuery.Audit _audit = null;
      String _bedTypes = null;
      BusinessModel _businessModel = null;
      PropertyReservationsSummaryQuery.Cancellation _cancellation = null;
      PropertyReservationsSummaryQuery.CancellationPolicy _cancellationPolicy = null;
      LocalDate _checkInDate = null;
      LocalDate _checkOutDate = null;
      List<Integer> _childAges = null;
      Integer _childCount = null;
      String _creationDateTime = null;
      PropertyReservationsSummaryQuery.Distribution _distribution = null;
      PropertyReservationsSummaryQuery.Guests _guests = null;
      InventoryType _inventoryType = null;
      Boolean _isReconciled = null;
      String _lastUpdatedDateTime = null;
      MerchantOfRecord _merchantOfRecord = null;
      String _messageThreadId = null;
      String _multiRoomText = null;
      String _paymentInstructions = null;
      Integer _petCount = null;
      PropertyReservationsSummaryQuery.Policies _policies = null;
      PropertyReservationsSummaryQuery.PrimaryGuest1 _primaryGuest = null;
      List<PropertyReservationsSummaryQuery.RateId> _rateIds = null;
      PropertyReservationsSummaryQuery.ReconciliationEligibility _reconciliationEligibility = null;
      String _reconciliationType = null;
      RemittanceType _remittanceType = null;
      List<PropertyReservationsSummaryQuery.ReservationId> _reservationIds = null;
      String _smokingType = null;
      String _source = null;
      String _specialRequest = null;
      ReservationStatus _status = null;
      PropertyReservationsSummaryQuery.Statuses _statuses = null;
      PropertyReservationsSummaryQuery.StayDates _stayDates = null;
      String _subStatus = null;
      SupplierOperatingModel _supplierOperatingModel = null;
      Integer _tidsCode = null;
      Integer _totalGuestCount = null;
      List<PropertyReservationsSummaryQuery.UnitId> _unitIds = null;
      List<PropertyReservationsSummaryQuery.ValueAddedPromotion> _valueAddedPromotions = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _id = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _alternativeIds = new ObjectAdapter<PropertyReservationsSummaryQuery.AlternativeIds>(AlternativeIds.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 2: _accessibilityText = new NullableAdapter<>(new ListAdapter<>(Adapters.StringAdapter)).fromJson(reader, customScalarAdapters); break;
          case 3: _adultCount = Adapters.IntAdapter.fromJson(reader, customScalarAdapters); break;
          case 4: _audit = new ObjectAdapter<PropertyReservationsSummaryQuery.Audit>(Audit.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 5: _bedTypes = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 6: _businessModel = BusinessModel_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          case 7: _cancellation = new NullableAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.Cancellation>(Cancellation.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 8: _cancellationPolicy = new NullableAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.CancellationPolicy>(CancellationPolicy.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 9: _checkInDate = com.apollographql.apollo3.adapter.JavaLocalDateAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          case 10: _checkOutDate = com.apollographql.apollo3.adapter.JavaLocalDateAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          case 11: _childAges = new NullableAdapter<>(new ListAdapter<>(Adapters.NullableIntAdapter)).fromJson(reader, customScalarAdapters); break;
          case 12: _childCount = Adapters.IntAdapter.fromJson(reader, customScalarAdapters); break;
          case 13: _creationDateTime = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 14: _distribution = new ObjectAdapter<PropertyReservationsSummaryQuery.Distribution>(Distribution.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 15: _guests = new ObjectAdapter<PropertyReservationsSummaryQuery.Guests>(Guests.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 16: _inventoryType = new NullableAdapter<>(InventoryType_ResponseAdapter.INSTANCE).fromJson(reader, customScalarAdapters); break;
          case 17: _isReconciled = Adapters.NullableBooleanAdapter.fromJson(reader, customScalarAdapters); break;
          case 18: _lastUpdatedDateTime = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 19: _merchantOfRecord = MerchantOfRecord_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          case 20: _messageThreadId = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 21: _multiRoomText = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 22: _paymentInstructions = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 23: _petCount = Adapters.NullableIntAdapter.fromJson(reader, customScalarAdapters); break;
          case 24: _policies = new ObjectAdapter<PropertyReservationsSummaryQuery.Policies>(Policies.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 25: _primaryGuest = new ObjectAdapter<PropertyReservationsSummaryQuery.PrimaryGuest1>(PrimaryGuest1.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 26: _rateIds = new ListAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.RateId>(RateId.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 27: _reconciliationEligibility = new NullableAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.ReconciliationEligibility>(ReconciliationEligibility.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 28: _reconciliationType = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 29: _remittanceType = new NullableAdapter<>(RemittanceType_ResponseAdapter.INSTANCE).fromJson(reader, customScalarAdapters); break;
          case 30: _reservationIds = new ListAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.ReservationId>(ReservationId.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 31: _smokingType = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 32: _source = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 33: _specialRequest = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 34: _status = ReservationStatus_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          case 35: _statuses = new ObjectAdapter<PropertyReservationsSummaryQuery.Statuses>(Statuses.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 36: _stayDates = new ObjectAdapter<PropertyReservationsSummaryQuery.StayDates>(StayDates.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 37: _subStatus = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 38: _supplierOperatingModel = new NullableAdapter<>(SupplierOperatingModel_ResponseAdapter.INSTANCE).fromJson(reader, customScalarAdapters); break;
          case 39: _tidsCode = Adapters.NullableIntAdapter.fromJson(reader, customScalarAdapters); break;
          case 40: _totalGuestCount = Adapters.IntAdapter.fromJson(reader, customScalarAdapters); break;
          case 41: _unitIds = new ListAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.UnitId>(UnitId.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 42: _valueAddedPromotions = new ListAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.ValueAddedPromotion>(ValueAddedPromotion.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_id, "id");
      Assertions.checkFieldNotMissing(_alternativeIds, "alternativeIds");
      Assertions.checkFieldNotMissing(_adultCount, "adultCount");
      Assertions.checkFieldNotMissing(_audit, "audit");
      Assertions.checkFieldNotMissing(_businessModel, "businessModel");
      Assertions.checkFieldNotMissing(_checkInDate, "checkInDate");
      Assertions.checkFieldNotMissing(_checkOutDate, "checkOutDate");
      Assertions.checkFieldNotMissing(_childCount, "childCount");
      Assertions.checkFieldNotMissing(_creationDateTime, "creationDateTime");
      Assertions.checkFieldNotMissing(_distribution, "distribution");
      Assertions.checkFieldNotMissing(_guests, "guests");
      Assertions.checkFieldNotMissing(_lastUpdatedDateTime, "lastUpdatedDateTime");
      Assertions.checkFieldNotMissing(_merchantOfRecord, "merchantOfRecord");
      Assertions.checkFieldNotMissing(_paymentInstructions, "paymentInstructions");
      Assertions.checkFieldNotMissing(_policies, "policies");
      Assertions.checkFieldNotMissing(_primaryGuest, "primaryGuest");
      Assertions.checkFieldNotMissing(_rateIds, "rateIds");
      Assertions.checkFieldNotMissing(_reservationIds, "reservationIds");
      Assertions.checkFieldNotMissing(_smokingType, "smokingType");
      Assertions.checkFieldNotMissing(_source, "source");
      Assertions.checkFieldNotMissing(_status, "status");
      Assertions.checkFieldNotMissing(_statuses, "statuses");
      Assertions.checkFieldNotMissing(_stayDates, "stayDates");
      Assertions.checkFieldNotMissing(_totalGuestCount, "totalGuestCount");
      Assertions.checkFieldNotMissing(_unitIds, "unitIds");
      Assertions.checkFieldNotMissing(_valueAddedPromotions, "valueAddedPromotions");

      return new PropertyReservationsSummaryQuery.Node(
        _id,
        _alternativeIds,
        _accessibilityText,
        _adultCount,
        _audit,
        _bedTypes,
        _businessModel,
        _cancellation,
        _cancellationPolicy,
        _checkInDate,
        _checkOutDate,
        _childAges,
        _childCount,
        _creationDateTime,
        _distribution,
        _guests,
        _inventoryType,
        _isReconciled,
        _lastUpdatedDateTime,
        _merchantOfRecord,
        _messageThreadId,
        _multiRoomText,
        _paymentInstructions,
        _petCount,
        _policies,
        _primaryGuest,
        _rateIds,
        _reconciliationEligibility,
        _reconciliationType,
        _remittanceType,
        _reservationIds,
        _smokingType,
        _source,
        _specialRequest,
        _status,
        _statuses,
        _stayDates,
        _subStatus,
        _supplierOperatingModel,
        _tidsCode,
        _totalGuestCount,
        _unitIds,
        _valueAddedPromotions
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.Node value) throws IOException {
      writer.name("id");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.id);

      writer.name("alternativeIds");
      new ObjectAdapter<PropertyReservationsSummaryQuery.AlternativeIds>(AlternativeIds.INSTANCE, false).toJson(writer, customScalarAdapters, value.alternativeIds);

      writer.name("accessibilityText");
      new NullableAdapter<>(new ListAdapter<>(Adapters.StringAdapter)).toJson(writer, customScalarAdapters, value.accessibilityText);

      writer.name("adultCount");
      Adapters.IntAdapter.toJson(writer, customScalarAdapters, value.adultCount);

      writer.name("audit");
      new ObjectAdapter<PropertyReservationsSummaryQuery.Audit>(Audit.INSTANCE, false).toJson(writer, customScalarAdapters, value.audit);

      writer.name("bedTypes");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.bedTypes);

      writer.name("businessModel");
      BusinessModel_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.businessModel);

      writer.name("cancellation");
      new NullableAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.Cancellation>(Cancellation.INSTANCE, false)).toJson(writer, customScalarAdapters, value.cancellation);

      writer.name("cancellationPolicy");
      new NullableAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.CancellationPolicy>(CancellationPolicy.INSTANCE, false)).toJson(writer, customScalarAdapters, value.cancellationPolicy);

      writer.name("checkInDate");
      com.apollographql.apollo3.adapter.JavaLocalDateAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.checkInDate);

      writer.name("checkOutDate");
      com.apollographql.apollo3.adapter.JavaLocalDateAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.checkOutDate);

      writer.name("childAges");
      new NullableAdapter<>(new ListAdapter<>(Adapters.NullableIntAdapter)).toJson(writer, customScalarAdapters, value.childAges);

      writer.name("childCount");
      Adapters.IntAdapter.toJson(writer, customScalarAdapters, value.childCount);

      writer.name("creationDateTime");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.creationDateTime);

      writer.name("distribution");
      new ObjectAdapter<PropertyReservationsSummaryQuery.Distribution>(Distribution.INSTANCE, false).toJson(writer, customScalarAdapters, value.distribution);

      writer.name("guests");
      new ObjectAdapter<PropertyReservationsSummaryQuery.Guests>(Guests.INSTANCE, false).toJson(writer, customScalarAdapters, value.guests);

      writer.name("inventoryType");
      new NullableAdapter<>(InventoryType_ResponseAdapter.INSTANCE).toJson(writer, customScalarAdapters, value.inventoryType);

      writer.name("isReconciled");
      Adapters.NullableBooleanAdapter.toJson(writer, customScalarAdapters, value.isReconciled);

      writer.name("lastUpdatedDateTime");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.lastUpdatedDateTime);

      writer.name("merchantOfRecord");
      MerchantOfRecord_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.merchantOfRecord);

      writer.name("messageThreadId");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.messageThreadId);

      writer.name("multiRoomText");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.multiRoomText);

      writer.name("paymentInstructions");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.paymentInstructions);

      writer.name("petCount");
      Adapters.NullableIntAdapter.toJson(writer, customScalarAdapters, value.petCount);

      writer.name("policies");
      new ObjectAdapter<PropertyReservationsSummaryQuery.Policies>(Policies.INSTANCE, false).toJson(writer, customScalarAdapters, value.policies);

      writer.name("primaryGuest");
      new ObjectAdapter<PropertyReservationsSummaryQuery.PrimaryGuest1>(PrimaryGuest1.INSTANCE, false).toJson(writer, customScalarAdapters, value.primaryGuest);

      writer.name("rateIds");
      new ListAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.RateId>(RateId.INSTANCE, false)).toJson(writer, customScalarAdapters, value.rateIds);

      writer.name("reconciliationEligibility");
      new NullableAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.ReconciliationEligibility>(ReconciliationEligibility.INSTANCE, false)).toJson(writer, customScalarAdapters, value.reconciliationEligibility);

      writer.name("reconciliationType");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.reconciliationType);

      writer.name("remittanceType");
      new NullableAdapter<>(RemittanceType_ResponseAdapter.INSTANCE).toJson(writer, customScalarAdapters, value.remittanceType);

      writer.name("reservationIds");
      new ListAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.ReservationId>(ReservationId.INSTANCE, false)).toJson(writer, customScalarAdapters, value.reservationIds);

      writer.name("smokingType");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.smokingType);

      writer.name("source");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.source);

      writer.name("specialRequest");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.specialRequest);

      writer.name("status");
      ReservationStatus_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.status);

      writer.name("statuses");
      new ObjectAdapter<PropertyReservationsSummaryQuery.Statuses>(Statuses.INSTANCE, false).toJson(writer, customScalarAdapters, value.statuses);

      writer.name("stayDates");
      new ObjectAdapter<PropertyReservationsSummaryQuery.StayDates>(StayDates.INSTANCE, false).toJson(writer, customScalarAdapters, value.stayDates);

      writer.name("subStatus");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.subStatus);

      writer.name("supplierOperatingModel");
      new NullableAdapter<>(SupplierOperatingModel_ResponseAdapter.INSTANCE).toJson(writer, customScalarAdapters, value.supplierOperatingModel);

      writer.name("tidsCode");
      Adapters.NullableIntAdapter.toJson(writer, customScalarAdapters, value.tidsCode);

      writer.name("totalGuestCount");
      Adapters.IntAdapter.toJson(writer, customScalarAdapters, value.totalGuestCount);

      writer.name("unitIds");
      new ListAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.UnitId>(UnitId.INSTANCE, false)).toJson(writer, customScalarAdapters, value.unitIds);

      writer.name("valueAddedPromotions");
      new ListAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.ValueAddedPromotion>(ValueAddedPromotion.INSTANCE, false)).toJson(writer, customScalarAdapters, value.valueAddedPromotions);
    }
  }

  public enum AlternativeIds implements Adapter<PropertyReservationsSummaryQuery.AlternativeIds> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("supplierId");

    @Override
    public PropertyReservationsSummaryQuery.AlternativeIds fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _supplierId = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _supplierId = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_supplierId, "supplierId");

      return new PropertyReservationsSummaryQuery.AlternativeIds(
        _supplierId
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.AlternativeIds value) throws IOException {
      writer.name("supplierId");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.supplierId);
    }
  }

  public enum Audit implements Adapter<PropertyReservationsSummaryQuery.Audit> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("creationDateTimeUtc", "lastUpdateDateTimeUtc");

    @Override
    public PropertyReservationsSummaryQuery.Audit fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _creationDateTimeUtc = null;
      String _lastUpdateDateTimeUtc = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _creationDateTimeUtc = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _lastUpdateDateTimeUtc = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_creationDateTimeUtc, "creationDateTimeUtc");
      Assertions.checkFieldNotMissing(_lastUpdateDateTimeUtc, "lastUpdateDateTimeUtc");

      return new PropertyReservationsSummaryQuery.Audit(
        _creationDateTimeUtc,
        _lastUpdateDateTimeUtc
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.Audit value) throws IOException {
      writer.name("creationDateTimeUtc");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.creationDateTimeUtc);

      writer.name("lastUpdateDateTimeUtc");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.lastUpdateDateTimeUtc);
    }
  }

  public enum Cancellation implements Adapter<PropertyReservationsSummaryQuery.Cancellation> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("pendingCancellation", "vrboPrimaryReason");

    @Override
    public PropertyReservationsSummaryQuery.Cancellation fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Boolean _pendingCancellation = null;
      VrboCancellationReason _vrboPrimaryReason = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _pendingCancellation = Adapters.BooleanAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _vrboPrimaryReason = new NullableAdapter<>(VrboCancellationReason_ResponseAdapter.INSTANCE).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_pendingCancellation, "pendingCancellation");

      return new PropertyReservationsSummaryQuery.Cancellation(
        _pendingCancellation,
        _vrboPrimaryReason
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.Cancellation value) throws IOException {
      writer.name("pendingCancellation");
      Adapters.BooleanAdapter.toJson(writer, customScalarAdapters, value.pendingCancellation);

      writer.name("vrboPrimaryReason");
      new NullableAdapter<>(VrboCancellationReason_ResponseAdapter.INSTANCE).toJson(writer, customScalarAdapters, value.vrboPrimaryReason);
    }
  }

  public enum CancellationPolicy implements Adapter<PropertyReservationsSummaryQuery.CancellationPolicy> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("effectivePolicy", "tiers");

    @Override
    public PropertyReservationsSummaryQuery.CancellationPolicy fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      PropertyReservationsSummaryQuery.EffectivePolicy _effectivePolicy = null;
      List<PropertyReservationsSummaryQuery.Tier> _tiers = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _effectivePolicy = new NullableAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.EffectivePolicy>(EffectivePolicy.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 1: _tiers = new NullableAdapter<>(new ListAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.Tier>(Tier.INSTANCE, false))).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new PropertyReservationsSummaryQuery.CancellationPolicy(
        _effectivePolicy,
        _tiers
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.CancellationPolicy value) throws IOException {
      writer.name("effectivePolicy");
      new NullableAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.EffectivePolicy>(EffectivePolicy.INSTANCE, false)).toJson(writer, customScalarAdapters, value.effectivePolicy);

      writer.name("tiers");
      new NullableAdapter<>(new ListAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.Tier>(Tier.INSTANCE, false))).toJson(writer, customScalarAdapters, value.tiers);
    }
  }

  public enum EffectivePolicy implements Adapter<PropertyReservationsSummaryQuery.EffectivePolicy> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("endDateTimeUtc", "policyType", "startDateTimeUtc");

    @Override
    public PropertyReservationsSummaryQuery.EffectivePolicy fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Object _endDateTimeUtc = null;
      String _policyType = null;
      Object _startDateTimeUtc = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _endDateTimeUtc = Adapters.AnyAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _policyType = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _startDateTimeUtc = Adapters.AnyAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_endDateTimeUtc, "endDateTimeUtc");
      Assertions.checkFieldNotMissing(_policyType, "policyType");
      Assertions.checkFieldNotMissing(_startDateTimeUtc, "startDateTimeUtc");

      return new PropertyReservationsSummaryQuery.EffectivePolicy(
        _endDateTimeUtc,
        _policyType,
        _startDateTimeUtc
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.EffectivePolicy value) throws IOException {
      writer.name("endDateTimeUtc");
      Adapters.AnyAdapter.toJson(writer, customScalarAdapters, value.endDateTimeUtc);

      writer.name("policyType");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.policyType);

      writer.name("startDateTimeUtc");
      Adapters.AnyAdapter.toJson(writer, customScalarAdapters, value.startDateTimeUtc);
    }
  }

  public enum Tier implements Adapter<PropertyReservationsSummaryQuery.Tier> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("cancellationWindow", "penaltyRule");

    @Override
    public PropertyReservationsSummaryQuery.Tier fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      PropertyReservationsSummaryQuery.CancellationWindow _cancellationWindow = null;
      PropertyReservationsSummaryQuery.PenaltyRule _penaltyRule = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _cancellationWindow = new ObjectAdapter<PropertyReservationsSummaryQuery.CancellationWindow>(CancellationWindow.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 1: _penaltyRule = new ObjectAdapter<PropertyReservationsSummaryQuery.PenaltyRule>(PenaltyRule.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_cancellationWindow, "cancellationWindow");
      Assertions.checkFieldNotMissing(_penaltyRule, "penaltyRule");

      return new PropertyReservationsSummaryQuery.Tier(
        _cancellationWindow,
        _penaltyRule
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.Tier value) throws IOException {
      writer.name("cancellationWindow");
      new ObjectAdapter<PropertyReservationsSummaryQuery.CancellationWindow>(CancellationWindow.INSTANCE, false).toJson(writer, customScalarAdapters, value.cancellationWindow);

      writer.name("penaltyRule");
      new ObjectAdapter<PropertyReservationsSummaryQuery.PenaltyRule>(PenaltyRule.INSTANCE, false).toJson(writer, customScalarAdapters, value.penaltyRule);
    }
  }

  public enum CancellationWindow implements Adapter<PropertyReservationsSummaryQuery.CancellationWindow> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("cutoff", "temporalUnit");

    @Override
    public PropertyReservationsSummaryQuery.CancellationWindow fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Integer _cutoff = null;
      CancellationWindowTemporalUnit _temporalUnit = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _cutoff = Adapters.IntAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _temporalUnit = CancellationWindowTemporalUnit_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_cutoff, "cutoff");
      Assertions.checkFieldNotMissing(_temporalUnit, "temporalUnit");

      return new PropertyReservationsSummaryQuery.CancellationWindow(
        _cutoff,
        _temporalUnit
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.CancellationWindow value) throws IOException {
      writer.name("cutoff");
      Adapters.IntAdapter.toJson(writer, customScalarAdapters, value.cutoff);

      writer.name("temporalUnit");
      CancellationWindowTemporalUnit_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.temporalUnit);
    }
  }

  public enum PenaltyRule implements Adapter<PropertyReservationsSummaryQuery.PenaltyRule> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("costFlatAmount", "numberOfNights", "percentage", "priceAmount", "type");

    @Override
    public PropertyReservationsSummaryQuery.PenaltyRule fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      PropertyReservationsSummaryQuery.CostFlatAmount _costFlatAmount = null;
      Integer _numberOfNights = null;
      Double _percentage = null;
      PropertyReservationsSummaryQuery.PriceAmount _priceAmount = null;
      CancellationPenaltyRuleType _type = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _costFlatAmount = new NullableAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.CostFlatAmount>(CostFlatAmount.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 1: _numberOfNights = Adapters.NullableIntAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _percentage = Adapters.NullableDoubleAdapter.fromJson(reader, customScalarAdapters); break;
          case 3: _priceAmount = new NullableAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.PriceAmount>(PriceAmount.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 4: _type = CancellationPenaltyRuleType_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_type, "type");

      return new PropertyReservationsSummaryQuery.PenaltyRule(
        _costFlatAmount,
        _numberOfNights,
        _percentage,
        _priceAmount,
        _type
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.PenaltyRule value) throws IOException {
      writer.name("costFlatAmount");
      new NullableAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.CostFlatAmount>(CostFlatAmount.INSTANCE, false)).toJson(writer, customScalarAdapters, value.costFlatAmount);

      writer.name("numberOfNights");
      Adapters.NullableIntAdapter.toJson(writer, customScalarAdapters, value.numberOfNights);

      writer.name("percentage");
      Adapters.NullableDoubleAdapter.toJson(writer, customScalarAdapters, value.percentage);

      writer.name("priceAmount");
      new NullableAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.PriceAmount>(PriceAmount.INSTANCE, false)).toJson(writer, customScalarAdapters, value.priceAmount);

      writer.name("type");
      CancellationPenaltyRuleType_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.type);
    }
  }

  public enum CostFlatAmount implements Adapter<PropertyReservationsSummaryQuery.CostFlatAmount> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("amount", "currencyCode");

    @Override
    public PropertyReservationsSummaryQuery.CostFlatAmount fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Object _amount = null;
      String _currencyCode = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _amount = Adapters.AnyAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _currencyCode = (customScalarAdapters.<String>responseAdapterFor(CurrencyCode.type)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_amount, "amount");
      Assertions.checkFieldNotMissing(_currencyCode, "currencyCode");

      return new PropertyReservationsSummaryQuery.CostFlatAmount(
        _amount,
        _currencyCode
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.CostFlatAmount value) throws IOException {
      writer.name("amount");
      Adapters.AnyAdapter.toJson(writer, customScalarAdapters, value.amount);

      writer.name("currencyCode");
      (customScalarAdapters.<String>responseAdapterFor(CurrencyCode.type)).toJson(writer, customScalarAdapters, value.currencyCode);
    }
  }

  public enum PriceAmount implements Adapter<PropertyReservationsSummaryQuery.PriceAmount> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("amount", "currencyCode");

    @Override
    public PropertyReservationsSummaryQuery.PriceAmount fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Object _amount = null;
      String _currencyCode = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _amount = Adapters.AnyAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _currencyCode = (customScalarAdapters.<String>responseAdapterFor(CurrencyCode.type)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_amount, "amount");
      Assertions.checkFieldNotMissing(_currencyCode, "currencyCode");

      return new PropertyReservationsSummaryQuery.PriceAmount(
        _amount,
        _currencyCode
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.PriceAmount value) throws IOException {
      writer.name("amount");
      Adapters.AnyAdapter.toJson(writer, customScalarAdapters, value.amount);

      writer.name("currencyCode");
      (customScalarAdapters.<String>responseAdapterFor(CurrencyCode.type)).toJson(writer, customScalarAdapters, value.currencyCode);
    }
  }

  public enum Distribution implements Adapter<PropertyReservationsSummaryQuery.Distribution> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("distributionChannel", "reservationSource");

    @Override
    public PropertyReservationsSummaryQuery.Distribution fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      DistributionChannel _distributionChannel = null;
      String _reservationSource = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _distributionChannel = DistributionChannel_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          case 1: _reservationSource = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_distributionChannel, "distributionChannel");

      return new PropertyReservationsSummaryQuery.Distribution(
        _distributionChannel,
        _reservationSource
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.Distribution value) throws IOException {
      writer.name("distributionChannel");
      DistributionChannel_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.distributionChannel);

      writer.name("reservationSource");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.reservationSource);
    }
  }

  public enum Guests implements Adapter<PropertyReservationsSummaryQuery.Guests> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("adultCount", "childCount", "pets", "primaryGuest");

    @Override
    public PropertyReservationsSummaryQuery.Guests fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Integer _adultCount = null;
      Integer _childCount = null;
      PropertyReservationsSummaryQuery.Pets _pets = null;
      PropertyReservationsSummaryQuery.PrimaryGuest _primaryGuest = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _adultCount = Adapters.IntAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _childCount = Adapters.IntAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _pets = new NullableAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.Pets>(Pets.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 3: _primaryGuest = new ObjectAdapter<PropertyReservationsSummaryQuery.PrimaryGuest>(PrimaryGuest.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_adultCount, "adultCount");
      Assertions.checkFieldNotMissing(_childCount, "childCount");
      Assertions.checkFieldNotMissing(_primaryGuest, "primaryGuest");

      return new PropertyReservationsSummaryQuery.Guests(
        _adultCount,
        _childCount,
        _pets,
        _primaryGuest
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.Guests value) throws IOException {
      writer.name("adultCount");
      Adapters.IntAdapter.toJson(writer, customScalarAdapters, value.adultCount);

      writer.name("childCount");
      Adapters.IntAdapter.toJson(writer, customScalarAdapters, value.childCount);

      writer.name("pets");
      new NullableAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.Pets>(Pets.INSTANCE, false)).toJson(writer, customScalarAdapters, value.pets);

      writer.name("primaryGuest");
      new ObjectAdapter<PropertyReservationsSummaryQuery.PrimaryGuest>(PrimaryGuest.INSTANCE, false).toJson(writer, customScalarAdapters, value.primaryGuest);
    }
  }

  public enum Pets implements Adapter<PropertyReservationsSummaryQuery.Pets> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("travelingWithPets");

    @Override
    public PropertyReservationsSummaryQuery.Pets fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Boolean _travelingWithPets = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _travelingWithPets = Adapters.BooleanAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_travelingWithPets, "travelingWithPets");

      return new PropertyReservationsSummaryQuery.Pets(
        _travelingWithPets
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.Pets value) throws IOException {
      writer.name("travelingWithPets");
      Adapters.BooleanAdapter.toJson(writer, customScalarAdapters, value.travelingWithPets);
    }
  }

  public enum PrimaryGuest implements Adapter<PropertyReservationsSummaryQuery.PrimaryGuest> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("firstName", "lastName", "emailAddress", "fullPhoneNumber");

    @Override
    public PropertyReservationsSummaryQuery.PrimaryGuest fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _firstName = null;
      String _lastName = null;
      String _emailAddress = null;
      String _fullPhoneNumber = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _firstName = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _lastName = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _emailAddress = (customScalarAdapters.<String>responseAdapterFor(EmailAddress.type)).fromJson(reader, customScalarAdapters); break;
          case 3: _fullPhoneNumber = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_emailAddress, "emailAddress");

      return new PropertyReservationsSummaryQuery.PrimaryGuest(
        _firstName,
        _lastName,
        _emailAddress,
        _fullPhoneNumber
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.PrimaryGuest value) throws IOException {
      writer.name("firstName");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.firstName);

      writer.name("lastName");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.lastName);

      writer.name("emailAddress");
      (customScalarAdapters.<String>responseAdapterFor(EmailAddress.type)).toJson(writer, customScalarAdapters, value.emailAddress);

      writer.name("fullPhoneNumber");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.fullPhoneNumber);
    }
  }

  public enum Policies implements Adapter<PropertyReservationsSummaryQuery.Policies> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("cancellationPolicy");

    @Override
    public PropertyReservationsSummaryQuery.Policies fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      PropertyReservationsSummaryQuery.CancellationPolicy1 _cancellationPolicy = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _cancellationPolicy = new ObjectAdapter<PropertyReservationsSummaryQuery.CancellationPolicy1>(CancellationPolicy1.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_cancellationPolicy, "cancellationPolicy");

      return new PropertyReservationsSummaryQuery.Policies(
        _cancellationPolicy
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.Policies value) throws IOException {
      writer.name("cancellationPolicy");
      new ObjectAdapter<PropertyReservationsSummaryQuery.CancellationPolicy1>(CancellationPolicy1.INSTANCE, false).toJson(writer, customScalarAdapters, value.cancellationPolicy);
    }
  }

  public enum CancellationPolicy1 implements Adapter<PropertyReservationsSummaryQuery.CancellationPolicy1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("effectivePolicy", "tiers");

    @Override
    public PropertyReservationsSummaryQuery.CancellationPolicy1 fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      PropertyReservationsSummaryQuery.EffectivePolicy1 _effectivePolicy = null;
      List<PropertyReservationsSummaryQuery.Tier1> _tiers = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _effectivePolicy = new NullableAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.EffectivePolicy1>(EffectivePolicy1.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 1: _tiers = new NullableAdapter<>(new ListAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.Tier1>(Tier1.INSTANCE, false))).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new PropertyReservationsSummaryQuery.CancellationPolicy1(
        _effectivePolicy,
        _tiers
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.CancellationPolicy1 value) throws IOException {
      writer.name("effectivePolicy");
      new NullableAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.EffectivePolicy1>(EffectivePolicy1.INSTANCE, false)).toJson(writer, customScalarAdapters, value.effectivePolicy);

      writer.name("tiers");
      new NullableAdapter<>(new ListAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.Tier1>(Tier1.INSTANCE, false))).toJson(writer, customScalarAdapters, value.tiers);
    }
  }

  public enum EffectivePolicy1 implements Adapter<PropertyReservationsSummaryQuery.EffectivePolicy1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("endDateTimeUtc", "policyType", "startDateTimeUtc");

    @Override
    public PropertyReservationsSummaryQuery.EffectivePolicy1 fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Object _endDateTimeUtc = null;
      String _policyType = null;
      Object _startDateTimeUtc = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _endDateTimeUtc = Adapters.AnyAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _policyType = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _startDateTimeUtc = Adapters.AnyAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_endDateTimeUtc, "endDateTimeUtc");
      Assertions.checkFieldNotMissing(_policyType, "policyType");
      Assertions.checkFieldNotMissing(_startDateTimeUtc, "startDateTimeUtc");

      return new PropertyReservationsSummaryQuery.EffectivePolicy1(
        _endDateTimeUtc,
        _policyType,
        _startDateTimeUtc
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.EffectivePolicy1 value) throws IOException {
      writer.name("endDateTimeUtc");
      Adapters.AnyAdapter.toJson(writer, customScalarAdapters, value.endDateTimeUtc);

      writer.name("policyType");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.policyType);

      writer.name("startDateTimeUtc");
      Adapters.AnyAdapter.toJson(writer, customScalarAdapters, value.startDateTimeUtc);
    }
  }

  public enum Tier1 implements Adapter<PropertyReservationsSummaryQuery.Tier1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("cancellationWindow", "penaltyRule");

    @Override
    public PropertyReservationsSummaryQuery.Tier1 fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      PropertyReservationsSummaryQuery.CancellationWindow1 _cancellationWindow = null;
      PropertyReservationsSummaryQuery.PenaltyRule1 _penaltyRule = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _cancellationWindow = new ObjectAdapter<PropertyReservationsSummaryQuery.CancellationWindow1>(CancellationWindow1.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 1: _penaltyRule = new ObjectAdapter<PropertyReservationsSummaryQuery.PenaltyRule1>(PenaltyRule1.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_cancellationWindow, "cancellationWindow");
      Assertions.checkFieldNotMissing(_penaltyRule, "penaltyRule");

      return new PropertyReservationsSummaryQuery.Tier1(
        _cancellationWindow,
        _penaltyRule
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.Tier1 value) throws IOException {
      writer.name("cancellationWindow");
      new ObjectAdapter<PropertyReservationsSummaryQuery.CancellationWindow1>(CancellationWindow1.INSTANCE, false).toJson(writer, customScalarAdapters, value.cancellationWindow);

      writer.name("penaltyRule");
      new ObjectAdapter<PropertyReservationsSummaryQuery.PenaltyRule1>(PenaltyRule1.INSTANCE, false).toJson(writer, customScalarAdapters, value.penaltyRule);
    }
  }

  public enum CancellationWindow1 implements Adapter<PropertyReservationsSummaryQuery.CancellationWindow1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("cutoff", "temporalUnit");

    @Override
    public PropertyReservationsSummaryQuery.CancellationWindow1 fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Integer _cutoff = null;
      CancellationWindowTemporalUnit _temporalUnit = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _cutoff = Adapters.IntAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _temporalUnit = CancellationWindowTemporalUnit_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_cutoff, "cutoff");
      Assertions.checkFieldNotMissing(_temporalUnit, "temporalUnit");

      return new PropertyReservationsSummaryQuery.CancellationWindow1(
        _cutoff,
        _temporalUnit
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.CancellationWindow1 value) throws IOException {
      writer.name("cutoff");
      Adapters.IntAdapter.toJson(writer, customScalarAdapters, value.cutoff);

      writer.name("temporalUnit");
      CancellationWindowTemporalUnit_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.temporalUnit);
    }
  }

  public enum PenaltyRule1 implements Adapter<PropertyReservationsSummaryQuery.PenaltyRule1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("costFlatAmount", "numberOfNights", "percentage", "priceAmount", "type");

    @Override
    public PropertyReservationsSummaryQuery.PenaltyRule1 fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      PropertyReservationsSummaryQuery.CostFlatAmount1 _costFlatAmount = null;
      Integer _numberOfNights = null;
      Double _percentage = null;
      PropertyReservationsSummaryQuery.PriceAmount1 _priceAmount = null;
      CancellationPenaltyRuleType _type = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _costFlatAmount = new NullableAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.CostFlatAmount1>(CostFlatAmount1.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 1: _numberOfNights = Adapters.NullableIntAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _percentage = Adapters.NullableDoubleAdapter.fromJson(reader, customScalarAdapters); break;
          case 3: _priceAmount = new NullableAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.PriceAmount1>(PriceAmount1.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 4: _type = CancellationPenaltyRuleType_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_type, "type");

      return new PropertyReservationsSummaryQuery.PenaltyRule1(
        _costFlatAmount,
        _numberOfNights,
        _percentage,
        _priceAmount,
        _type
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.PenaltyRule1 value) throws IOException {
      writer.name("costFlatAmount");
      new NullableAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.CostFlatAmount1>(CostFlatAmount1.INSTANCE, false)).toJson(writer, customScalarAdapters, value.costFlatAmount);

      writer.name("numberOfNights");
      Adapters.NullableIntAdapter.toJson(writer, customScalarAdapters, value.numberOfNights);

      writer.name("percentage");
      Adapters.NullableDoubleAdapter.toJson(writer, customScalarAdapters, value.percentage);

      writer.name("priceAmount");
      new NullableAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.PriceAmount1>(PriceAmount1.INSTANCE, false)).toJson(writer, customScalarAdapters, value.priceAmount);

      writer.name("type");
      CancellationPenaltyRuleType_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.type);
    }
  }

  public enum CostFlatAmount1 implements Adapter<PropertyReservationsSummaryQuery.CostFlatAmount1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("amount", "currencyCode");

    @Override
    public PropertyReservationsSummaryQuery.CostFlatAmount1 fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Object _amount = null;
      String _currencyCode = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _amount = Adapters.AnyAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _currencyCode = (customScalarAdapters.<String>responseAdapterFor(CurrencyCode.type)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_amount, "amount");
      Assertions.checkFieldNotMissing(_currencyCode, "currencyCode");

      return new PropertyReservationsSummaryQuery.CostFlatAmount1(
        _amount,
        _currencyCode
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.CostFlatAmount1 value) throws IOException {
      writer.name("amount");
      Adapters.AnyAdapter.toJson(writer, customScalarAdapters, value.amount);

      writer.name("currencyCode");
      (customScalarAdapters.<String>responseAdapterFor(CurrencyCode.type)).toJson(writer, customScalarAdapters, value.currencyCode);
    }
  }

  public enum PriceAmount1 implements Adapter<PropertyReservationsSummaryQuery.PriceAmount1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("amount", "currencyCode");

    @Override
    public PropertyReservationsSummaryQuery.PriceAmount1 fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Object _amount = null;
      String _currencyCode = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _amount = Adapters.AnyAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _currencyCode = (customScalarAdapters.<String>responseAdapterFor(CurrencyCode.type)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_amount, "amount");
      Assertions.checkFieldNotMissing(_currencyCode, "currencyCode");

      return new PropertyReservationsSummaryQuery.PriceAmount1(
        _amount,
        _currencyCode
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.PriceAmount1 value) throws IOException {
      writer.name("amount");
      Adapters.AnyAdapter.toJson(writer, customScalarAdapters, value.amount);

      writer.name("currencyCode");
      (customScalarAdapters.<String>responseAdapterFor(CurrencyCode.type)).toJson(writer, customScalarAdapters, value.currencyCode);
    }
  }

  public enum PrimaryGuest1 implements Adapter<PropertyReservationsSummaryQuery.PrimaryGuest1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("emailAddress", "firstName", "lastName", "loyaltyTier", "phoneNumbers", "supplierLoyaltyPlanInfo", "travelPurpose");

    @Override
    public PropertyReservationsSummaryQuery.PrimaryGuest1 fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _emailAddress = null;
      String _firstName = null;
      String _lastName = null;
      String _loyaltyTier = null;
      List<PropertyReservationsSummaryQuery.PhoneNumber> _phoneNumbers = null;
      PropertyReservationsSummaryQuery.SupplierLoyaltyPlanInfo _supplierLoyaltyPlanInfo = null;
      TravelPurpose _travelPurpose = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _emailAddress = new NullableAdapter<>((customScalarAdapters.<String>responseAdapterFor(EmailAddress.type))).fromJson(reader, customScalarAdapters); break;
          case 1: _firstName = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _lastName = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 3: _loyaltyTier = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 4: _phoneNumbers = new NullableAdapter<>(new ListAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.PhoneNumber>(PhoneNumber.INSTANCE, false))).fromJson(reader, customScalarAdapters); break;
          case 5: _supplierLoyaltyPlanInfo = new NullableAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.SupplierLoyaltyPlanInfo>(SupplierLoyaltyPlanInfo.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 6: _travelPurpose = new NullableAdapter<>(TravelPurpose_ResponseAdapter.INSTANCE).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_firstName, "firstName");
      Assertions.checkFieldNotMissing(_lastName, "lastName");

      return new PropertyReservationsSummaryQuery.PrimaryGuest1(
        _emailAddress,
        _firstName,
        _lastName,
        _loyaltyTier,
        _phoneNumbers,
        _supplierLoyaltyPlanInfo,
        _travelPurpose
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.PrimaryGuest1 value) throws IOException {
      writer.name("emailAddress");
      new NullableAdapter<>((customScalarAdapters.<String>responseAdapterFor(EmailAddress.type))).toJson(writer, customScalarAdapters, value.emailAddress);

      writer.name("firstName");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.firstName);

      writer.name("lastName");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.lastName);

      writer.name("loyaltyTier");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.loyaltyTier);

      writer.name("phoneNumbers");
      new NullableAdapter<>(new ListAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.PhoneNumber>(PhoneNumber.INSTANCE, false))).toJson(writer, customScalarAdapters, value.phoneNumbers);

      writer.name("supplierLoyaltyPlanInfo");
      new NullableAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.SupplierLoyaltyPlanInfo>(SupplierLoyaltyPlanInfo.INSTANCE, false)).toJson(writer, customScalarAdapters, value.supplierLoyaltyPlanInfo);

      writer.name("travelPurpose");
      new NullableAdapter<>(TravelPurpose_ResponseAdapter.INSTANCE).toJson(writer, customScalarAdapters, value.travelPurpose);
    }
  }

  public enum PhoneNumber implements Adapter<PropertyReservationsSummaryQuery.PhoneNumber> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("areaCode", "countryCode", "number");

    @Override
    public PropertyReservationsSummaryQuery.PhoneNumber fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _areaCode = null;
      String _countryCode = null;
      String _number = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _areaCode = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _countryCode = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _number = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_areaCode, "areaCode");
      Assertions.checkFieldNotMissing(_countryCode, "countryCode");
      Assertions.checkFieldNotMissing(_number, "number");

      return new PropertyReservationsSummaryQuery.PhoneNumber(
        _areaCode,
        _countryCode,
        _number
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.PhoneNumber value) throws IOException {
      writer.name("areaCode");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.areaCode);

      writer.name("countryCode");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.countryCode);

      writer.name("number");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.number);
    }
  }

  public enum SupplierLoyaltyPlanInfo implements Adapter<PropertyReservationsSummaryQuery.SupplierLoyaltyPlanInfo> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("membershipNumber", "planCode");

    @Override
    public PropertyReservationsSummaryQuery.SupplierLoyaltyPlanInfo fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Integer _membershipNumber = null;
      String _planCode = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _membershipNumber = Adapters.NullableIntAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _planCode = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new PropertyReservationsSummaryQuery.SupplierLoyaltyPlanInfo(
        _membershipNumber,
        _planCode
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.SupplierLoyaltyPlanInfo value) throws IOException {
      writer.name("membershipNumber");
      Adapters.NullableIntAdapter.toJson(writer, customScalarAdapters, value.membershipNumber);

      writer.name("planCode");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.planCode);
    }
  }

  public enum RateId implements Adapter<PropertyReservationsSummaryQuery.RateId> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id", "idSource");

    @Override
    public PropertyReservationsSummaryQuery.RateId fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _id = null;
      IdSource _idSource = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _id = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _idSource = IdSource_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_idSource, "idSource");

      return new PropertyReservationsSummaryQuery.RateId(
        _id,
        _idSource
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.RateId value) throws IOException {
      writer.name("id");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.id);

      writer.name("idSource");
      IdSource_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.idSource);
    }
  }

  public enum ReconciliationEligibility implements Adapter<PropertyReservationsSummaryQuery.ReconciliationEligibility> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("invalidScenarios", "validScenarios");

    @Override
    public PropertyReservationsSummaryQuery.ReconciliationEligibility fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      List<PropertyReservationsSummaryQuery.InvalidScenario> _invalidScenarios = null;
      List<String> _validScenarios = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _invalidScenarios = new NullableAdapter<>(new ListAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.InvalidScenario>(InvalidScenario.INSTANCE, false))).fromJson(reader, customScalarAdapters); break;
          case 1: _validScenarios = new NullableAdapter<>(new ListAdapter<>(Adapters.StringAdapter)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new PropertyReservationsSummaryQuery.ReconciliationEligibility(
        _invalidScenarios,
        _validScenarios
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.ReconciliationEligibility value) throws IOException {
      writer.name("invalidScenarios");
      new NullableAdapter<>(new ListAdapter<>(new ObjectAdapter<PropertyReservationsSummaryQuery.InvalidScenario>(InvalidScenario.INSTANCE, false))).toJson(writer, customScalarAdapters, value.invalidScenarios);

      writer.name("validScenarios");
      new NullableAdapter<>(new ListAdapter<>(Adapters.StringAdapter)).toJson(writer, customScalarAdapters, value.validScenarios);
    }
  }

  public enum InvalidScenario implements Adapter<PropertyReservationsSummaryQuery.InvalidScenario> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("reason", "scenario");

    @Override
    public PropertyReservationsSummaryQuery.InvalidScenario fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _reason = null;
      String _scenario = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _reason = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _scenario = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_reason, "reason");
      Assertions.checkFieldNotMissing(_scenario, "scenario");

      return new PropertyReservationsSummaryQuery.InvalidScenario(
        _reason,
        _scenario
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.InvalidScenario value) throws IOException {
      writer.name("reason");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.reason);

      writer.name("scenario");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.scenario);
    }
  }

  public enum ReservationId implements Adapter<PropertyReservationsSummaryQuery.ReservationId> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id", "idSource");

    @Override
    public PropertyReservationsSummaryQuery.ReservationId fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _id = null;
      IdSource _idSource = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _id = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _idSource = IdSource_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_idSource, "idSource");

      return new PropertyReservationsSummaryQuery.ReservationId(
        _id,
        _idSource
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.ReservationId value) throws IOException {
      writer.name("id");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.id);

      writer.name("idSource");
      IdSource_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.idSource);
    }
  }

  public enum Statuses implements Adapter<PropertyReservationsSummaryQuery.Statuses> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("status");

    @Override
    public PropertyReservationsSummaryQuery.Statuses fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      ReservationStatus _status = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _status = ReservationStatus_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_status, "status");

      return new PropertyReservationsSummaryQuery.Statuses(
        _status
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.Statuses value) throws IOException {
      writer.name("status");
      ReservationStatus_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.status);
    }
  }

  public enum StayDates implements Adapter<PropertyReservationsSummaryQuery.StayDates> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("checkInDate", "checkOutDate");

    @Override
    public PropertyReservationsSummaryQuery.StayDates fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      LocalDate _checkInDate = null;
      LocalDate _checkOutDate = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _checkInDate = com.apollographql.apollo3.adapter.JavaLocalDateAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          case 1: _checkOutDate = com.apollographql.apollo3.adapter.JavaLocalDateAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_checkInDate, "checkInDate");
      Assertions.checkFieldNotMissing(_checkOutDate, "checkOutDate");

      return new PropertyReservationsSummaryQuery.StayDates(
        _checkInDate,
        _checkOutDate
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.StayDates value) throws IOException {
      writer.name("checkInDate");
      com.apollographql.apollo3.adapter.JavaLocalDateAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.checkInDate);

      writer.name("checkOutDate");
      com.apollographql.apollo3.adapter.JavaLocalDateAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.checkOutDate);
    }
  }

  public enum UnitId implements Adapter<PropertyReservationsSummaryQuery.UnitId> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id", "idSource");

    @Override
    public PropertyReservationsSummaryQuery.UnitId fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _id = null;
      IdSource _idSource = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _id = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _idSource = IdSource_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_idSource, "idSource");

      return new PropertyReservationsSummaryQuery.UnitId(
        _id,
        _idSource
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.UnitId value) throws IOException {
      writer.name("id");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.id);

      writer.name("idSource");
      IdSource_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.idSource);
    }
  }

  public enum ValueAddedPromotion implements Adapter<PropertyReservationsSummaryQuery.ValueAddedPromotion> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("description", "id");

    @Override
    public PropertyReservationsSummaryQuery.ValueAddedPromotion fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _description = null;
      String _id = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _description = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _id = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_description, "description");
      Assertions.checkFieldNotMissing(_id, "id");

      return new PropertyReservationsSummaryQuery.ValueAddedPromotion(
        _description,
        _id
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyReservationsSummaryQuery.ValueAddedPromotion value) throws IOException {
      writer.name("description");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.description);

      writer.name("id");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.id);
    }
  }
}
