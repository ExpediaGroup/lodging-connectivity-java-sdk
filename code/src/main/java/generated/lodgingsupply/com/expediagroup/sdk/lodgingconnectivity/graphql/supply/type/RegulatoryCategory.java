//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type;

import com.apollographql.apollo.api.EnumType;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.Objects;

/**
 * Category values for regulatory categories.
 */
public class RegulatoryCategory {
  public static EnumType type = new EnumType("RegulatoryCategory", Arrays.asList("APARTMENT_HOTEL", "BED_AND_BREAKFAST", "CAMPING_SITES", "EVENT", "HOME_SHARING_NUMBER", "HOSTEL", "HOTEL", "HOTEL_OR_BNB", "HOTEL_RYOKAN", "LONG_TERM_ONLY", "MINPAKU", "MOTEL", "NO_LICENSE", "PRIMARY_HOME", "PRIMARY_HOME_WITH_EXCEPTION", "PRIMARY_OR_SECONDARY", "RURAL_LODGING", "RYOKAN", "SECONDARY_HOME", "SHORT_TERM_RENTAL", "SIMPLE_LODGING", "SPECIAL", "TRANSIENT_OCCUPANCY_RESIDENTIAL_STRUCTURE", "VACATION_RENTAL", "VACATION_RENTAL_OTHER"));

  public static RegulatoryCategory APARTMENT_HOTEL = new RegulatoryCategory("APARTMENT_HOTEL");

  public static RegulatoryCategory BED_AND_BREAKFAST = new RegulatoryCategory("BED_AND_BREAKFAST");

  public static RegulatoryCategory CAMPING_SITES = new RegulatoryCategory("CAMPING_SITES");

  public static RegulatoryCategory EVENT = new RegulatoryCategory("EVENT");

  public static RegulatoryCategory HOME_SHARING_NUMBER = new RegulatoryCategory("HOME_SHARING_NUMBER");

  public static RegulatoryCategory HOSTEL = new RegulatoryCategory("HOSTEL");

  public static RegulatoryCategory HOTEL = new RegulatoryCategory("HOTEL");

  public static RegulatoryCategory HOTEL_OR_BNB = new RegulatoryCategory("HOTEL_OR_BNB");

  public static RegulatoryCategory HOTEL_RYOKAN = new RegulatoryCategory("HOTEL_RYOKAN");

  public static RegulatoryCategory LONG_TERM_ONLY = new RegulatoryCategory("LONG_TERM_ONLY");

  public static RegulatoryCategory MINPAKU = new RegulatoryCategory("MINPAKU");

  public static RegulatoryCategory MOTEL = new RegulatoryCategory("MOTEL");

  public static RegulatoryCategory NO_LICENSE = new RegulatoryCategory("NO_LICENSE");

  public static RegulatoryCategory PRIMARY_HOME = new RegulatoryCategory("PRIMARY_HOME");

  public static RegulatoryCategory PRIMARY_HOME_WITH_EXCEPTION = new RegulatoryCategory("PRIMARY_HOME_WITH_EXCEPTION");

  public static RegulatoryCategory PRIMARY_OR_SECONDARY = new RegulatoryCategory("PRIMARY_OR_SECONDARY");

  public static RegulatoryCategory RURAL_LODGING = new RegulatoryCategory("RURAL_LODGING");

  public static RegulatoryCategory RYOKAN = new RegulatoryCategory("RYOKAN");

  public static RegulatoryCategory SECONDARY_HOME = new RegulatoryCategory("SECONDARY_HOME");

  public static RegulatoryCategory SHORT_TERM_RENTAL = new RegulatoryCategory("SHORT_TERM_RENTAL");

  public static RegulatoryCategory SIMPLE_LODGING = new RegulatoryCategory("SIMPLE_LODGING");

  public static RegulatoryCategory SPECIAL = new RegulatoryCategory("SPECIAL");

  public static RegulatoryCategory TRANSIENT_OCCUPANCY_RESIDENTIAL_STRUCTURE = new RegulatoryCategory("TRANSIENT_OCCUPANCY_RESIDENTIAL_STRUCTURE");

  public static RegulatoryCategory VACATION_RENTAL = new RegulatoryCategory("VACATION_RENTAL");

  public static RegulatoryCategory VACATION_RENTAL_OTHER = new RegulatoryCategory("VACATION_RENTAL_OTHER");

  public String rawValue;

  private RegulatoryCategory(String rawValue) {
    this.rawValue = rawValue;
  }

  /**
   * Returns the RegulatoryCategory that represents the specified rawValue.
   * Note: unknown values of rawValue will return UNKNOWN__. You may want to update your schema instead of calling this method directly.
   */
  public static RegulatoryCategory safeValueOf(String rawValue) {
    switch (Objects.requireNonNull(rawValue)) {
      case "APARTMENT_HOTEL": return RegulatoryCategory.APARTMENT_HOTEL;
      case "BED_AND_BREAKFAST": return RegulatoryCategory.BED_AND_BREAKFAST;
      case "CAMPING_SITES": return RegulatoryCategory.CAMPING_SITES;
      case "EVENT": return RegulatoryCategory.EVENT;
      case "HOME_SHARING_NUMBER": return RegulatoryCategory.HOME_SHARING_NUMBER;
      case "HOSTEL": return RegulatoryCategory.HOSTEL;
      case "HOTEL": return RegulatoryCategory.HOTEL;
      case "HOTEL_OR_BNB": return RegulatoryCategory.HOTEL_OR_BNB;
      case "HOTEL_RYOKAN": return RegulatoryCategory.HOTEL_RYOKAN;
      case "LONG_TERM_ONLY": return RegulatoryCategory.LONG_TERM_ONLY;
      case "MINPAKU": return RegulatoryCategory.MINPAKU;
      case "MOTEL": return RegulatoryCategory.MOTEL;
      case "NO_LICENSE": return RegulatoryCategory.NO_LICENSE;
      case "PRIMARY_HOME": return RegulatoryCategory.PRIMARY_HOME;
      case "PRIMARY_HOME_WITH_EXCEPTION": return RegulatoryCategory.PRIMARY_HOME_WITH_EXCEPTION;
      case "PRIMARY_OR_SECONDARY": return RegulatoryCategory.PRIMARY_OR_SECONDARY;
      case "RURAL_LODGING": return RegulatoryCategory.RURAL_LODGING;
      case "RYOKAN": return RegulatoryCategory.RYOKAN;
      case "SECONDARY_HOME": return RegulatoryCategory.SECONDARY_HOME;
      case "SHORT_TERM_RENTAL": return RegulatoryCategory.SHORT_TERM_RENTAL;
      case "SIMPLE_LODGING": return RegulatoryCategory.SIMPLE_LODGING;
      case "SPECIAL": return RegulatoryCategory.SPECIAL;
      case "TRANSIENT_OCCUPANCY_RESIDENTIAL_STRUCTURE": return RegulatoryCategory.TRANSIENT_OCCUPANCY_RESIDENTIAL_STRUCTURE;
      case "VACATION_RENTAL": return RegulatoryCategory.VACATION_RENTAL;
      case "VACATION_RENTAL_OTHER": return RegulatoryCategory.VACATION_RENTAL_OTHER;
      default: return new RegulatoryCategory.UNKNOWN__(rawValue);
    }
  }

  /**
   * An enum value that wasn't known at compile time.
   */
  public static class UNKNOWN__ extends RegulatoryCategory {
    private UNKNOWN__(String rawValue) {
      super(rawValue);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      if (!(other instanceof UNKNOWN__)) return false;
      return rawValue.equals(((UNKNOWN__) other).rawValue);
    }

    @Override
    public int hashCode() {
      return rawValue.hashCode();
    }

    @Override
    public String toString() {
      return "UNKNOWN__(" + rawValue + ")";
    }
  }
}
