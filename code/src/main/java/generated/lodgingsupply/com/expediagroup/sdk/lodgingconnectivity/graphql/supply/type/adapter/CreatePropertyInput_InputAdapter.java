//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter;

import com.apollographql.apollo.api.Adapter;
import com.apollographql.apollo.api.Adapters;
import com.apollographql.apollo.api.CustomScalarAdapters;
import com.apollographql.apollo.api.ListAdapter;
import com.apollographql.apollo.api.ObjectAdapter;
import com.apollographql.apollo.api.json.JsonReader;
import com.apollographql.apollo.api.json.JsonWriter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.AmenityInput;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.CreateAddressInput;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.CreatePoliciesInput;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.CreatePropertyInput;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.CreatePropertyLocationInput;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.LocalizedStringInput;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.SavePropertyContactInput;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.TextInput;
import java.io.IOException;
import java.lang.IllegalStateException;
import java.lang.Override;

public enum CreatePropertyInput_InputAdapter implements Adapter<CreatePropertyInput> {
  INSTANCE;

  @Override
  public CreatePropertyInput fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
      throws IOException {
    throw new IllegalStateException("Input type used in output position");
  }

  @Override
  public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
      CreatePropertyInput value) throws IOException {
    writer.name("address");
    new ObjectAdapter<CreateAddressInput>(CreateAddressInput_InputAdapter.INSTANCE, false).toJson(writer, customScalarAdapters, value.address);
    if (value.amenities.isPresent()) {
      writer.name("amenities");
      new OptionalAdapter<>(new OptionalAdapter<>(new ListAdapter<>(new ObjectAdapter<AmenityInput>(AmenityInput_InputAdapter.INSTANCE, false)))).toJson(writer, customScalarAdapters, value.amenities);
    }
    if (value.clientMutationId.isPresent()) {
      writer.name("clientMutationId");
      new OptionalAdapter<>(OptionalAdapters.OptionalStringAdapter).toJson(writer, customScalarAdapters, value.clientMutationId);
    }
    if (value.contact.isPresent()) {
      writer.name("contact");
      new OptionalAdapter<>(new OptionalAdapter<>(new ObjectAdapter<SavePropertyContactInput>(SavePropertyContactInput_InputAdapter.INSTANCE, false))).toJson(writer, customScalarAdapters, value.contact);
    }
    writer.name("location");
    new ObjectAdapter<CreatePropertyLocationInput>(CreatePropertyLocationInput_InputAdapter.INSTANCE, false).toJson(writer, customScalarAdapters, value.location);
    writer.name("name");
    Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.name);
    if (value.names.isPresent()) {
      writer.name("names");
      new OptionalAdapter<>(new OptionalAdapter<>(new ListAdapter<>(new ObjectAdapter<LocalizedStringInput>(LocalizedStringInput_InputAdapter.INSTANCE, false)))).toJson(writer, customScalarAdapters, value.names);
    }
    if (value.policies.isPresent()) {
      writer.name("policies");
      new OptionalAdapter<>(new OptionalAdapter<>(new ObjectAdapter<CreatePoliciesInput>(CreatePoliciesInput_InputAdapter.INSTANCE, false))).toJson(writer, customScalarAdapters, value.policies);
    }
    if (value.referenceName.isPresent()) {
      writer.name("referenceName");
      new OptionalAdapter<>(OptionalAdapters.OptionalStringAdapter).toJson(writer, customScalarAdapters, value.referenceName);
    }
    writer.name("supplierPropertyId");
    Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.supplierPropertyId);
    if (value.supplierUnitId.isPresent()) {
      writer.name("supplierUnitId");
      new OptionalAdapter<>(OptionalAdapters.OptionalStringAdapter).toJson(writer, customScalarAdapters, value.supplierUnitId);
    }
    if (value.text.isPresent()) {
      writer.name("text");
      new OptionalAdapter<>(new OptionalAdapter<>(new ListAdapter<>(new ObjectAdapter<TextInput>(TextInput_InputAdapter.INSTANCE, false)))).toJson(writer, customScalarAdapters, value.text);
    }
    if (value.type.isPresent()) {
      writer.name("type");
      new OptionalAdapter<>(OptionalAdapters.OptionalStringAdapter).toJson(writer, customScalarAdapters, value.type);
    }
  }
}
