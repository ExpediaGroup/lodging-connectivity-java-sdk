//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.4'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type;

import com.apollographql.apollo3.api.Optional;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.List;

public class OneOfStringFilterInput {
  public final Optional<OneOfOperator> operator;

  public final List<String> values;

  private transient volatile int $hashCode;

  private transient volatile boolean $hashCodeMemoized;

  private transient volatile String $toString;

  public OneOfStringFilterInput(Optional<OneOfOperator> operator, List<String> values) {
    this.operator = operator;
    this.values = values;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof OneOfStringFilterInput) {
      OneOfStringFilterInput that = (OneOfStringFilterInput) o;
      return ((this.operator == null) ? (that.operator == null) : this.operator.equals(that.operator))
       &&((this.values == null) ? (that.values == null) : this.values.equals(that.values));
    }
    return false;
  }

  @Override
  public int hashCode() {
    if (!$hashCodeMemoized) {
      int __h = 1;
      __h *= 1000003;
      __h ^= (operator == null) ? 0 : operator.hashCode();
      __h *= 1000003;
      __h ^= (values == null) ? 0 : values.hashCode();
      $hashCode = __h;
      $hashCodeMemoized = true;
    }
    return $hashCode;
  }

  @Override
  public String toString() {
    if ($toString == null) {
      $toString = "OneOfStringFilterInput{"
        + "operator=" + operator + ", "
        + "values=" + values
        + "}";
    }
    return $toString;
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private Optional<OneOfOperator> operator = Optional.absent();

    private List<String> values;

    Builder() {
    }

    public Builder operator(OneOfOperator operator) {
      this.operator = Optional.present(operator);
      return this;
    }

    public Builder values(List<String> values) {
      this.values = values;
      return this;
    }

    public OneOfStringFilterInput build() {
      return new OneOfStringFilterInput(operator, values);
    }
  }
}
