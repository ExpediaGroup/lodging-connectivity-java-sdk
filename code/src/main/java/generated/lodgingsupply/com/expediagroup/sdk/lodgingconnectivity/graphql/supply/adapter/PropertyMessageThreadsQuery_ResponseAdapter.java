//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.4'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.adapter;

import com.apollographql.apollo3.api.Adapter;
import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.ListAdapter;
import com.apollographql.apollo3.api.NullableAdapter;
import com.apollographql.apollo3.api.ObjectAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.PropertyMessageThreadsQuery;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

public class PropertyMessageThreadsQuery_ResponseAdapter {
  public enum Data implements Adapter<PropertyMessageThreadsQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("property");

    @Override
    public PropertyMessageThreadsQuery.Data fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      PropertyMessageThreadsQuery.Property _property = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _property = new NullableAdapter<>(new ObjectAdapter<PropertyMessageThreadsQuery.Property>(Property.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new PropertyMessageThreadsQuery.Data(
        _property
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyMessageThreadsQuery.Data value) throws IOException {
      writer.name("property");
      new NullableAdapter<>(new ObjectAdapter<PropertyMessageThreadsQuery.Property>(Property.INSTANCE, false)).toJson(writer, customScalarAdapters, value.property);
    }
  }

  public enum Property implements Adapter<PropertyMessageThreadsQuery.Property> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("messageThreads");

    @Override
    public PropertyMessageThreadsQuery.Property fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      PropertyMessageThreadsQuery.MessageThreads _messageThreads = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _messageThreads = new ObjectAdapter<PropertyMessageThreadsQuery.MessageThreads>(MessageThreads.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_messageThreads, "messageThreads");

      return new PropertyMessageThreadsQuery.Property(
        _messageThreads
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyMessageThreadsQuery.Property value) throws IOException {
      writer.name("messageThreads");
      new ObjectAdapter<PropertyMessageThreadsQuery.MessageThreads>(MessageThreads.INSTANCE, false).toJson(writer, customScalarAdapters, value.messageThreads);
    }
  }

  public enum MessageThreads implements Adapter<PropertyMessageThreadsQuery.MessageThreads> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("cursor", "totalCount", "elements");

    @Override
    public PropertyMessageThreadsQuery.MessageThreads fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _cursor = null;
      Integer _totalCount = null;
      List<PropertyMessageThreadsQuery.Element> _elements = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _cursor = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _totalCount = Adapters.IntAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _elements = new ListAdapter<>(new ObjectAdapter<PropertyMessageThreadsQuery.Element>(Element.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_totalCount, "totalCount");
      Assertions.checkFieldNotMissing(_elements, "elements");

      return new PropertyMessageThreadsQuery.MessageThreads(
        _cursor,
        _totalCount,
        _elements
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyMessageThreadsQuery.MessageThreads value) throws IOException {
      writer.name("cursor");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.cursor);

      writer.name("totalCount");
      Adapters.IntAdapter.toJson(writer, customScalarAdapters, value.totalCount);

      writer.name("elements");
      new ListAdapter<>(new ObjectAdapter<PropertyMessageThreadsQuery.Element>(Element.INSTANCE, false)).toJson(writer, customScalarAdapters, value.elements);
    }
  }

  public enum Element implements Adapter<PropertyMessageThreadsQuery.Element> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id", "creationDateTimeUtc", "primaryTraveler", "reservationSummary", "bookingInquiry");

    @Override
    public PropertyMessageThreadsQuery.Element fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _id = null;
      Object _creationDateTimeUtc = null;
      PropertyMessageThreadsQuery.PrimaryTraveler _primaryTraveler = null;
      PropertyMessageThreadsQuery.ReservationSummary _reservationSummary = null;
      PropertyMessageThreadsQuery.BookingInquiry _bookingInquiry = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _id = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _creationDateTimeUtc = Adapters.NullableAnyAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _primaryTraveler = new NullableAdapter<>(new ObjectAdapter<PropertyMessageThreadsQuery.PrimaryTraveler>(PrimaryTraveler.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 3: _reservationSummary = new NullableAdapter<>(new ObjectAdapter<PropertyMessageThreadsQuery.ReservationSummary>(ReservationSummary.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 4: _bookingInquiry = new NullableAdapter<>(new ObjectAdapter<PropertyMessageThreadsQuery.BookingInquiry>(BookingInquiry.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_id, "id");

      return new PropertyMessageThreadsQuery.Element(
        _id,
        _creationDateTimeUtc,
        _primaryTraveler,
        _reservationSummary,
        _bookingInquiry
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyMessageThreadsQuery.Element value) throws IOException {
      writer.name("id");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.id);

      writer.name("creationDateTimeUtc");
      Adapters.NullableAnyAdapter.toJson(writer, customScalarAdapters, value.creationDateTimeUtc);

      writer.name("primaryTraveler");
      new NullableAdapter<>(new ObjectAdapter<PropertyMessageThreadsQuery.PrimaryTraveler>(PrimaryTraveler.INSTANCE, false)).toJson(writer, customScalarAdapters, value.primaryTraveler);

      writer.name("reservationSummary");
      new NullableAdapter<>(new ObjectAdapter<PropertyMessageThreadsQuery.ReservationSummary>(ReservationSummary.INSTANCE, false)).toJson(writer, customScalarAdapters, value.reservationSummary);

      writer.name("bookingInquiry");
      new NullableAdapter<>(new ObjectAdapter<PropertyMessageThreadsQuery.BookingInquiry>(BookingInquiry.INSTANCE, false)).toJson(writer, customScalarAdapters, value.bookingInquiry);
    }
  }

  public enum PrimaryTraveler implements Adapter<PropertyMessageThreadsQuery.PrimaryTraveler> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("firstName", "lastName");

    @Override
    public PropertyMessageThreadsQuery.PrimaryTraveler fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _firstName = null;
      String _lastName = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _firstName = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _lastName = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new PropertyMessageThreadsQuery.PrimaryTraveler(
        _firstName,
        _lastName
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyMessageThreadsQuery.PrimaryTraveler value) throws IOException {
      writer.name("firstName");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.firstName);

      writer.name("lastName");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.lastName);
    }
  }

  public enum ReservationSummary implements Adapter<PropertyMessageThreadsQuery.ReservationSummary> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("adultCount", "alternativeIds", "checkInDate", "checkOutDate", "childCount", "id", "petCount");

    @Override
    public PropertyMessageThreadsQuery.ReservationSummary fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Integer _adultCount = null;
      PropertyMessageThreadsQuery.AlternativeIds _alternativeIds = null;
      LocalDate _checkInDate = null;
      LocalDate _checkOutDate = null;
      Integer _childCount = null;
      String _id = null;
      Integer _petCount = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _adultCount = Adapters.IntAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _alternativeIds = new ObjectAdapter<PropertyMessageThreadsQuery.AlternativeIds>(AlternativeIds.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 2: _checkInDate = com.apollographql.apollo3.adapter.JavaLocalDateAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          case 3: _checkOutDate = com.apollographql.apollo3.adapter.JavaLocalDateAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          case 4: _childCount = Adapters.IntAdapter.fromJson(reader, customScalarAdapters); break;
          case 5: _id = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 6: _petCount = Adapters.IntAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_adultCount, "adultCount");
      Assertions.checkFieldNotMissing(_alternativeIds, "alternativeIds");
      Assertions.checkFieldNotMissing(_checkInDate, "checkInDate");
      Assertions.checkFieldNotMissing(_checkOutDate, "checkOutDate");
      Assertions.checkFieldNotMissing(_childCount, "childCount");
      Assertions.checkFieldNotMissing(_id, "id");
      Assertions.checkFieldNotMissing(_petCount, "petCount");

      return new PropertyMessageThreadsQuery.ReservationSummary(
        _adultCount,
        _alternativeIds,
        _checkInDate,
        _checkOutDate,
        _childCount,
        _id,
        _petCount
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyMessageThreadsQuery.ReservationSummary value) throws IOException {
      writer.name("adultCount");
      Adapters.IntAdapter.toJson(writer, customScalarAdapters, value.adultCount);

      writer.name("alternativeIds");
      new ObjectAdapter<PropertyMessageThreadsQuery.AlternativeIds>(AlternativeIds.INSTANCE, false).toJson(writer, customScalarAdapters, value.alternativeIds);

      writer.name("checkInDate");
      com.apollographql.apollo3.adapter.JavaLocalDateAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.checkInDate);

      writer.name("checkOutDate");
      com.apollographql.apollo3.adapter.JavaLocalDateAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.checkOutDate);

      writer.name("childCount");
      Adapters.IntAdapter.toJson(writer, customScalarAdapters, value.childCount);

      writer.name("id");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.id);

      writer.name("petCount");
      Adapters.IntAdapter.toJson(writer, customScalarAdapters, value.petCount);
    }
  }

  public enum AlternativeIds implements Adapter<PropertyMessageThreadsQuery.AlternativeIds> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("supplierId");

    @Override
    public PropertyMessageThreadsQuery.AlternativeIds fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _supplierId = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _supplierId = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_supplierId, "supplierId");

      return new PropertyMessageThreadsQuery.AlternativeIds(
        _supplierId
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyMessageThreadsQuery.AlternativeIds value) throws IOException {
      writer.name("supplierId");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.supplierId);
    }
  }

  public enum BookingInquiry implements Adapter<PropertyMessageThreadsQuery.BookingInquiry> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("adultCount", "checkInDate", "checkOutDate", "childCount", "hasPets", "id");

    @Override
    public PropertyMessageThreadsQuery.BookingInquiry fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Integer _adultCount = null;
      LocalDate _checkInDate = null;
      LocalDate _checkOutDate = null;
      Integer _childCount = null;
      Boolean _hasPets = null;
      String _id = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _adultCount = Adapters.IntAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _checkInDate = new NullableAdapter<>(com.apollographql.apollo3.adapter.JavaLocalDateAdapter.INSTANCE).fromJson(reader, customScalarAdapters); break;
          case 2: _checkOutDate = new NullableAdapter<>(com.apollographql.apollo3.adapter.JavaLocalDateAdapter.INSTANCE).fromJson(reader, customScalarAdapters); break;
          case 3: _childCount = Adapters.IntAdapter.fromJson(reader, customScalarAdapters); break;
          case 4: _hasPets = Adapters.BooleanAdapter.fromJson(reader, customScalarAdapters); break;
          case 5: _id = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_adultCount, "adultCount");
      Assertions.checkFieldNotMissing(_childCount, "childCount");
      Assertions.checkFieldNotMissing(_hasPets, "hasPets");
      Assertions.checkFieldNotMissing(_id, "id");

      return new PropertyMessageThreadsQuery.BookingInquiry(
        _adultCount,
        _checkInDate,
        _checkOutDate,
        _childCount,
        _hasPets,
        _id
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyMessageThreadsQuery.BookingInquiry value) throws IOException {
      writer.name("adultCount");
      Adapters.IntAdapter.toJson(writer, customScalarAdapters, value.adultCount);

      writer.name("checkInDate");
      new NullableAdapter<>(com.apollographql.apollo3.adapter.JavaLocalDateAdapter.INSTANCE).toJson(writer, customScalarAdapters, value.checkInDate);

      writer.name("checkOutDate");
      new NullableAdapter<>(com.apollographql.apollo3.adapter.JavaLocalDateAdapter.INSTANCE).toJson(writer, customScalarAdapters, value.checkOutDate);

      writer.name("childCount");
      Adapters.IntAdapter.toJson(writer, customScalarAdapters, value.childCount);

      writer.name("hasPets");
      Adapters.BooleanAdapter.toJson(writer, customScalarAdapters, value.hasPets);

      writer.name("id");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.id);
    }
  }
}
