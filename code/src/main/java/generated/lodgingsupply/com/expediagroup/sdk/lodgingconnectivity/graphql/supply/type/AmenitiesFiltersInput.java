//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type;

import java.lang.Boolean;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

public class AmenitiesFiltersInput {
  public final Optional<Optional<Boolean>> available;

  public final Optional<Optional<OneOfStringFilterInput>> keys;

  private transient volatile int $hashCode;

  private transient volatile boolean $hashCodeMemoized;

  private transient volatile String $toString;

  public AmenitiesFiltersInput(Optional<Optional<Boolean>> available,
      Optional<Optional<OneOfStringFilterInput>> keys) {
    this.available = available;
    this.keys = keys;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof AmenitiesFiltersInput) {
      AmenitiesFiltersInput that = (AmenitiesFiltersInput) o;
      return ((this.available == null) ? (that.available == null) : this.available.equals(that.available))
       &&((this.keys == null) ? (that.keys == null) : this.keys.equals(that.keys));
    }
    return false;
  }

  @Override
  public int hashCode() {
    if (!$hashCodeMemoized) {
      int __h = 1;
      __h *= 1000003;
      __h ^= (available == null) ? 0 : available.hashCode();
      __h *= 1000003;
      __h ^= (keys == null) ? 0 : keys.hashCode();
      $hashCode = __h;
      $hashCodeMemoized = true;
    }
    return $hashCode;
  }

  @Override
  public String toString() {
    if ($toString == null) {
      $toString = "AmenitiesFiltersInput{"
        + "available=" + available + ", "
        + "keys=" + keys
        + "}";
    }
    return $toString;
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private Optional<Optional<Boolean>> available = Optional.empty();

    private Optional<Optional<OneOfStringFilterInput>> keys = Optional.empty();

    Builder() {
    }

    public Builder available(@NotNull Optional<Boolean> available) {
      this.available = Optional.of(available);
      return this;
    }

    public Builder keys(@NotNull Optional<OneOfStringFilterInput> keys) {
      this.keys = Optional.of(keys);
      return this;
    }

    public AmenitiesFiltersInput build() {
      return new AmenitiesFiltersInput(available, keys);
    }
  }
}
