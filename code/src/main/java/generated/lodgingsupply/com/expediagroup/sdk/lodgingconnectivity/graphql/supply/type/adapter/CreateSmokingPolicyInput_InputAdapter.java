//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter;

import com.apollographql.apollo.api.Adapter;
import com.apollographql.apollo.api.Adapters;
import com.apollographql.apollo.api.CustomScalarAdapters;
import com.apollographql.apollo.api.ListAdapter;
import com.apollographql.apollo.api.ObjectAdapter;
import com.apollographql.apollo.api.json.JsonReader;
import com.apollographql.apollo.api.json.JsonWriter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.CreateSmokingLocationPolicyInput;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.CreateSmokingPolicyInput;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.LocalizedStringInput;
import java.io.IOException;
import java.lang.IllegalStateException;
import java.lang.Override;

public enum CreateSmokingPolicyInput_InputAdapter implements Adapter<CreateSmokingPolicyInput> {
  INSTANCE;

  @Override
  public CreateSmokingPolicyInput fromJson(JsonReader reader,
      CustomScalarAdapters customScalarAdapters) throws IOException {
    throw new IllegalStateException("Input type used in output position");
  }

  @Override
  public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
      CreateSmokingPolicyInput value) throws IOException {
    writer.name("allowed");
    Adapters.BooleanAdapter.toJson(writer, customScalarAdapters, value.allowed);
    if (value.indoorPolicy.isPresent()) {
      writer.name("indoorPolicy");
      new OptionalAdapter<>(new OptionalAdapter<>(new ObjectAdapter<CreateSmokingLocationPolicyInput>(CreateSmokingLocationPolicyInput_InputAdapter.INSTANCE, false))).toJson(writer, customScalarAdapters, value.indoorPolicy);
    }
    if (value.note.isPresent()) {
      writer.name("note");
      new OptionalAdapter<>(new OptionalAdapter<>(new ListAdapter<>(new ObjectAdapter<LocalizedStringInput>(LocalizedStringInput_InputAdapter.INSTANCE, false)))).toJson(writer, customScalarAdapters, value.note);
    }
    if (value.outdoorPolicy.isPresent()) {
      writer.name("outdoorPolicy");
      new OptionalAdapter<>(new OptionalAdapter<>(new ObjectAdapter<CreateSmokingLocationPolicyInput>(CreateSmokingLocationPolicyInput_InputAdapter.INSTANCE, false))).toJson(writer, customScalarAdapters, value.outdoorPolicy);
    }
  }
}
