//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type;

import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

/**
 * facilitates filtering reservations
 */
public class ReservationFilterInput {
  public final Optional<Optional<CheckInDateFilter>> checkInDate;

  public final Optional<Optional<CheckOutDateFilter>> checkOutDate;

  public final Optional<Optional<List<IdNodeInput>>> reservationIds;

  public final Optional<Optional<List<String>>> ids;

  public final Optional<Optional<List<Optional<ReservationStatus>>>> status;

  public final Optional<Optional<String>> subStatus;

  public final Optional<Optional<LastUpdatedDateTimeFilter>> lastUpdatedDateTime;

  private transient volatile int $hashCode;

  private transient volatile boolean $hashCodeMemoized;

  private transient volatile String $toString;

  public ReservationFilterInput(Optional<Optional<CheckInDateFilter>> checkInDate,
      Optional<Optional<CheckOutDateFilter>> checkOutDate,
      Optional<Optional<List<IdNodeInput>>> reservationIds, Optional<Optional<List<String>>> ids,
      Optional<Optional<List<Optional<ReservationStatus>>>> status,
      Optional<Optional<String>> subStatus,
      Optional<Optional<LastUpdatedDateTimeFilter>> lastUpdatedDateTime) {
    this.checkInDate = checkInDate;
    this.checkOutDate = checkOutDate;
    this.reservationIds = reservationIds;
    this.ids = ids;
    this.status = status;
    this.subStatus = subStatus;
    this.lastUpdatedDateTime = lastUpdatedDateTime;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof ReservationFilterInput) {
      ReservationFilterInput that = (ReservationFilterInput) o;
      return ((this.checkInDate == null) ? (that.checkInDate == null) : this.checkInDate.equals(that.checkInDate))
       &&((this.checkOutDate == null) ? (that.checkOutDate == null) : this.checkOutDate.equals(that.checkOutDate))
       &&((this.reservationIds == null) ? (that.reservationIds == null) : this.reservationIds.equals(that.reservationIds))
       &&((this.ids == null) ? (that.ids == null) : this.ids.equals(that.ids))
       &&((this.status == null) ? (that.status == null) : this.status.equals(that.status))
       &&((this.subStatus == null) ? (that.subStatus == null) : this.subStatus.equals(that.subStatus))
       &&((this.lastUpdatedDateTime == null) ? (that.lastUpdatedDateTime == null) : this.lastUpdatedDateTime.equals(that.lastUpdatedDateTime));
    }
    return false;
  }

  @Override
  public int hashCode() {
    if (!$hashCodeMemoized) {
      int __h = 1;
      __h *= 1000003;
      __h ^= (checkInDate == null) ? 0 : checkInDate.hashCode();
      __h *= 1000003;
      __h ^= (checkOutDate == null) ? 0 : checkOutDate.hashCode();
      __h *= 1000003;
      __h ^= (reservationIds == null) ? 0 : reservationIds.hashCode();
      __h *= 1000003;
      __h ^= (ids == null) ? 0 : ids.hashCode();
      __h *= 1000003;
      __h ^= (status == null) ? 0 : status.hashCode();
      __h *= 1000003;
      __h ^= (subStatus == null) ? 0 : subStatus.hashCode();
      __h *= 1000003;
      __h ^= (lastUpdatedDateTime == null) ? 0 : lastUpdatedDateTime.hashCode();
      $hashCode = __h;
      $hashCodeMemoized = true;
    }
    return $hashCode;
  }

  @Override
  public String toString() {
    if ($toString == null) {
      $toString = "ReservationFilterInput{"
        + "checkInDate=" + checkInDate + ", "
        + "checkOutDate=" + checkOutDate + ", "
        + "reservationIds=" + reservationIds + ", "
        + "ids=" + ids + ", "
        + "status=" + status + ", "
        + "subStatus=" + subStatus + ", "
        + "lastUpdatedDateTime=" + lastUpdatedDateTime
        + "}";
    }
    return $toString;
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private Optional<Optional<CheckInDateFilter>> checkInDate = Optional.empty();

    private Optional<Optional<CheckOutDateFilter>> checkOutDate = Optional.empty();

    private Optional<Optional<List<IdNodeInput>>> reservationIds = Optional.empty();

    private Optional<Optional<List<String>>> ids = Optional.empty();

    private Optional<Optional<List<Optional<ReservationStatus>>>> status = Optional.empty();

    private Optional<Optional<String>> subStatus = Optional.empty();

    private Optional<Optional<LastUpdatedDateTimeFilter>> lastUpdatedDateTime = Optional.empty();

    Builder() {
    }

    /**
     * limit results to reservations with arrival date within the window defined by CheckInDateFilter
     */
    public Builder checkInDate(@NotNull Optional<CheckInDateFilter> checkInDate) {
      this.checkInDate = Optional.of(checkInDate);
      return this;
    }

    /**
     * limit results to reservations with departure date within the window defined by CheckOutDateFilter
     */
    public Builder checkOutDate(@NotNull Optional<CheckOutDateFilter> checkOutDate) {
      this.checkOutDate = Optional.of(checkOutDate);
      return this;
    }

    /**
     * list results with provided reservation ids
     */
    public Builder reservationIds(@NotNull Optional<List<IdNodeInput>> reservationIds) {
      this.reservationIds = Optional.of(reservationIds);
      return this;
    }

    /**
     * list results with provided reservation ids
     */
    public Builder ids(@NotNull Optional<List<String>> ids) {
      this.ids = Optional.of(ids);
      return this;
    }

    /**
     * limit results to reservations with status defined by ReservationStatus's
     */
    public Builder status(@NotNull Optional<List<Optional<ReservationStatus>>> status) {
      this.status = Optional.of(status);
      return this;
    }

    /**
     * limit results to reservations with sub status of a reservation
     */
    public Builder subStatus(@NotNull Optional<String> subStatus) {
      this.subStatus = Optional.of(subStatus);
      return this;
    }

    /**
     * limit results to reservations with updated date time from the date defined by LastUpdatedDateTimeFilter
     */
    public Builder lastUpdatedDateTime(
        @NotNull Optional<LastUpdatedDateTimeFilter> lastUpdatedDateTime) {
      this.lastUpdatedDateTime = Optional.of(lastUpdatedDateTime);
      return this;
    }

    public ReservationFilterInput build() {
      return new ReservationFilterInput(checkInDate, checkOutDate, reservationIds, ids, status, subStatus, lastUpdatedDateTime);
    }
  }
}
