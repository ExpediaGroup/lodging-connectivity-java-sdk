//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter;

import com.apollographql.apollo.api.Adapter;
import com.apollographql.apollo.api.Adapters;
import com.apollographql.apollo.api.CustomScalarAdapters;
import com.apollographql.apollo.api.ListAdapter;
import com.apollographql.apollo.api.ObjectAdapter;
import com.apollographql.apollo.api.json.JsonReader;
import com.apollographql.apollo.api.json.JsonWriter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.CheckInDateFilter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.CheckOutDateFilter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.IdNodeInput;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.LastUpdatedDateTimeFilter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.ReservationFilterInput;
import java.io.IOException;
import java.lang.IllegalStateException;
import java.lang.Override;

public enum ReservationFilterInput_InputAdapter implements Adapter<ReservationFilterInput> {
  INSTANCE;

  @Override
  public ReservationFilterInput fromJson(JsonReader reader,
      CustomScalarAdapters customScalarAdapters) throws IOException {
    throw new IllegalStateException("Input type used in output position");
  }

  @Override
  public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
      ReservationFilterInput value) throws IOException {
    if (value.checkInDate.isPresent()) {
      writer.name("checkInDate");
      new OptionalAdapter<>(new OptionalAdapter<>(new ObjectAdapter<CheckInDateFilter>(CheckInDateFilter_InputAdapter.INSTANCE, false))).toJson(writer, customScalarAdapters, value.checkInDate);
    }
    if (value.checkOutDate.isPresent()) {
      writer.name("checkOutDate");
      new OptionalAdapter<>(new OptionalAdapter<>(new ObjectAdapter<CheckOutDateFilter>(CheckOutDateFilter_InputAdapter.INSTANCE, false))).toJson(writer, customScalarAdapters, value.checkOutDate);
    }
    if (value.reservationIds.isPresent()) {
      writer.name("reservationIds");
      new OptionalAdapter<>(new OptionalAdapter<>(new ListAdapter<>(new ObjectAdapter<IdNodeInput>(IdNodeInput_InputAdapter.INSTANCE, false)))).toJson(writer, customScalarAdapters, value.reservationIds);
    }
    if (value.ids.isPresent()) {
      writer.name("ids");
      new OptionalAdapter<>(new OptionalAdapter<>(new ListAdapter<>(Adapters.StringAdapter))).toJson(writer, customScalarAdapters, value.ids);
    }
    if (value.status.isPresent()) {
      writer.name("status");
      new OptionalAdapter<>(new OptionalAdapter<>(new ListAdapter<>(new OptionalAdapter<>(ReservationStatus_ResponseAdapter.INSTANCE)))).toJson(writer, customScalarAdapters, value.status);
    }
    if (value.subStatus.isPresent()) {
      writer.name("subStatus");
      new OptionalAdapter<>(OptionalAdapters.OptionalStringAdapter).toJson(writer, customScalarAdapters, value.subStatus);
    }
    if (value.lastUpdatedDateTime.isPresent()) {
      writer.name("lastUpdatedDateTime");
      new OptionalAdapter<>(new OptionalAdapter<>(new ObjectAdapter<LastUpdatedDateTimeFilter>(LastUpdatedDateTimeFilter_InputAdapter.INSTANCE, false))).toJson(writer, customScalarAdapters, value.lastUpdatedDateTime);
    }
  }
}
