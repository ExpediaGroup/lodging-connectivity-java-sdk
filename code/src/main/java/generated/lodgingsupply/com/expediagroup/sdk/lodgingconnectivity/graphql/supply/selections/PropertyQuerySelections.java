//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.selections;

import com.apollographql.apollo.api.CompiledArgument;
import com.apollographql.apollo.api.CompiledField;
import com.apollographql.apollo.api.CompiledListType;
import com.apollographql.apollo.api.CompiledNotNullType;
import com.apollographql.apollo.api.CompiledSelection;
import com.apollographql.apollo.api.CompiledVariable;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.Address;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.Contact;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.ContactType;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.Coordinates;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.CountryCode;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.GraphQLBoolean;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.GraphQLFloat;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.GraphQLID;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.GraphQLString;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.IdNode;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.IdSource;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.Locale;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.LocalizedString;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.PhoneNumber;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.PhoneNumberType;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.Property;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.PropertyLocation;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.PropertyType;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.Query;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.RegulatoryAttribute;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.RegulatoryAttributeValidationResult;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.RegulatoryAttributeValue;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.RegulatoryPurposeValidationResult;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.TaxRecord;
import java.util.Arrays;
import java.util.List;

public class PropertyQuerySelections {
  private static List<CompiledSelection> __names = Arrays.asList(
    new CompiledField.Builder("locale", new CompiledNotNullType(Locale.type)).build(),
    new CompiledField.Builder("value", new CompiledNotNullType(GraphQLString.type)).build()
  );

  private static List<CompiledSelection> __phoneNumbers = Arrays.asList(
    new CompiledField.Builder("areaCode", GraphQLString.type).build(),
    new CompiledField.Builder("countryCode", GraphQLString.type).build(),
    new CompiledField.Builder("extension", GraphQLString.type).build(),
    new CompiledField.Builder("number", new CompiledNotNullType(GraphQLString.type)).build(),
    new CompiledField.Builder("phoneNumberType", new CompiledNotNullType(PhoneNumberType.type)).build()
  );

  private static List<CompiledSelection> __contacts = Arrays.asList(
    new CompiledField.Builder("emailAddresses", new CompiledListType(new CompiledNotNullType(GraphQLString.type))).build(),
    new CompiledField.Builder("name", GraphQLString.type).build(),
    new CompiledField.Builder("type", new CompiledNotNullType(ContactType.type)).build(),
    new CompiledField.Builder("phoneNumbers", new CompiledListType(new CompiledNotNullType(PhoneNumber.type))).selections(__phoneNumbers).build()
  );

  private static List<CompiledSelection> __ids = Arrays.asList(
    new CompiledField.Builder("id", GraphQLID.type).build(),
    new CompiledField.Builder("idSource", new CompiledNotNullType(IdSource.type)).build()
  );

  private static List<CompiledSelection> __type1 = Arrays.asList(
    new CompiledField.Builder("code", new CompiledNotNullType(GraphQLString.type)).build()
  );

  private static List<CompiledSelection> __address = Arrays.asList(
    new CompiledField.Builder("addressLines", new CompiledNotNullType(new CompiledListType(new CompiledNotNullType(GraphQLString.type)))).build(),
    new CompiledField.Builder("administrativeArea", GraphQLString.type).build(),
    new CompiledField.Builder("countryCode", new CompiledNotNullType(CountryCode.type)).build(),
    new CompiledField.Builder("locality", new CompiledNotNullType(GraphQLString.type)).build(),
    new CompiledField.Builder("postalCode", new CompiledNotNullType(GraphQLString.type)).build()
  );

  private static List<CompiledSelection> __coordinates = Arrays.asList(
    new CompiledField.Builder("latitude", new CompiledNotNullType(GraphQLFloat.type)).build(),
    new CompiledField.Builder("longitude", new CompiledNotNullType(GraphQLFloat.type)).build()
  );

  private static List<CompiledSelection> __location = Arrays.asList(
    new CompiledField.Builder("hideExactLocation", new CompiledNotNullType(GraphQLBoolean.type)).build(),
    new CompiledField.Builder("coordinates", Coordinates.type).selections(__coordinates).build()
  );

  private static List<CompiledSelection> __validationResult = Arrays.asList(
    new CompiledField.Builder("messages", new CompiledNotNullType(new CompiledListType(new CompiledNotNullType(GraphQLString.type)))).build(),
    new CompiledField.Builder("valid", new CompiledNotNullType(GraphQLBoolean.type)).build()
  );

  private static List<CompiledSelection> __value1 = Arrays.asList(
    new CompiledField.Builder("type", new CompiledNotNullType(GraphQLString.type)).build(),
    new CompiledField.Builder("value", GraphQLString.type).build()
  );

  private static List<CompiledSelection> __attributes = Arrays.asList(
    new CompiledField.Builder("name", new CompiledNotNullType(GraphQLString.type)).build(),
    new CompiledField.Builder("validationResult", new CompiledNotNullType(RegulatoryAttributeValidationResult.type)).selections(__validationResult).build(),
    new CompiledField.Builder("value", new CompiledNotNullType(RegulatoryAttributeValue.type)).selections(__value1).build()
  );

  private static List<CompiledSelection> __validationResult1 = Arrays.asList(
    new CompiledField.Builder("complianceStatusCode", new CompiledNotNullType(GraphQLString.type)).build(),
    new CompiledField.Builder("messages", new CompiledNotNullType(new CompiledListType(new CompiledNotNullType(GraphQLString.type)))).build()
  );

  private static List<CompiledSelection> __taxRecords = Arrays.asList(
    new CompiledField.Builder("attributes", new CompiledNotNullType(new CompiledListType(new CompiledNotNullType(RegulatoryAttribute.type)))).selections(__attributes).build(),
    new CompiledField.Builder("categoryCode", new CompiledNotNullType(GraphQLString.type)).build(),
    new CompiledField.Builder("validationResult", new CompiledNotNullType(RegulatoryPurposeValidationResult.type)).selections(__validationResult1).build()
  );

  private static List<CompiledSelection> __property = Arrays.asList(
    new CompiledField.Builder("id", new CompiledNotNullType(GraphQLID.type)).build(),
    new CompiledField.Builder("name", new CompiledNotNullType(GraphQLString.type)).build(),
    new CompiledField.Builder("names", new CompiledListType(new CompiledNotNullType(LocalizedString.type))).selections(__names).build(),
    new CompiledField.Builder("defaultLocale", new CompiledNotNullType(Locale.type)).build(),
    new CompiledField.Builder("contacts", new CompiledListType(new CompiledNotNullType(Contact.type))).selections(__contacts).build(),
    new CompiledField.Builder("ids", new CompiledNotNullType(new CompiledListType(new CompiledNotNullType(IdNode.type)))).selections(__ids).build(),
    new CompiledField.Builder("type", new CompiledNotNullType(PropertyType.type)).selections(__type1).build(),
    new CompiledField.Builder("address", new CompiledNotNullType(Address.type)).selections(__address).build(),
    new CompiledField.Builder("location", new CompiledNotNullType(PropertyLocation.type)).selections(__location).build(),
    new CompiledField.Builder("taxRecords", new CompiledNotNullType(new CompiledListType(new CompiledNotNullType(TaxRecord.type)))).selections(__taxRecords).build()
  );

  public static List<CompiledSelection> __root = Arrays.asList(
    new CompiledField.Builder("property", Property.type).arguments(Arrays.asList(new CompiledArgument.Builder(Query.__property_id).value(new CompiledVariable("id")).build(), new CompiledArgument.Builder(Query.__property_idSource).value("EXPEDIA").build())).selections(__property).build()
  );
}
