//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type;

import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

public class BedTypeInput {
  public final Integer quantity;

  public final Optional<Optional<String>> size;

  public final String type;

  private transient volatile int $hashCode;

  private transient volatile boolean $hashCodeMemoized;

  private transient volatile String $toString;

  public BedTypeInput(Integer quantity, Optional<Optional<String>> size, String type) {
    this.quantity = quantity;
    this.size = size;
    this.type = type;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof BedTypeInput) {
      BedTypeInput that = (BedTypeInput) o;
      return ((this.quantity == null) ? (that.quantity == null) : this.quantity.equals(that.quantity))
       &&((this.size == null) ? (that.size == null) : this.size.equals(that.size))
       &&((this.type == null) ? (that.type == null) : this.type.equals(that.type));
    }
    return false;
  }

  @Override
  public int hashCode() {
    if (!$hashCodeMemoized) {
      int __h = 1;
      __h *= 1000003;
      __h ^= (quantity == null) ? 0 : quantity.hashCode();
      __h *= 1000003;
      __h ^= (size == null) ? 0 : size.hashCode();
      __h *= 1000003;
      __h ^= (type == null) ? 0 : type.hashCode();
      $hashCode = __h;
      $hashCodeMemoized = true;
    }
    return $hashCode;
  }

  @Override
  public String toString() {
    if ($toString == null) {
      $toString = "BedTypeInput{"
        + "quantity=" + quantity + ", "
        + "size=" + size + ", "
        + "type=" + type
        + "}";
    }
    return $toString;
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private Integer quantity;

    private Optional<Optional<String>> size = Optional.empty();

    private String type;

    Builder() {
    }

    public Builder quantity(Integer quantity) {
      this.quantity = quantity;
      return this;
    }

    public Builder size(@NotNull Optional<String> size) {
      this.size = Optional.of(size);
      return this;
    }

    public Builder type(String type) {
      this.type = type;
      return this;
    }

    public BedTypeInput build() {
      return new BedTypeInput(quantity, size, type);
    }
  }
}
