//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type;

import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

public class FiltersInput {
  public final Optional<Optional<PromotionStatus>> status;

  public final Optional<Optional<List<DiscountType>>> discountTypes;

  public final Optional<Optional<String>> id;

  public final Optional<Optional<BookingLocalDateTimeInput>> bookingLocalDateTime;

  public final Optional<Optional<TravelDateInput>> travelDate;

  private transient volatile int $hashCode;

  private transient volatile boolean $hashCodeMemoized;

  private transient volatile String $toString;

  public FiltersInput(Optional<Optional<PromotionStatus>> status,
      Optional<Optional<List<DiscountType>>> discountTypes, Optional<Optional<String>> id,
      Optional<Optional<BookingLocalDateTimeInput>> bookingLocalDateTime,
      Optional<Optional<TravelDateInput>> travelDate) {
    this.status = status;
    this.discountTypes = discountTypes;
    this.id = id;
    this.bookingLocalDateTime = bookingLocalDateTime;
    this.travelDate = travelDate;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof FiltersInput) {
      FiltersInput that = (FiltersInput) o;
      return ((this.status == null) ? (that.status == null) : this.status.equals(that.status))
       &&((this.discountTypes == null) ? (that.discountTypes == null) : this.discountTypes.equals(that.discountTypes))
       &&((this.id == null) ? (that.id == null) : this.id.equals(that.id))
       &&((this.bookingLocalDateTime == null) ? (that.bookingLocalDateTime == null) : this.bookingLocalDateTime.equals(that.bookingLocalDateTime))
       &&((this.travelDate == null) ? (that.travelDate == null) : this.travelDate.equals(that.travelDate));
    }
    return false;
  }

  @Override
  public int hashCode() {
    if (!$hashCodeMemoized) {
      int __h = 1;
      __h *= 1000003;
      __h ^= (status == null) ? 0 : status.hashCode();
      __h *= 1000003;
      __h ^= (discountTypes == null) ? 0 : discountTypes.hashCode();
      __h *= 1000003;
      __h ^= (id == null) ? 0 : id.hashCode();
      __h *= 1000003;
      __h ^= (bookingLocalDateTime == null) ? 0 : bookingLocalDateTime.hashCode();
      __h *= 1000003;
      __h ^= (travelDate == null) ? 0 : travelDate.hashCode();
      $hashCode = __h;
      $hashCodeMemoized = true;
    }
    return $hashCode;
  }

  @Override
  public String toString() {
    if ($toString == null) {
      $toString = "FiltersInput{"
        + "status=" + status + ", "
        + "discountTypes=" + discountTypes + ", "
        + "id=" + id + ", "
        + "bookingLocalDateTime=" + bookingLocalDateTime + ", "
        + "travelDate=" + travelDate
        + "}";
    }
    return $toString;
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private Optional<Optional<PromotionStatus>> status = Optional.empty();

    private Optional<Optional<List<DiscountType>>> discountTypes = Optional.empty();

    private Optional<Optional<String>> id = Optional.empty();

    private Optional<Optional<BookingLocalDateTimeInput>> bookingLocalDateTime = Optional.empty();

    private Optional<Optional<TravelDateInput>> travelDate = Optional.empty();

    Builder() {
    }

    /**
     * Status of the promotions.
     */
    public Builder status(@NotNull Optional<PromotionStatus> status) {
      this.status = Optional.of(status);
      return this;
    }

    /**
     * List of discount types.
     */
    public Builder discountTypes(@NotNull Optional<List<DiscountType>> discountTypes) {
      this.discountTypes = Optional.of(discountTypes);
      return this;
    }

    /**
     * Id of the Promotion as stored in the Expedia platform.
     */
    public Builder id(@NotNull Optional<String> id) {
      this.id = Optional.of(id);
      return this;
    }

    /**
     * The Booking Window being queried for in Date Time format.
     * YYYY-MM-DDThh:mm:ss . Timezone is the time with respect to the property location.
     */
    public Builder bookingLocalDateTime(
        @NotNull Optional<BookingLocalDateTimeInput> bookingLocalDateTime) {
      this.bookingLocalDateTime = Optional.of(bookingLocalDateTime);
      return this;
    }

    /**
     * The Travel date window being queried for in Date format YYYY-MM-DD
     */
    public Builder travelDate(@NotNull Optional<TravelDateInput> travelDate) {
      this.travelDate = Optional.of(travelDate);
      return this;
    }

    public FiltersInput build() {
      return new FiltersInput(status, discountTypes, id, bookingLocalDateTime, travelDate);
    }
  }
}
