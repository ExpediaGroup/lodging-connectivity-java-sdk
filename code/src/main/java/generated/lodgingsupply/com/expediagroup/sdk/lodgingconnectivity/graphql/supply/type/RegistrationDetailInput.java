//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.4'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type;

import com.apollographql.apollo3.api.Optional;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.List;

/**
 * Registration information for each bookable unit of a multi-unit property.
 */
public class RegistrationDetailInput {
  public final Optional<List<AcknowledgementRecordInput>> acknowledgementRecords;

  public final Optional<List<ApplicableRegulationsInput>> applicableRegulations;

  public final Optional<List<AttachmentUrlInput>> attachmentUrls;

  public final Optional<String> displayRegistrationNumber;

  public final Optional<List<ExemptionCategory>> exemptionCategories;

  public final Optional<Integer> numberOfPhysicalRooms;

  public final List<RegistrationRecordInput> registrationRecords;

  public final RegulatoryCategory regulatoryCategory;

  public final Optional<String> regulatorySubType;

  public final String regulatoryType;

  public final String unitId;

  private transient volatile int $hashCode;

  private transient volatile boolean $hashCodeMemoized;

  private transient volatile String $toString;

  public RegistrationDetailInput(Optional<List<AcknowledgementRecordInput>> acknowledgementRecords,
      Optional<List<ApplicableRegulationsInput>> applicableRegulations,
      Optional<List<AttachmentUrlInput>> attachmentUrls, Optional<String> displayRegistrationNumber,
      Optional<List<ExemptionCategory>> exemptionCategories,
      Optional<Integer> numberOfPhysicalRooms, List<RegistrationRecordInput> registrationRecords,
      RegulatoryCategory regulatoryCategory, Optional<String> regulatorySubType,
      String regulatoryType, String unitId) {
    this.acknowledgementRecords = acknowledgementRecords;
    this.applicableRegulations = applicableRegulations;
    this.attachmentUrls = attachmentUrls;
    this.displayRegistrationNumber = displayRegistrationNumber;
    this.exemptionCategories = exemptionCategories;
    this.numberOfPhysicalRooms = numberOfPhysicalRooms;
    this.registrationRecords = registrationRecords;
    this.regulatoryCategory = regulatoryCategory;
    this.regulatorySubType = regulatorySubType;
    this.regulatoryType = regulatoryType;
    this.unitId = unitId;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof RegistrationDetailInput) {
      RegistrationDetailInput that = (RegistrationDetailInput) o;
      return ((this.acknowledgementRecords == null) ? (that.acknowledgementRecords == null) : this.acknowledgementRecords.equals(that.acknowledgementRecords))
       &&((this.applicableRegulations == null) ? (that.applicableRegulations == null) : this.applicableRegulations.equals(that.applicableRegulations))
       &&((this.attachmentUrls == null) ? (that.attachmentUrls == null) : this.attachmentUrls.equals(that.attachmentUrls))
       &&((this.displayRegistrationNumber == null) ? (that.displayRegistrationNumber == null) : this.displayRegistrationNumber.equals(that.displayRegistrationNumber))
       &&((this.exemptionCategories == null) ? (that.exemptionCategories == null) : this.exemptionCategories.equals(that.exemptionCategories))
       &&((this.numberOfPhysicalRooms == null) ? (that.numberOfPhysicalRooms == null) : this.numberOfPhysicalRooms.equals(that.numberOfPhysicalRooms))
       &&((this.registrationRecords == null) ? (that.registrationRecords == null) : this.registrationRecords.equals(that.registrationRecords))
       &&((this.regulatoryCategory == null) ? (that.regulatoryCategory == null) : this.regulatoryCategory.equals(that.regulatoryCategory))
       &&((this.regulatorySubType == null) ? (that.regulatorySubType == null) : this.regulatorySubType.equals(that.regulatorySubType))
       &&((this.regulatoryType == null) ? (that.regulatoryType == null) : this.regulatoryType.equals(that.regulatoryType))
       &&((this.unitId == null) ? (that.unitId == null) : this.unitId.equals(that.unitId));
    }
    return false;
  }

  @Override
  public int hashCode() {
    if (!$hashCodeMemoized) {
      int __h = 1;
      __h *= 1000003;
      __h ^= (acknowledgementRecords == null) ? 0 : acknowledgementRecords.hashCode();
      __h *= 1000003;
      __h ^= (applicableRegulations == null) ? 0 : applicableRegulations.hashCode();
      __h *= 1000003;
      __h ^= (attachmentUrls == null) ? 0 : attachmentUrls.hashCode();
      __h *= 1000003;
      __h ^= (displayRegistrationNumber == null) ? 0 : displayRegistrationNumber.hashCode();
      __h *= 1000003;
      __h ^= (exemptionCategories == null) ? 0 : exemptionCategories.hashCode();
      __h *= 1000003;
      __h ^= (numberOfPhysicalRooms == null) ? 0 : numberOfPhysicalRooms.hashCode();
      __h *= 1000003;
      __h ^= (registrationRecords == null) ? 0 : registrationRecords.hashCode();
      __h *= 1000003;
      __h ^= (regulatoryCategory == null) ? 0 : regulatoryCategory.hashCode();
      __h *= 1000003;
      __h ^= (regulatorySubType == null) ? 0 : regulatorySubType.hashCode();
      __h *= 1000003;
      __h ^= (regulatoryType == null) ? 0 : regulatoryType.hashCode();
      __h *= 1000003;
      __h ^= (unitId == null) ? 0 : unitId.hashCode();
      $hashCode = __h;
      $hashCodeMemoized = true;
    }
    return $hashCode;
  }

  @Override
  public String toString() {
    if ($toString == null) {
      $toString = "RegistrationDetailInput{"
        + "acknowledgementRecords=" + acknowledgementRecords + ", "
        + "applicableRegulations=" + applicableRegulations + ", "
        + "attachmentUrls=" + attachmentUrls + ", "
        + "displayRegistrationNumber=" + displayRegistrationNumber + ", "
        + "exemptionCategories=" + exemptionCategories + ", "
        + "numberOfPhysicalRooms=" + numberOfPhysicalRooms + ", "
        + "registrationRecords=" + registrationRecords + ", "
        + "regulatoryCategory=" + regulatoryCategory + ", "
        + "regulatorySubType=" + regulatorySubType + ", "
        + "regulatoryType=" + regulatoryType + ", "
        + "unitId=" + unitId
        + "}";
    }
    return $toString;
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private Optional<List<AcknowledgementRecordInput>> acknowledgementRecords = Optional.absent();

    private Optional<List<ApplicableRegulationsInput>> applicableRegulations = Optional.absent();

    private Optional<List<AttachmentUrlInput>> attachmentUrls = Optional.absent();

    private Optional<String> displayRegistrationNumber = Optional.absent();

    private Optional<List<ExemptionCategory>> exemptionCategories = Optional.absent();

    private Optional<Integer> numberOfPhysicalRooms = Optional.absent();

    private List<RegistrationRecordInput> registrationRecords;

    private RegulatoryCategory regulatoryCategory;

    private Optional<String> regulatorySubType = Optional.absent();

    private String regulatoryType;

    private String unitId;

    Builder() {
    }

    /**
     * Acknowledgement records for the bookable unit.
     */
    public Builder acknowledgementRecords(List<AcknowledgementRecordInput> acknowledgementRecords) {
      this.acknowledgementRecords = Optional.present(acknowledgementRecords);
      return this;
    }

    /**
     * Additional information about the bookable unit required by certain districts.
     */
    public Builder applicableRegulations(List<ApplicableRegulationsInput> applicableRegulations) {
      this.applicableRegulations = Optional.present(applicableRegulations);
      return this;
    }

    /**
     * Links for registration documentation files (if required).
     */
    public Builder attachmentUrls(List<AttachmentUrlInput> attachmentUrls) {
      this.attachmentUrls = Optional.present(attachmentUrls);
      return this;
    }

    /**
     * Registration number displayed to the traveler.
     */
    public Builder displayRegistrationNumber(String displayRegistrationNumber) {
      this.displayRegistrationNumber = Optional.present(displayRegistrationNumber);
      return this;
    }

    /**
     * List of exemptions for the property, such as maximum night cap.
     */
    public Builder exemptionCategories(List<ExemptionCategory> exemptionCategories) {
      this.exemptionCategories = Optional.present(exemptionCategories);
      return this;
    }

    /**
     * Number of rooms in the bookable unit.
     */
    public Builder numberOfPhysicalRooms(Integer numberOfPhysicalRooms) {
      this.numberOfPhysicalRooms = Optional.present(numberOfPhysicalRooms);
      return this;
    }

    /**
     * Registration records for the bookable unit filed with the governing jurisdiction.
     */
    public Builder registrationRecords(List<RegistrationRecordInput> registrationRecords) {
      this.registrationRecords = registrationRecords;
      return this;
    }

    /**
     * Property classification category as maintained by the governing jurisdiction.
     */
    public Builder regulatoryCategory(RegulatoryCategory regulatoryCategory) {
      this.regulatoryCategory = regulatoryCategory;
      return this;
    }

    /**
     * Property subtype, such as primary or secondary, or null if not applicable.
     */
    public Builder regulatorySubType(String regulatorySubType) {
      this.regulatorySubType = Optional.present(regulatorySubType);
      return this;
    }

    /**
     * Property type, such as boat, trailer, residence, etc.
     */
    public Builder regulatoryType(String regulatoryType) {
      this.regulatoryType = regulatoryType;
      return this;
    }

    /**
     * Unit ID assigned by Expedia Group.
     */
    public Builder unitId(String unitId) {
      this.unitId = unitId;
      return this;
    }

    public RegistrationDetailInput build() {
      return new RegistrationDetailInput(acknowledgementRecords, applicableRegulations, attachmentUrls, displayRegistrationNumber, exemptionCategories, numberOfPhysicalRooms, registrationRecords, regulatoryCategory, regulatorySubType, regulatoryType, unitId);
    }
  }
}
