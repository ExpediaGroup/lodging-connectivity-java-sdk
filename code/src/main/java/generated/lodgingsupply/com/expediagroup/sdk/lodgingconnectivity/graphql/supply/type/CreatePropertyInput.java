//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type;

import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

public class CreatePropertyInput {
  public final CreateAddressInput address;

  public final Optional<Optional<List<AmenityInput>>> amenities;

  public final Optional<Optional<String>> clientMutationId;

  public final Optional<Optional<SavePropertyContactInput>> contact;

  public final CreatePropertyLocationInput location;

  public final String name;

  public final Optional<Optional<List<LocalizedStringInput>>> names;

  public final Optional<Optional<CreatePoliciesInput>> policies;

  public final Optional<Optional<String>> referenceName;

  public final String supplierPropertyId;

  public final Optional<Optional<String>> supplierUnitId;

  public final Optional<Optional<List<TextInput>>> text;

  public final Optional<Optional<String>> type;

  private transient volatile int $hashCode;

  private transient volatile boolean $hashCodeMemoized;

  private transient volatile String $toString;

  public CreatePropertyInput(CreateAddressInput address,
      Optional<Optional<List<AmenityInput>>> amenities, Optional<Optional<String>> clientMutationId,
      Optional<Optional<SavePropertyContactInput>> contact, CreatePropertyLocationInput location,
      String name, Optional<Optional<List<LocalizedStringInput>>> names,
      Optional<Optional<CreatePoliciesInput>> policies, Optional<Optional<String>> referenceName,
      String supplierPropertyId, Optional<Optional<String>> supplierUnitId,
      Optional<Optional<List<TextInput>>> text, Optional<Optional<String>> type) {
    this.address = address;
    this.amenities = amenities;
    this.clientMutationId = clientMutationId;
    this.contact = contact;
    this.location = location;
    this.name = name;
    this.names = names;
    this.policies = policies;
    this.referenceName = referenceName;
    this.supplierPropertyId = supplierPropertyId;
    this.supplierUnitId = supplierUnitId;
    this.text = text;
    this.type = type;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof CreatePropertyInput) {
      CreatePropertyInput that = (CreatePropertyInput) o;
      return ((this.address == null) ? (that.address == null) : this.address.equals(that.address))
       &&((this.amenities == null) ? (that.amenities == null) : this.amenities.equals(that.amenities))
       &&((this.clientMutationId == null) ? (that.clientMutationId == null) : this.clientMutationId.equals(that.clientMutationId))
       &&((this.contact == null) ? (that.contact == null) : this.contact.equals(that.contact))
       &&((this.location == null) ? (that.location == null) : this.location.equals(that.location))
       &&((this.name == null) ? (that.name == null) : this.name.equals(that.name))
       &&((this.names == null) ? (that.names == null) : this.names.equals(that.names))
       &&((this.policies == null) ? (that.policies == null) : this.policies.equals(that.policies))
       &&((this.referenceName == null) ? (that.referenceName == null) : this.referenceName.equals(that.referenceName))
       &&((this.supplierPropertyId == null) ? (that.supplierPropertyId == null) : this.supplierPropertyId.equals(that.supplierPropertyId))
       &&((this.supplierUnitId == null) ? (that.supplierUnitId == null) : this.supplierUnitId.equals(that.supplierUnitId))
       &&((this.text == null) ? (that.text == null) : this.text.equals(that.text))
       &&((this.type == null) ? (that.type == null) : this.type.equals(that.type));
    }
    return false;
  }

  @Override
  public int hashCode() {
    if (!$hashCodeMemoized) {
      int __h = 1;
      __h *= 1000003;
      __h ^= (address == null) ? 0 : address.hashCode();
      __h *= 1000003;
      __h ^= (amenities == null) ? 0 : amenities.hashCode();
      __h *= 1000003;
      __h ^= (clientMutationId == null) ? 0 : clientMutationId.hashCode();
      __h *= 1000003;
      __h ^= (contact == null) ? 0 : contact.hashCode();
      __h *= 1000003;
      __h ^= (location == null) ? 0 : location.hashCode();
      __h *= 1000003;
      __h ^= (name == null) ? 0 : name.hashCode();
      __h *= 1000003;
      __h ^= (names == null) ? 0 : names.hashCode();
      __h *= 1000003;
      __h ^= (policies == null) ? 0 : policies.hashCode();
      __h *= 1000003;
      __h ^= (referenceName == null) ? 0 : referenceName.hashCode();
      __h *= 1000003;
      __h ^= (supplierPropertyId == null) ? 0 : supplierPropertyId.hashCode();
      __h *= 1000003;
      __h ^= (supplierUnitId == null) ? 0 : supplierUnitId.hashCode();
      __h *= 1000003;
      __h ^= (text == null) ? 0 : text.hashCode();
      __h *= 1000003;
      __h ^= (type == null) ? 0 : type.hashCode();
      $hashCode = __h;
      $hashCodeMemoized = true;
    }
    return $hashCode;
  }

  @Override
  public String toString() {
    if ($toString == null) {
      $toString = "CreatePropertyInput{"
        + "address=" + address + ", "
        + "amenities=" + amenities + ", "
        + "clientMutationId=" + clientMutationId + ", "
        + "contact=" + contact + ", "
        + "location=" + location + ", "
        + "name=" + name + ", "
        + "names=" + names + ", "
        + "policies=" + policies + ", "
        + "referenceName=" + referenceName + ", "
        + "supplierPropertyId=" + supplierPropertyId + ", "
        + "supplierUnitId=" + supplierUnitId + ", "
        + "text=" + text + ", "
        + "type=" + type
        + "}";
    }
    return $toString;
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private CreateAddressInput address;

    private Optional<Optional<List<AmenityInput>>> amenities = Optional.empty();

    private Optional<Optional<String>> clientMutationId = Optional.empty();

    private Optional<Optional<SavePropertyContactInput>> contact = Optional.empty();

    private CreatePropertyLocationInput location;

    private String name;

    private Optional<Optional<List<LocalizedStringInput>>> names = Optional.empty();

    private Optional<Optional<CreatePoliciesInput>> policies = Optional.empty();

    private Optional<Optional<String>> referenceName = Optional.empty();

    private String supplierPropertyId;

    private Optional<Optional<String>> supplierUnitId = Optional.empty();

    private Optional<Optional<List<TextInput>>> text = Optional.empty();

    private Optional<Optional<String>> type = Optional.empty();

    Builder() {
    }

    public Builder address(CreateAddressInput address) {
      this.address = address;
      return this;
    }

    public Builder amenities(@NotNull Optional<List<AmenityInput>> amenities) {
      this.amenities = Optional.of(amenities);
      return this;
    }

    public Builder clientMutationId(@NotNull Optional<String> clientMutationId) {
      this.clientMutationId = Optional.of(clientMutationId);
      return this;
    }

    public Builder contact(@NotNull Optional<SavePropertyContactInput> contact) {
      this.contact = Optional.of(contact);
      return this;
    }

    public Builder location(CreatePropertyLocationInput location) {
      this.location = location;
      return this;
    }

    public Builder name(String name) {
      this.name = name;
      return this;
    }

    public Builder names(@NotNull Optional<List<LocalizedStringInput>> names) {
      this.names = Optional.of(names);
      return this;
    }

    public Builder policies(@NotNull Optional<CreatePoliciesInput> policies) {
      this.policies = Optional.of(policies);
      return this;
    }

    public Builder referenceName(@NotNull Optional<String> referenceName) {
      this.referenceName = Optional.of(referenceName);
      return this;
    }

    public Builder supplierPropertyId(String supplierPropertyId) {
      this.supplierPropertyId = supplierPropertyId;
      return this;
    }

    public Builder supplierUnitId(@NotNull Optional<String> supplierUnitId) {
      this.supplierUnitId = Optional.of(supplierUnitId);
      return this;
    }

    public Builder text(@NotNull Optional<List<TextInput>> text) {
      this.text = Optional.of(text);
      return this;
    }

    public Builder type(@NotNull Optional<String> type) {
      this.type = Optional.of(type);
      return this;
    }

    public CreatePropertyInput build() {
      return new CreatePropertyInput(address, amenities, clientMutationId, contact, location, name, names, policies, referenceName, supplierPropertyId, supplierUnitId, text, type);
    }
  }
}
