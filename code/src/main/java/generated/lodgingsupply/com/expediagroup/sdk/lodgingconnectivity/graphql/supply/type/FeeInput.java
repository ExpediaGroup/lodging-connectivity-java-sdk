//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.4'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type;

import com.apollographql.apollo3.api.Optional;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.List;

public class FeeInput {
  public final Optional<FeeAgeCategory> ageCategory;

  public final List<FeeChargeInput> charges;

  public final String name;

  public final Optional<FeeRestrictionsInput> restrictions;

  public final String scope;

  public final Optional<Boolean> taxable;

  public final String type;

  public final Optional<Boolean> variesByLengthOfStay;

  private transient volatile int $hashCode;

  private transient volatile boolean $hashCodeMemoized;

  private transient volatile String $toString;

  public FeeInput(Optional<FeeAgeCategory> ageCategory, List<FeeChargeInput> charges, String name,
      Optional<FeeRestrictionsInput> restrictions, String scope, Optional<Boolean> taxable,
      String type, Optional<Boolean> variesByLengthOfStay) {
    this.ageCategory = ageCategory;
    this.charges = charges;
    this.name = name;
    this.restrictions = restrictions;
    this.scope = scope;
    this.taxable = taxable;
    this.type = type;
    this.variesByLengthOfStay = variesByLengthOfStay;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof FeeInput) {
      FeeInput that = (FeeInput) o;
      return ((this.ageCategory == null) ? (that.ageCategory == null) : this.ageCategory.equals(that.ageCategory))
       &&((this.charges == null) ? (that.charges == null) : this.charges.equals(that.charges))
       &&((this.name == null) ? (that.name == null) : this.name.equals(that.name))
       &&((this.restrictions == null) ? (that.restrictions == null) : this.restrictions.equals(that.restrictions))
       &&((this.scope == null) ? (that.scope == null) : this.scope.equals(that.scope))
       &&((this.taxable == null) ? (that.taxable == null) : this.taxable.equals(that.taxable))
       &&((this.type == null) ? (that.type == null) : this.type.equals(that.type))
       &&((this.variesByLengthOfStay == null) ? (that.variesByLengthOfStay == null) : this.variesByLengthOfStay.equals(that.variesByLengthOfStay));
    }
    return false;
  }

  @Override
  public int hashCode() {
    if (!$hashCodeMemoized) {
      int __h = 1;
      __h *= 1000003;
      __h ^= (ageCategory == null) ? 0 : ageCategory.hashCode();
      __h *= 1000003;
      __h ^= (charges == null) ? 0 : charges.hashCode();
      __h *= 1000003;
      __h ^= (name == null) ? 0 : name.hashCode();
      __h *= 1000003;
      __h ^= (restrictions == null) ? 0 : restrictions.hashCode();
      __h *= 1000003;
      __h ^= (scope == null) ? 0 : scope.hashCode();
      __h *= 1000003;
      __h ^= (taxable == null) ? 0 : taxable.hashCode();
      __h *= 1000003;
      __h ^= (type == null) ? 0 : type.hashCode();
      __h *= 1000003;
      __h ^= (variesByLengthOfStay == null) ? 0 : variesByLengthOfStay.hashCode();
      $hashCode = __h;
      $hashCodeMemoized = true;
    }
    return $hashCode;
  }

  @Override
  public String toString() {
    if ($toString == null) {
      $toString = "FeeInput{"
        + "ageCategory=" + ageCategory + ", "
        + "charges=" + charges + ", "
        + "name=" + name + ", "
        + "restrictions=" + restrictions + ", "
        + "scope=" + scope + ", "
        + "taxable=" + taxable + ", "
        + "type=" + type + ", "
        + "variesByLengthOfStay=" + variesByLengthOfStay
        + "}";
    }
    return $toString;
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private Optional<FeeAgeCategory> ageCategory = Optional.absent();

    private List<FeeChargeInput> charges;

    private String name;

    private Optional<FeeRestrictionsInput> restrictions = Optional.absent();

    private String scope;

    private Optional<Boolean> taxable = Optional.absent();

    private String type;

    private Optional<Boolean> variesByLengthOfStay = Optional.absent();

    Builder() {
    }

    public Builder ageCategory(FeeAgeCategory ageCategory) {
      this.ageCategory = Optional.present(ageCategory);
      return this;
    }

    public Builder charges(List<FeeChargeInput> charges) {
      this.charges = charges;
      return this;
    }

    public Builder name(String name) {
      this.name = name;
      return this;
    }

    public Builder restrictions(FeeRestrictionsInput restrictions) {
      this.restrictions = Optional.present(restrictions);
      return this;
    }

    public Builder scope(String scope) {
      this.scope = scope;
      return this;
    }

    public Builder taxable(Boolean taxable) {
      this.taxable = Optional.present(taxable);
      return this;
    }

    public Builder type(String type) {
      this.type = type;
      return this;
    }

    public Builder variesByLengthOfStay(Boolean variesByLengthOfStay) {
      this.variesByLengthOfStay = Optional.present(variesByLengthOfStay);
      return this;
    }

    public FeeInput build() {
      return new FeeInput(ageCategory, charges, name, restrictions, scope, taxable, type, variesByLengthOfStay);
    }
  }
}
