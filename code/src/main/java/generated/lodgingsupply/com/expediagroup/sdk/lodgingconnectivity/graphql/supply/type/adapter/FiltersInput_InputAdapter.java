//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter;

import com.apollographql.apollo.api.Adapter;
import com.apollographql.apollo.api.CustomScalarAdapters;
import com.apollographql.apollo.api.ListAdapter;
import com.apollographql.apollo.api.ObjectAdapter;
import com.apollographql.apollo.api.json.JsonReader;
import com.apollographql.apollo.api.json.JsonWriter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.BookingLocalDateTimeInput;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.FiltersInput;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.TravelDateInput;
import java.io.IOException;
import java.lang.IllegalStateException;
import java.lang.Override;

public enum FiltersInput_InputAdapter implements Adapter<FiltersInput> {
  INSTANCE;

  @Override
  public FiltersInput fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters) throws
      IOException {
    throw new IllegalStateException("Input type used in output position");
  }

  @Override
  public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
      FiltersInput value) throws IOException {
    if (value.status.isPresent()) {
      writer.name("status");
      new OptionalAdapter<>(new OptionalAdapter<>(PromotionStatus_ResponseAdapter.INSTANCE)).toJson(writer, customScalarAdapters, value.status);
    }
    if (value.discountTypes.isPresent()) {
      writer.name("discountTypes");
      new OptionalAdapter<>(new OptionalAdapter<>(new ListAdapter<>(DiscountType_ResponseAdapter.INSTANCE))).toJson(writer, customScalarAdapters, value.discountTypes);
    }
    if (value.id.isPresent()) {
      writer.name("id");
      new OptionalAdapter<>(OptionalAdapters.OptionalStringAdapter).toJson(writer, customScalarAdapters, value.id);
    }
    if (value.bookingLocalDateTime.isPresent()) {
      writer.name("bookingLocalDateTime");
      new OptionalAdapter<>(new OptionalAdapter<>(new ObjectAdapter<BookingLocalDateTimeInput>(BookingLocalDateTimeInput_InputAdapter.INSTANCE, false))).toJson(writer, customScalarAdapters, value.bookingLocalDateTime);
    }
    if (value.travelDate.isPresent()) {
      writer.name("travelDate");
      new OptionalAdapter<>(new OptionalAdapter<>(new ObjectAdapter<TravelDateInput>(TravelDateInput_InputAdapter.INSTANCE, false))).toJson(writer, customScalarAdapters, value.travelDate);
    }
  }
}
