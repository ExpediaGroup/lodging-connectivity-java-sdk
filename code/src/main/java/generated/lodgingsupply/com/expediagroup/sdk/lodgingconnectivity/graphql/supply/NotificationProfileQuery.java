//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply;

import com.apollographql.apollo.api.Adapter;
import com.apollographql.apollo.api.CompiledField;
import com.apollographql.apollo.api.CustomScalarAdapters;
import com.apollographql.apollo.api.ObjectAdapter;
import com.apollographql.apollo.api.Query;
import com.apollographql.apollo.api.json.JsonWriter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.adapter.NotificationProfileQuery_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.selections.NotificationProfileQuerySelections;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.net.URL;
import java.time.LocalDateTime;
import java.util.List;

public class NotificationProfileQuery implements Query<NotificationProfileQuery.Data> {
  public static final String OPERATION_ID = "6a8d9143cf2de99bd7e95fcdf67c38650925fb92e21b12e370eacb023b32a226";

  /**
   * The minimized GraphQL document being sent to the server to save a few bytes.
   * The un-minimized version is:
   *
   * query NotificationProfile {
   *   notificationProfile {
   *     callbackConfigs {
   *       callbackUrl
   *       contactEmail
   *       id
   *       requestTimeoutSeconds
   *       secretExpirationDateTime
   *     }
   *     subscriptions {
   *       eventTypeSubscriptions {
   *         callbackConfig {
   *           callbackUrl
   *           contactEmail
   *           id
   *           requestTimeoutSeconds
   *           secretExpirationDateTime
   *         }
   *         eventType
   *       }
   *       product
   *     }
   *   }
   * }
   */
  public static final String OPERATION_DOCUMENT = "query NotificationProfile { notificationProfile { callbackConfigs { callbackUrl contactEmail id requestTimeoutSeconds secretExpirationDateTime } subscriptions { eventTypeSubscriptions { callbackConfig { callbackUrl contactEmail id requestTimeoutSeconds secretExpirationDateTime } eventType } product } } }";

  public static final String OPERATION_NAME = "NotificationProfile";

  private transient volatile int $hashCode;

  private transient volatile boolean $hashCodeMemoized;

  private transient volatile String $toString;

  public NotificationProfileQuery() {

  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof NotificationProfileQuery) {
      return true;
    }
    return false;
  }

  @Override
  public int hashCode() {
    if (!$hashCodeMemoized) {
      int __h = 1;
      $hashCode = __h;
      $hashCodeMemoized = true;
    }
    return $hashCode;
  }

  @Override
  public String toString() {
    if ($toString == null) {
      $toString = "NotificationProfileQuery{"
        + "}";
    }
    return $toString;
  }

  public static Builder builder() {
    return new Builder();
  }

  @Override
  public String id() {
    return OPERATION_ID;
  }

  @Override
  public String document() {
    return OPERATION_DOCUMENT;
  }

  @Override
  public String name() {
    return OPERATION_NAME;
  }

  @Override
  public void serializeVariables(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
      boolean withDefaultValues) throws IOException {
    // This operation doesn't have any variable
  }

  @Override
  public Adapter<Data> adapter() {
    return new ObjectAdapter<Data>(NotificationProfileQuery_ResponseAdapter.Data.INSTANCE, false);
  }

  @Override
  public CompiledField rootField() {
    return new CompiledField.Builder(
      "data",
      com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.Query.type
    )
    .selections(NotificationProfileQuerySelections.__root)
    .build();
  }

  public static final class Builder {
    Builder() {
    }

    public NotificationProfileQuery build() {
      return new NotificationProfileQuery();
    }
  }

  public static class Data implements Query.Data {
    /**
     * Retrieves configurations on notification platform
     */
    public NotificationProfile notificationProfile;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    private transient volatile String $toString;

    public Data(NotificationProfile notificationProfile) {
      this.notificationProfile = notificationProfile;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof Data) {
        Data that = (Data) o;
        return ((this.notificationProfile == null) ? (that.notificationProfile == null) : this.notificationProfile.equals(that.notificationProfile));
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int __h = 1;
        __h *= 1000003;
        __h ^= (notificationProfile == null) ? 0 : notificationProfile.hashCode();
        $hashCode = __h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "Data{"
          + "notificationProfile=" + notificationProfile
          + "}";
      }
      return $toString;
    }
  }

  public static class NotificationProfile {
    /**
     * Retrieve callback configurations of notification profile
     */
    public List<CallbackConfig> callbackConfigs;

    /**
     * Retrieve subscriptions of notification profile
     */
    public List<Subscription> subscriptions;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    private transient volatile String $toString;

    public NotificationProfile(List<CallbackConfig> callbackConfigs,
        List<Subscription> subscriptions) {
      this.callbackConfigs = callbackConfigs;
      this.subscriptions = subscriptions;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof NotificationProfile) {
        NotificationProfile that = (NotificationProfile) o;
        return ((this.callbackConfigs == null) ? (that.callbackConfigs == null) : this.callbackConfigs.equals(that.callbackConfigs))
         &&((this.subscriptions == null) ? (that.subscriptions == null) : this.subscriptions.equals(that.subscriptions));
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int __h = 1;
        __h *= 1000003;
        __h ^= (callbackConfigs == null) ? 0 : callbackConfigs.hashCode();
        __h *= 1000003;
        __h ^= (subscriptions == null) ? 0 : subscriptions.hashCode();
        $hashCode = __h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "NotificationProfile{"
          + "callbackConfigs=" + callbackConfigs + ", "
          + "subscriptions=" + subscriptions
          + "}";
      }
      return $toString;
    }
  }

  public static class CallbackConfig {
    /**
     * Callback url where the notification will be delivered
     */
    public URL callbackUrl;

    /**
     * Email address for correspondence
     */
    public String contactEmail;

    /**
     * Id of the callback configuration object
     */
    public String id;

    /**
     * Request timeout when sending a notification on the callback url
     */
    public Integer requestTimeoutSeconds;

    /**
     * Secret expiration date time
     */
    public LocalDateTime secretExpirationDateTime;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    private transient volatile String $toString;

    public CallbackConfig(URL callbackUrl, String contactEmail, String id,
        Integer requestTimeoutSeconds, LocalDateTime secretExpirationDateTime) {
      this.callbackUrl = callbackUrl;
      this.contactEmail = contactEmail;
      this.id = id;
      this.requestTimeoutSeconds = requestTimeoutSeconds;
      this.secretExpirationDateTime = secretExpirationDateTime;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof CallbackConfig) {
        CallbackConfig that = (CallbackConfig) o;
        return ((this.callbackUrl == null) ? (that.callbackUrl == null) : this.callbackUrl.equals(that.callbackUrl))
         &&((this.contactEmail == null) ? (that.contactEmail == null) : this.contactEmail.equals(that.contactEmail))
         &&((this.id == null) ? (that.id == null) : this.id.equals(that.id))
         &&((this.requestTimeoutSeconds == null) ? (that.requestTimeoutSeconds == null) : this.requestTimeoutSeconds.equals(that.requestTimeoutSeconds))
         &&((this.secretExpirationDateTime == null) ? (that.secretExpirationDateTime == null) : this.secretExpirationDateTime.equals(that.secretExpirationDateTime));
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int __h = 1;
        __h *= 1000003;
        __h ^= (callbackUrl == null) ? 0 : callbackUrl.hashCode();
        __h *= 1000003;
        __h ^= (contactEmail == null) ? 0 : contactEmail.hashCode();
        __h *= 1000003;
        __h ^= (id == null) ? 0 : id.hashCode();
        __h *= 1000003;
        __h ^= (requestTimeoutSeconds == null) ? 0 : requestTimeoutSeconds.hashCode();
        __h *= 1000003;
        __h ^= (secretExpirationDateTime == null) ? 0 : secretExpirationDateTime.hashCode();
        $hashCode = __h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "CallbackConfig{"
          + "callbackUrl=" + callbackUrl + ", "
          + "contactEmail=" + contactEmail + ", "
          + "id=" + id + ", "
          + "requestTimeoutSeconds=" + requestTimeoutSeconds + ", "
          + "secretExpirationDateTime=" + secretExpirationDateTime
          + "}";
      }
      return $toString;
    }
  }

  public static class Subscription {
    /**
     * List of event type subscriptions
     */
    public List<EventTypeSubscription> eventTypeSubscriptions;

    /**
     * Product name for the subscription
     */
    public String product;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    private transient volatile String $toString;

    public Subscription(List<EventTypeSubscription> eventTypeSubscriptions, String product) {
      this.eventTypeSubscriptions = eventTypeSubscriptions;
      this.product = product;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof Subscription) {
        Subscription that = (Subscription) o;
        return ((this.eventTypeSubscriptions == null) ? (that.eventTypeSubscriptions == null) : this.eventTypeSubscriptions.equals(that.eventTypeSubscriptions))
         &&((this.product == null) ? (that.product == null) : this.product.equals(that.product));
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int __h = 1;
        __h *= 1000003;
        __h ^= (eventTypeSubscriptions == null) ? 0 : eventTypeSubscriptions.hashCode();
        __h *= 1000003;
        __h ^= (product == null) ? 0 : product.hashCode();
        $hashCode = __h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "Subscription{"
          + "eventTypeSubscriptions=" + eventTypeSubscriptions + ", "
          + "product=" + product
          + "}";
      }
      return $toString;
    }
  }

  public static class EventTypeSubscription {
    /**
     * Callback configuration information for the event type subscription
     */
    public CallbackConfig1 callbackConfig;

    /**
     * Name of the event type
     */
    public String eventType;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    private transient volatile String $toString;

    public EventTypeSubscription(CallbackConfig1 callbackConfig, String eventType) {
      this.callbackConfig = callbackConfig;
      this.eventType = eventType;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof EventTypeSubscription) {
        EventTypeSubscription that = (EventTypeSubscription) o;
        return ((this.callbackConfig == null) ? (that.callbackConfig == null) : this.callbackConfig.equals(that.callbackConfig))
         &&((this.eventType == null) ? (that.eventType == null) : this.eventType.equals(that.eventType));
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int __h = 1;
        __h *= 1000003;
        __h ^= (callbackConfig == null) ? 0 : callbackConfig.hashCode();
        __h *= 1000003;
        __h ^= (eventType == null) ? 0 : eventType.hashCode();
        $hashCode = __h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "EventTypeSubscription{"
          + "callbackConfig=" + callbackConfig + ", "
          + "eventType=" + eventType
          + "}";
      }
      return $toString;
    }
  }

  public static class CallbackConfig1 {
    /**
     * Callback url where the notification will be delivered
     */
    public URL callbackUrl;

    /**
     * Email address for correspondence
     */
    public String contactEmail;

    /**
     * Id of the callback configuration object
     */
    public String id;

    /**
     * Request timeout when sending a notification on the callback url
     */
    public Integer requestTimeoutSeconds;

    /**
     * Secret expiration date time
     */
    public LocalDateTime secretExpirationDateTime;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    private transient volatile String $toString;

    public CallbackConfig1(URL callbackUrl, String contactEmail, String id,
        Integer requestTimeoutSeconds, LocalDateTime secretExpirationDateTime) {
      this.callbackUrl = callbackUrl;
      this.contactEmail = contactEmail;
      this.id = id;
      this.requestTimeoutSeconds = requestTimeoutSeconds;
      this.secretExpirationDateTime = secretExpirationDateTime;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof CallbackConfig1) {
        CallbackConfig1 that = (CallbackConfig1) o;
        return ((this.callbackUrl == null) ? (that.callbackUrl == null) : this.callbackUrl.equals(that.callbackUrl))
         &&((this.contactEmail == null) ? (that.contactEmail == null) : this.contactEmail.equals(that.contactEmail))
         &&((this.id == null) ? (that.id == null) : this.id.equals(that.id))
         &&((this.requestTimeoutSeconds == null) ? (that.requestTimeoutSeconds == null) : this.requestTimeoutSeconds.equals(that.requestTimeoutSeconds))
         &&((this.secretExpirationDateTime == null) ? (that.secretExpirationDateTime == null) : this.secretExpirationDateTime.equals(that.secretExpirationDateTime));
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int __h = 1;
        __h *= 1000003;
        __h ^= (callbackUrl == null) ? 0 : callbackUrl.hashCode();
        __h *= 1000003;
        __h ^= (contactEmail == null) ? 0 : contactEmail.hashCode();
        __h *= 1000003;
        __h ^= (id == null) ? 0 : id.hashCode();
        __h *= 1000003;
        __h ^= (requestTimeoutSeconds == null) ? 0 : requestTimeoutSeconds.hashCode();
        __h *= 1000003;
        __h ^= (secretExpirationDateTime == null) ? 0 : secretExpirationDateTime.hashCode();
        $hashCode = __h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "CallbackConfig1{"
          + "callbackUrl=" + callbackUrl + ", "
          + "contactEmail=" + contactEmail + ", "
          + "id=" + id + ", "
          + "requestTimeoutSeconds=" + requestTimeoutSeconds + ", "
          + "secretExpirationDateTime=" + secretExpirationDateTime
          + "}";
      }
      return $toString;
    }
  }
}
