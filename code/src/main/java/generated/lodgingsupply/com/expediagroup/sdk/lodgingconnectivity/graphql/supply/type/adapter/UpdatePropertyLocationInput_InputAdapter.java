//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter;

import com.apollographql.apollo.api.Adapter;
import com.apollographql.apollo.api.Adapters;
import com.apollographql.apollo.api.ApolloOptionalAdapter;
import com.apollographql.apollo.api.CustomScalarAdapters;
import com.apollographql.apollo.api.NullableAdapter;
import com.apollographql.apollo.api.ObjectAdapter;
import com.apollographql.apollo.api.Optional;
import com.apollographql.apollo.api.json.JsonReader;
import com.apollographql.apollo.api.json.JsonWriter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.CoordinatesInput;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.UpdatePropertyLocationInput;
import java.io.IOException;
import java.lang.IllegalStateException;
import java.lang.Override;

public enum UpdatePropertyLocationInput_InputAdapter implements Adapter<UpdatePropertyLocationInput> {
  INSTANCE;

  @Override
  public UpdatePropertyLocationInput fromJson(JsonReader reader,
      CustomScalarAdapters customScalarAdapters) throws IOException {
    throw new IllegalStateException("Input type used in output position");
  }

  @Override
  public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
      UpdatePropertyLocationInput value) throws IOException {
    if (value.coordinates instanceof Optional.Present) {
      writer.name("coordinates");
      new ApolloOptionalAdapter<>(new NullableAdapter<>(new ObjectAdapter<CoordinatesInput>(CoordinatesInput_InputAdapter.INSTANCE, false))).toJson(writer, customScalarAdapters, value.coordinates);
    }
    if (value.hideExactLocation instanceof Optional.Present) {
      writer.name("hideExactLocation");
      new ApolloOptionalAdapter<>(Adapters.NullableBooleanAdapter).toJson(writer, customScalarAdapters, value.hideExactLocation);
    }
  }
}
