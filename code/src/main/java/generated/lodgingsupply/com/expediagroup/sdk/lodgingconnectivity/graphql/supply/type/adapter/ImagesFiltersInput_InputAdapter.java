//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.4'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter;

import com.apollographql.apollo3.api.Adapter;
import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.ApolloOptionalAdapter;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.NullableAdapter;
import com.apollographql.apollo3.api.ObjectAdapter;
import com.apollographql.apollo3.api.Optional;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.ImagesFiltersInput;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.OneOfImageSourceFilterInput;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.OneOfMediaStatusFilterInput;
import java.io.IOException;
import java.lang.IllegalStateException;
import java.lang.Override;

public enum ImagesFiltersInput_InputAdapter implements Adapter<ImagesFiltersInput> {
  INSTANCE;

  @Override
  public ImagesFiltersInput fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
      throws IOException {
    throw new IllegalStateException("Input type used in output position");
  }

  @Override
  public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
      ImagesFiltersInput value) throws IOException {
    if (value.active instanceof Optional.Present) {
      writer.name("active");
      new ApolloOptionalAdapter<>(Adapters.NullableBooleanAdapter).toJson(writer, customScalarAdapters, value.active);
    }
    if (value.featured instanceof Optional.Present) {
      writer.name("featured");
      new ApolloOptionalAdapter<>(Adapters.NullableBooleanAdapter).toJson(writer, customScalarAdapters, value.featured);
    }
    if (value.sources instanceof Optional.Present) {
      writer.name("sources");
      new ApolloOptionalAdapter<>(new NullableAdapter<>(new ObjectAdapter<OneOfImageSourceFilterInput>(OneOfImageSourceFilterInput_InputAdapter.INSTANCE, false))).toJson(writer, customScalarAdapters, value.sources);
    }
    if (value.statuses instanceof Optional.Present) {
      writer.name("statuses");
      new ApolloOptionalAdapter<>(new NullableAdapter<>(new ObjectAdapter<OneOfMediaStatusFilterInput>(OneOfMediaStatusFilterInput_InputAdapter.INSTANCE, false))).toJson(writer, customScalarAdapters, value.statuses);
    }
  }
}
