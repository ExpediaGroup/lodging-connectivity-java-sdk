//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.adapter;

import com.apollographql.apollo.api.Adapter;
import com.apollographql.apollo.api.Adapters;
import com.apollographql.apollo.api.Assertions;
import com.apollographql.apollo.api.CustomScalarAdapters;
import com.apollographql.apollo.api.ListAdapter;
import com.apollographql.apollo.api.ObjectAdapter;
import com.apollographql.apollo.api.json.JsonReader;
import com.apollographql.apollo.api.json.JsonWriter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.SetPropertyTaxRecordMutation;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.OptionalAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.OptionalAdapters;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

public class SetPropertyTaxRecordMutation_ResponseAdapter {
  public enum Data implements Adapter<SetPropertyTaxRecordMutation.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("setPropertyTaxRecord");

    @Override
    public SetPropertyTaxRecordMutation.Data fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Optional<SetPropertyTaxRecordMutation.SetPropertyTaxRecord> _setPropertyTaxRecord = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _setPropertyTaxRecord = new OptionalAdapter<>(new ObjectAdapter<SetPropertyTaxRecordMutation.SetPropertyTaxRecord>(SetPropertyTaxRecord.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new SetPropertyTaxRecordMutation.Data(
        _setPropertyTaxRecord
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        SetPropertyTaxRecordMutation.Data value) throws IOException {
      writer.name("setPropertyTaxRecord");
      new OptionalAdapter<>(new ObjectAdapter<SetPropertyTaxRecordMutation.SetPropertyTaxRecord>(SetPropertyTaxRecord.INSTANCE, false)).toJson(writer, customScalarAdapters, value.setPropertyTaxRecord);
    }
  }

  public enum SetPropertyTaxRecord implements Adapter<SetPropertyTaxRecordMutation.SetPropertyTaxRecord> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("clientMutationId", "taxRecords");

    @Override
    public SetPropertyTaxRecordMutation.SetPropertyTaxRecord fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Optional<String> _clientMutationId = null;
      List<SetPropertyTaxRecordMutation.TaxRecord> _taxRecords = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _clientMutationId = OptionalAdapters.OptionalStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _taxRecords = new ListAdapter<>(new ObjectAdapter<SetPropertyTaxRecordMutation.TaxRecord>(TaxRecord.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_taxRecords, "taxRecords");

      return new SetPropertyTaxRecordMutation.SetPropertyTaxRecord(
        _clientMutationId,
        _taxRecords
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        SetPropertyTaxRecordMutation.SetPropertyTaxRecord value) throws IOException {
      writer.name("clientMutationId");
      OptionalAdapters.OptionalStringAdapter.toJson(writer, customScalarAdapters, value.clientMutationId);

      writer.name("taxRecords");
      new ListAdapter<>(new ObjectAdapter<SetPropertyTaxRecordMutation.TaxRecord>(TaxRecord.INSTANCE, false)).toJson(writer, customScalarAdapters, value.taxRecords);
    }
  }

  public enum TaxRecord implements Adapter<SetPropertyTaxRecordMutation.TaxRecord> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("attributes", "categoryCode", "validationResult");

    @Override
    public SetPropertyTaxRecordMutation.TaxRecord fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      List<SetPropertyTaxRecordMutation.Attribute> _attributes = null;
      String _categoryCode = null;
      SetPropertyTaxRecordMutation.ValidationResult1 _validationResult = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _attributes = new ListAdapter<>(new ObjectAdapter<SetPropertyTaxRecordMutation.Attribute>(Attribute.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 1: _categoryCode = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _validationResult = new ObjectAdapter<SetPropertyTaxRecordMutation.ValidationResult1>(ValidationResult1.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_attributes, "attributes");
      Assertions.checkFieldNotMissing(_categoryCode, "categoryCode");
      Assertions.checkFieldNotMissing(_validationResult, "validationResult");

      return new SetPropertyTaxRecordMutation.TaxRecord(
        _attributes,
        _categoryCode,
        _validationResult
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        SetPropertyTaxRecordMutation.TaxRecord value) throws IOException {
      writer.name("attributes");
      new ListAdapter<>(new ObjectAdapter<SetPropertyTaxRecordMutation.Attribute>(Attribute.INSTANCE, false)).toJson(writer, customScalarAdapters, value.attributes);

      writer.name("categoryCode");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.categoryCode);

      writer.name("validationResult");
      new ObjectAdapter<SetPropertyTaxRecordMutation.ValidationResult1>(ValidationResult1.INSTANCE, false).toJson(writer, customScalarAdapters, value.validationResult);
    }
  }

  public enum Attribute implements Adapter<SetPropertyTaxRecordMutation.Attribute> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("name", "validationResult", "value");

    @Override
    public SetPropertyTaxRecordMutation.Attribute fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _name = null;
      SetPropertyTaxRecordMutation.ValidationResult _validationResult = null;
      SetPropertyTaxRecordMutation.Value _value = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _name = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _validationResult = new ObjectAdapter<SetPropertyTaxRecordMutation.ValidationResult>(ValidationResult.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 2: _value = new ObjectAdapter<SetPropertyTaxRecordMutation.Value>(Value.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_name, "name");
      Assertions.checkFieldNotMissing(_validationResult, "validationResult");
      Assertions.checkFieldNotMissing(_value, "value");

      return new SetPropertyTaxRecordMutation.Attribute(
        _name,
        _validationResult,
        _value
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        SetPropertyTaxRecordMutation.Attribute value) throws IOException {
      writer.name("name");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.name);

      writer.name("validationResult");
      new ObjectAdapter<SetPropertyTaxRecordMutation.ValidationResult>(ValidationResult.INSTANCE, false).toJson(writer, customScalarAdapters, value.validationResult);

      writer.name("value");
      new ObjectAdapter<SetPropertyTaxRecordMutation.Value>(Value.INSTANCE, false).toJson(writer, customScalarAdapters, value.value);
    }
  }

  public enum ValidationResult implements Adapter<SetPropertyTaxRecordMutation.ValidationResult> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("messages", "valid");

    @Override
    public SetPropertyTaxRecordMutation.ValidationResult fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      List<String> _messages = null;
      Boolean _valid = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _messages = new ListAdapter<>(Adapters.StringAdapter).fromJson(reader, customScalarAdapters); break;
          case 1: _valid = Adapters.BooleanAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_messages, "messages");
      Assertions.checkFieldNotMissing(_valid, "valid");

      return new SetPropertyTaxRecordMutation.ValidationResult(
        _messages,
        _valid
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        SetPropertyTaxRecordMutation.ValidationResult value) throws IOException {
      writer.name("messages");
      new ListAdapter<>(Adapters.StringAdapter).toJson(writer, customScalarAdapters, value.messages);

      writer.name("valid");
      Adapters.BooleanAdapter.toJson(writer, customScalarAdapters, value.valid);
    }
  }

  public enum Value implements Adapter<SetPropertyTaxRecordMutation.Value> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("type", "value");

    @Override
    public SetPropertyTaxRecordMutation.Value fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _type = null;
      Optional<String> _value = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _type = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _value = OptionalAdapters.OptionalStringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_type, "type");

      return new SetPropertyTaxRecordMutation.Value(
        _type,
        _value
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        SetPropertyTaxRecordMutation.Value value) throws IOException {
      writer.name("type");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.type);

      writer.name("value");
      OptionalAdapters.OptionalStringAdapter.toJson(writer, customScalarAdapters, value.value);
    }
  }

  public enum ValidationResult1 implements Adapter<SetPropertyTaxRecordMutation.ValidationResult1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("complianceStatusCode", "messages");

    @Override
    public SetPropertyTaxRecordMutation.ValidationResult1 fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _complianceStatusCode = null;
      List<String> _messages = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _complianceStatusCode = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _messages = new ListAdapter<>(Adapters.StringAdapter).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_complianceStatusCode, "complianceStatusCode");
      Assertions.checkFieldNotMissing(_messages, "messages");

      return new SetPropertyTaxRecordMutation.ValidationResult1(
        _complianceStatusCode,
        _messages
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        SetPropertyTaxRecordMutation.ValidationResult1 value) throws IOException {
      writer.name("complianceStatusCode");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.complianceStatusCode);

      writer.name("messages");
      new ListAdapter<>(Adapters.StringAdapter).toJson(writer, customScalarAdapters, value.messages);
    }
  }
}
