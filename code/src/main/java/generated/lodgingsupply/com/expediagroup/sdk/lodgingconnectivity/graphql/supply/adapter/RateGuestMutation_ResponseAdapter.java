//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.adapter;

import com.apollographql.apollo.api.Adapter;
import com.apollographql.apollo.api.Adapters;
import com.apollographql.apollo.api.Assertions;
import com.apollographql.apollo.api.CustomScalarAdapters;
import com.apollographql.apollo.api.ListAdapter;
import com.apollographql.apollo.api.ObjectAdapter;
import com.apollographql.apollo.api.json.JsonReader;
import com.apollographql.apollo.api.json.JsonWriter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.RateGuestMutation;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.OptionalAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.OptionalAdapters;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

public class RateGuestMutation_ResponseAdapter {
  public enum Data implements Adapter<RateGuestMutation.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("rateGuest");

    @Override
    public RateGuestMutation.Data fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Optional<RateGuestMutation.RateGuest> _rateGuest = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _rateGuest = new OptionalAdapter<>(new ObjectAdapter<RateGuestMutation.RateGuest>(RateGuest.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new RateGuestMutation.Data(
        _rateGuest
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        RateGuestMutation.Data value) throws IOException {
      writer.name("rateGuest");
      new OptionalAdapter<>(new ObjectAdapter<RateGuestMutation.RateGuest>(RateGuest.INSTANCE, false)).toJson(writer, customScalarAdapters, value.rateGuest);
    }
  }

  public enum RateGuest implements Adapter<RateGuestMutation.RateGuest> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("recommendGuest", "starRatings");

    @Override
    public RateGuestMutation.RateGuest fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Optional<Boolean> _recommendGuest = null;
      List<Optional<RateGuestMutation.StarRating>> _starRatings = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _recommendGuest = OptionalAdapters.OptionalBooleanAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _starRatings = new ListAdapter<>(new OptionalAdapter<>(new ObjectAdapter<RateGuestMutation.StarRating>(StarRating.INSTANCE, false))).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_starRatings, "starRatings");

      return new RateGuestMutation.RateGuest(
        _recommendGuest,
        _starRatings
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        RateGuestMutation.RateGuest value) throws IOException {
      writer.name("recommendGuest");
      OptionalAdapters.OptionalBooleanAdapter.toJson(writer, customScalarAdapters, value.recommendGuest);

      writer.name("starRatings");
      new ListAdapter<>(new OptionalAdapter<>(new ObjectAdapter<RateGuestMutation.StarRating>(StarRating.INSTANCE, false))).toJson(writer, customScalarAdapters, value.starRatings);
    }
  }

  public enum StarRating implements Adapter<RateGuestMutation.StarRating> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("category", "value");

    @Override
    public RateGuestMutation.StarRating fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _category = null;
      String _value = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _category = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _value = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_category, "category");
      Assertions.checkFieldNotMissing(_value, "value");

      return new RateGuestMutation.StarRating(
        _category,
        _value
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        RateGuestMutation.StarRating value) throws IOException {
      writer.name("category");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.category);

      writer.name("value");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.value);
    }
  }
}
