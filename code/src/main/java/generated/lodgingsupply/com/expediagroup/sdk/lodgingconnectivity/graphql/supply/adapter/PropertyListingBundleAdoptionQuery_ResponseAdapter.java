//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.adapter;

import com.apollographql.apollo.api.Adapter;
import com.apollographql.apollo.api.Adapters;
import com.apollographql.apollo.api.Assertions;
import com.apollographql.apollo.api.CustomScalarAdapters;
import com.apollographql.apollo.api.ListAdapter;
import com.apollographql.apollo.api.ObjectAdapter;
import com.apollographql.apollo.api.json.JsonReader;
import com.apollographql.apollo.api.json.JsonWriter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.PropertyListingBundleAdoptionQuery;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.AdoptionType;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.AdoptionType_ResponseAdapter;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class PropertyListingBundleAdoptionQuery_ResponseAdapter {
  public enum Data implements Adapter<PropertyListingBundleAdoptionQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("getPropertyListingBundleAdoption");

    @Override
    public PropertyListingBundleAdoptionQuery.Data fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      PropertyListingBundleAdoptionQuery.GetPropertyListingBundleAdoption _getPropertyListingBundleAdoption = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _getPropertyListingBundleAdoption = new ObjectAdapter<PropertyListingBundleAdoptionQuery.GetPropertyListingBundleAdoption>(GetPropertyListingBundleAdoption.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_getPropertyListingBundleAdoption, "getPropertyListingBundleAdoption");

      return new PropertyListingBundleAdoptionQuery.Data(
        _getPropertyListingBundleAdoption
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyListingBundleAdoptionQuery.Data value) throws IOException {
      writer.name("getPropertyListingBundleAdoption");
      new ObjectAdapter<PropertyListingBundleAdoptionQuery.GetPropertyListingBundleAdoption>(GetPropertyListingBundleAdoption.INSTANCE, false).toJson(writer, customScalarAdapters, value.getPropertyListingBundleAdoption);
    }
  }

  public enum GetPropertyListingBundleAdoption implements Adapter<PropertyListingBundleAdoptionQuery.GetPropertyListingBundleAdoption> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("adoptionList", "adoptionType");

    @Override
    public PropertyListingBundleAdoptionQuery.GetPropertyListingBundleAdoption fromJson(
        JsonReader reader, CustomScalarAdapters customScalarAdapters) throws IOException {
      List<String> _adoptionList = null;
      AdoptionType _adoptionType = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _adoptionList = new ListAdapter<>(Adapters.StringAdapter).fromJson(reader, customScalarAdapters); break;
          case 1: _adoptionType = AdoptionType_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_adoptionList, "adoptionList");
      Assertions.checkFieldNotMissing(_adoptionType, "adoptionType");

      return new PropertyListingBundleAdoptionQuery.GetPropertyListingBundleAdoption(
        _adoptionList,
        _adoptionType
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        PropertyListingBundleAdoptionQuery.GetPropertyListingBundleAdoption value) throws
        IOException {
      writer.name("adoptionList");
      new ListAdapter<>(Adapters.StringAdapter).toJson(writer, customScalarAdapters, value.adoptionList);

      writer.name("adoptionType");
      AdoptionType_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.adoptionType);
    }
  }
}
