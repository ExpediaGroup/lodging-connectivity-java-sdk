//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type;

import com.apollographql.apollo.api.Optional;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.time.LocalDate;

/**
 * facilitates filtering reservations by when their arrival date occurs
 */
public class CheckInDateFilter {
  public final LocalDate from;

  public final Optional<LocalDate> to;

  private transient volatile int $hashCode;

  private transient volatile boolean $hashCodeMemoized;

  private transient volatile String $toString;

  public CheckInDateFilter(LocalDate from, Optional<LocalDate> to) {
    this.from = from;
    this.to = to;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof CheckInDateFilter) {
      CheckInDateFilter that = (CheckInDateFilter) o;
      return ((this.from == null) ? (that.from == null) : this.from.equals(that.from))
       &&((this.to == null) ? (that.to == null) : this.to.equals(that.to));
    }
    return false;
  }

  @Override
  public int hashCode() {
    if (!$hashCodeMemoized) {
      int __h = 1;
      __h *= 1000003;
      __h ^= (from == null) ? 0 : from.hashCode();
      __h *= 1000003;
      __h ^= (to == null) ? 0 : to.hashCode();
      $hashCode = __h;
      $hashCodeMemoized = true;
    }
    return $hashCode;
  }

  @Override
  public String toString() {
    if ($toString == null) {
      $toString = "CheckInDateFilter{"
        + "from=" + from + ", "
        + "to=" + to
        + "}";
    }
    return $toString;
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private LocalDate from;

    private Optional<LocalDate> to = Optional.absent();

    Builder() {
    }

    /**
     * the date defining the start of the arrival date window (format: YYYY-MM-DD)
     */
    public Builder from(LocalDate from) {
      this.from = from;
      return this;
    }

    /**
     * the date defining the end of the arrival date window (format: YYYY-MM-DD)
     * Note: if to date is not specified, all reservations with arrival date after the from date will be included in the response
     */
    public Builder to(LocalDate to) {
      this.to = Optional.present(to);
      return this;
    }

    public CheckInDateFilter build() {
      return new CheckInDateFilter(from, to);
    }
  }
}
