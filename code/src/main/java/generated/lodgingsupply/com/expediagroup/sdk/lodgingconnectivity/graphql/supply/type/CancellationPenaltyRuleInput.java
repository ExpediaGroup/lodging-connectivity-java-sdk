//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.4'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type;

import com.apollographql.apollo3.api.Optional;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;

/**
 * Exactly one of the fields percentage, flatAmount, and numberOfNights must be defined, and it must correlate to the CancellationPenaltyRuleType field
 */
public class CancellationPenaltyRuleInput {
  public final CancellationPenaltyRuleApplicability applicability;

  public final Optional<MoneyInput> flatAmount;

  public final Optional<Integer> numberOfNights;

  public final Optional<Object> percentage;

  public final CancellationPenaltyRuleType type;

  private transient volatile int $hashCode;

  private transient volatile boolean $hashCodeMemoized;

  private transient volatile String $toString;

  public CancellationPenaltyRuleInput(CancellationPenaltyRuleApplicability applicability,
      Optional<MoneyInput> flatAmount, Optional<Integer> numberOfNights,
      Optional<Object> percentage, CancellationPenaltyRuleType type) {
    this.applicability = applicability;
    this.flatAmount = flatAmount;
    this.numberOfNights = numberOfNights;
    this.percentage = percentage;
    this.type = type;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof CancellationPenaltyRuleInput) {
      CancellationPenaltyRuleInput that = (CancellationPenaltyRuleInput) o;
      return ((this.applicability == null) ? (that.applicability == null) : this.applicability.equals(that.applicability))
       &&((this.flatAmount == null) ? (that.flatAmount == null) : this.flatAmount.equals(that.flatAmount))
       &&((this.numberOfNights == null) ? (that.numberOfNights == null) : this.numberOfNights.equals(that.numberOfNights))
       &&((this.percentage == null) ? (that.percentage == null) : this.percentage.equals(that.percentage))
       &&((this.type == null) ? (that.type == null) : this.type.equals(that.type));
    }
    return false;
  }

  @Override
  public int hashCode() {
    if (!$hashCodeMemoized) {
      int __h = 1;
      __h *= 1000003;
      __h ^= (applicability == null) ? 0 : applicability.hashCode();
      __h *= 1000003;
      __h ^= (flatAmount == null) ? 0 : flatAmount.hashCode();
      __h *= 1000003;
      __h ^= (numberOfNights == null) ? 0 : numberOfNights.hashCode();
      __h *= 1000003;
      __h ^= (percentage == null) ? 0 : percentage.hashCode();
      __h *= 1000003;
      __h ^= (type == null) ? 0 : type.hashCode();
      $hashCode = __h;
      $hashCodeMemoized = true;
    }
    return $hashCode;
  }

  @Override
  public String toString() {
    if ($toString == null) {
      $toString = "CancellationPenaltyRuleInput{"
        + "applicability=" + applicability + ", "
        + "flatAmount=" + flatAmount + ", "
        + "numberOfNights=" + numberOfNights + ", "
        + "percentage=" + percentage + ", "
        + "type=" + type
        + "}";
    }
    return $toString;
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private CancellationPenaltyRuleApplicability applicability;

    private Optional<MoneyInput> flatAmount = Optional.absent();

    private Optional<Integer> numberOfNights = Optional.absent();

    private Optional<Object> percentage = Optional.absent();

    private CancellationPenaltyRuleType type;

    Builder() {
    }

    public Builder applicability(CancellationPenaltyRuleApplicability applicability) {
      this.applicability = applicability;
      return this;
    }

    public Builder flatAmount(MoneyInput flatAmount) {
      this.flatAmount = Optional.present(flatAmount);
      return this;
    }

    public Builder numberOfNights(Integer numberOfNights) {
      this.numberOfNights = Optional.present(numberOfNights);
      return this;
    }

    /**
     * Represented as a fraction of 1. Example: 15% should be represented as 0.15 and 100% as 1.0
     */
    public Builder percentage(Object percentage) {
      this.percentage = Optional.present(percentage);
      return this;
    }

    public Builder type(CancellationPenaltyRuleType type) {
      this.type = type;
      return this;
    }

    public CancellationPenaltyRuleInput build() {
      return new CancellationPenaltyRuleInput(applicability, flatAmount, numberOfNights, percentage, type);
    }
  }
}
