//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.adapter;

import com.apollographql.apollo.api.Adapter;
import com.apollographql.apollo.api.Adapters;
import com.apollographql.apollo.api.Assertions;
import com.apollographql.apollo.api.CustomScalarAdapters;
import com.apollographql.apollo.api.ObjectAdapter;
import com.apollographql.apollo.api.json.JsonReader;
import com.apollographql.apollo.api.json.JsonWriter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.UpdateRatePlanMutation;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.OptionalAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.OptionalAdapters;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

public class UpdateRatePlanMutation_ResponseAdapter {
  public enum Data implements Adapter<UpdateRatePlanMutation.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("updateRatePlan");

    @Override
    public UpdateRatePlanMutation.Data fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Optional<UpdateRatePlanMutation.UpdateRatePlan> _updateRatePlan = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _updateRatePlan = new OptionalAdapter<>(new ObjectAdapter<UpdateRatePlanMutation.UpdateRatePlan>(UpdateRatePlan.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new UpdateRatePlanMutation.Data(
        _updateRatePlan
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        UpdateRatePlanMutation.Data value) throws IOException {
      writer.name("updateRatePlan");
      new OptionalAdapter<>(new ObjectAdapter<UpdateRatePlanMutation.UpdateRatePlan>(UpdateRatePlan.INSTANCE, false)).toJson(writer, customScalarAdapters, value.updateRatePlan);
    }
  }

  public enum UpdateRatePlan implements Adapter<UpdateRatePlanMutation.UpdateRatePlan> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("clientMutationId", "ratePlan");

    @Override
    public UpdateRatePlanMutation.UpdateRatePlan fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Optional<String> _clientMutationId = null;
      Optional<UpdateRatePlanMutation.RatePlan> _ratePlan = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _clientMutationId = OptionalAdapters.OptionalStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _ratePlan = new OptionalAdapter<>(new ObjectAdapter<UpdateRatePlanMutation.RatePlan>(RatePlan.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new UpdateRatePlanMutation.UpdateRatePlan(
        _clientMutationId,
        _ratePlan
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        UpdateRatePlanMutation.UpdateRatePlan value) throws IOException {
      writer.name("clientMutationId");
      OptionalAdapters.OptionalStringAdapter.toJson(writer, customScalarAdapters, value.clientMutationId);

      writer.name("ratePlan");
      new OptionalAdapter<>(new ObjectAdapter<UpdateRatePlanMutation.RatePlan>(RatePlan.INSTANCE, false)).toJson(writer, customScalarAdapters, value.ratePlan);
    }
  }

  public enum RatePlan implements Adapter<UpdateRatePlanMutation.RatePlan> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id");

    @Override
    public UpdateRatePlanMutation.RatePlan fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _id = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _id = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_id, "id");

      return new UpdateRatePlanMutation.RatePlan(
        _id
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        UpdateRatePlanMutation.RatePlan value) throws IOException {
      writer.name("id");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.id);
    }
  }
}
