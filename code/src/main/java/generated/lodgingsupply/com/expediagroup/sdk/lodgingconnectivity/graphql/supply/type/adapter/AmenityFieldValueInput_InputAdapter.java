//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter;

import com.apollographql.apollo.api.Adapter;
import com.apollographql.apollo.api.CustomScalarAdapters;
import com.apollographql.apollo.api.ListAdapter;
import com.apollographql.apollo.api.ObjectAdapter;
import com.apollographql.apollo.api.json.JsonReader;
import com.apollographql.apollo.api.json.JsonWriter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.AmenityFieldFeeValueInput;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.AmenityFieldMeasurementValueInput;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.AmenityFieldValueInput;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.LocalizedStringInput;
import java.io.IOException;
import java.lang.IllegalStateException;
import java.lang.Override;

public enum AmenityFieldValueInput_InputAdapter implements Adapter<AmenityFieldValueInput> {
  INSTANCE;

  @Override
  public AmenityFieldValueInput fromJson(JsonReader reader,
      CustomScalarAdapters customScalarAdapters) throws IOException {
    throw new IllegalStateException("Input type used in output position");
  }

  @Override
  public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
      AmenityFieldValueInput value) throws IOException {
    if (value.feeValue.isPresent()) {
      writer.name("feeValue");
      new OptionalAdapter<>(new OptionalAdapter<>(new ObjectAdapter<AmenityFieldFeeValueInput>(AmenityFieldFeeValueInput_InputAdapter.INSTANCE, false))).toJson(writer, customScalarAdapters, value.feeValue);
    }
    if (value.measurementValue.isPresent()) {
      writer.name("measurementValue");
      new OptionalAdapter<>(new OptionalAdapter<>(new ObjectAdapter<AmenityFieldMeasurementValueInput>(AmenityFieldMeasurementValueInput_InputAdapter.INSTANCE, false))).toJson(writer, customScalarAdapters, value.measurementValue);
    }
    if (value.textValue.isPresent()) {
      writer.name("textValue");
      new OptionalAdapter<>(new OptionalAdapter<>(new ListAdapter<>(new ObjectAdapter<LocalizedStringInput>(LocalizedStringInput_InputAdapter.INSTANCE, false)))).toJson(writer, customScalarAdapters, value.textValue);
    }
    if (value.value.isPresent()) {
      writer.name("value");
      new OptionalAdapter<>(OptionalAdapters.OptionalStringAdapter).toJson(writer, customScalarAdapters, value.value);
    }
  }
}
