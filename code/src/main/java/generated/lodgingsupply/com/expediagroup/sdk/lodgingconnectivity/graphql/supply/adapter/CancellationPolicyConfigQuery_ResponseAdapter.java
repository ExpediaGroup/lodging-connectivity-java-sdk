//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.adapter;

import com.apollographql.apollo.api.Adapter;
import com.apollographql.apollo.api.Adapters;
import com.apollographql.apollo.api.Assertions;
import com.apollographql.apollo.api.CustomScalarAdapters;
import com.apollographql.apollo.api.ListAdapter;
import com.apollographql.apollo.api.ObjectAdapter;
import com.apollographql.apollo.api.json.JsonReader;
import com.apollographql.apollo.api.json.JsonWriter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.CancellationPolicyConfigQuery;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.CancellationPenaltyRuleApplicability;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.CancellationPenaltyRuleType;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.CancellationPolicyType;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.CancellationWindowTemporalUnit;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.CurrencyCode;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.Decimal;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.CancellationPenaltyRuleApplicability_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.CancellationPenaltyRuleType_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.CancellationPolicyType_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.CancellationWindowTemporalUnit_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.OptionalAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.OptionalAdapters;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

public class CancellationPolicyConfigQuery_ResponseAdapter {
  public enum Data implements Adapter<CancellationPolicyConfigQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("cancellationPolicyConfig");

    @Override
    public CancellationPolicyConfigQuery.Data fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Optional<CancellationPolicyConfigQuery.CancellationPolicyConfig> _cancellationPolicyConfig = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _cancellationPolicyConfig = new OptionalAdapter<>(new ObjectAdapter<CancellationPolicyConfigQuery.CancellationPolicyConfig>(CancellationPolicyConfig.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new CancellationPolicyConfigQuery.Data(
        _cancellationPolicyConfig
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        CancellationPolicyConfigQuery.Data value) throws IOException {
      writer.name("cancellationPolicyConfig");
      new OptionalAdapter<>(new ObjectAdapter<CancellationPolicyConfigQuery.CancellationPolicyConfig>(CancellationPolicyConfig.INSTANCE, false)).toJson(writer, customScalarAdapters, value.cancellationPolicyConfig);
    }
  }

  public enum CancellationPolicyConfig implements Adapter<CancellationPolicyConfigQuery.CancellationPolicyConfig> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id", "name", "additionalCancellationFee", "defaultPolicies", "overridePolicies", "property");

    @Override
    public CancellationPolicyConfigQuery.CancellationPolicyConfig fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _id = null;
      String _name = null;
      Optional<CancellationPolicyConfigQuery.AdditionalCancellationFee> _additionalCancellationFee = null;
      List<CancellationPolicyConfigQuery.DefaultPolicy> _defaultPolicies = null;
      List<CancellationPolicyConfigQuery.OverridePolicy> _overridePolicies = null;
      Optional<CancellationPolicyConfigQuery.Property> _property = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _id = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _name = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _additionalCancellationFee = new OptionalAdapter<>(new ObjectAdapter<CancellationPolicyConfigQuery.AdditionalCancellationFee>(AdditionalCancellationFee.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 3: _defaultPolicies = new ListAdapter<>(new ObjectAdapter<CancellationPolicyConfigQuery.DefaultPolicy>(DefaultPolicy.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 4: _overridePolicies = new ListAdapter<>(new ObjectAdapter<CancellationPolicyConfigQuery.OverridePolicy>(OverridePolicy.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 5: _property = new OptionalAdapter<>(new ObjectAdapter<CancellationPolicyConfigQuery.Property>(Property.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_id, "id");
      Assertions.checkFieldNotMissing(_name, "name");
      Assertions.checkFieldNotMissing(_defaultPolicies, "defaultPolicies");
      Assertions.checkFieldNotMissing(_overridePolicies, "overridePolicies");

      return new CancellationPolicyConfigQuery.CancellationPolicyConfig(
        _id,
        _name,
        _additionalCancellationFee,
        _defaultPolicies,
        _overridePolicies,
        _property
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        CancellationPolicyConfigQuery.CancellationPolicyConfig value) throws IOException {
      writer.name("id");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.id);

      writer.name("name");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.name);

      writer.name("additionalCancellationFee");
      new OptionalAdapter<>(new ObjectAdapter<CancellationPolicyConfigQuery.AdditionalCancellationFee>(AdditionalCancellationFee.INSTANCE, false)).toJson(writer, customScalarAdapters, value.additionalCancellationFee);

      writer.name("defaultPolicies");
      new ListAdapter<>(new ObjectAdapter<CancellationPolicyConfigQuery.DefaultPolicy>(DefaultPolicy.INSTANCE, false)).toJson(writer, customScalarAdapters, value.defaultPolicies);

      writer.name("overridePolicies");
      new ListAdapter<>(new ObjectAdapter<CancellationPolicyConfigQuery.OverridePolicy>(OverridePolicy.INSTANCE, false)).toJson(writer, customScalarAdapters, value.overridePolicies);

      writer.name("property");
      new OptionalAdapter<>(new ObjectAdapter<CancellationPolicyConfigQuery.Property>(Property.INSTANCE, false)).toJson(writer, customScalarAdapters, value.property);
    }
  }

  public enum AdditionalCancellationFee implements Adapter<CancellationPolicyConfigQuery.AdditionalCancellationFee> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("amount", "currencyCode");

    @Override
    public CancellationPolicyConfigQuery.AdditionalCancellationFee fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _amount = null;
      String _currencyCode = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _amount = (customScalarAdapters.<String>responseAdapterFor(Decimal.type)).fromJson(reader, customScalarAdapters); break;
          case 1: _currencyCode = (customScalarAdapters.<String>responseAdapterFor(CurrencyCode.type)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_amount, "amount");
      Assertions.checkFieldNotMissing(_currencyCode, "currencyCode");

      return new CancellationPolicyConfigQuery.AdditionalCancellationFee(
        _amount,
        _currencyCode
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        CancellationPolicyConfigQuery.AdditionalCancellationFee value) throws IOException {
      writer.name("amount");
      (customScalarAdapters.<String>responseAdapterFor(Decimal.type)).toJson(writer, customScalarAdapters, value.amount);

      writer.name("currencyCode");
      (customScalarAdapters.<String>responseAdapterFor(CurrencyCode.type)).toJson(writer, customScalarAdapters, value.currencyCode);
    }
  }

  public enum DefaultPolicy implements Adapter<CancellationPolicyConfigQuery.DefaultPolicy> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("type", "tiers");

    @Override
    public CancellationPolicyConfigQuery.DefaultPolicy fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      CancellationPolicyType _type = null;
      Optional<List<CancellationPolicyConfigQuery.Tier>> _tiers = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _type = CancellationPolicyType_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          case 1: _tiers = new OptionalAdapter<>(new ListAdapter<>(new ObjectAdapter<CancellationPolicyConfigQuery.Tier>(Tier.INSTANCE, false))).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_type, "type");

      return new CancellationPolicyConfigQuery.DefaultPolicy(
        _type,
        _tiers
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        CancellationPolicyConfigQuery.DefaultPolicy value) throws IOException {
      writer.name("type");
      CancellationPolicyType_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.type);

      writer.name("tiers");
      new OptionalAdapter<>(new ListAdapter<>(new ObjectAdapter<CancellationPolicyConfigQuery.Tier>(Tier.INSTANCE, false))).toJson(writer, customScalarAdapters, value.tiers);
    }
  }

  public enum Tier implements Adapter<CancellationPolicyConfigQuery.Tier> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("cancellationWindow", "penaltyRules");

    @Override
    public CancellationPolicyConfigQuery.Tier fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      CancellationPolicyConfigQuery.CancellationWindow _cancellationWindow = null;
      List<CancellationPolicyConfigQuery.PenaltyRule> _penaltyRules = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _cancellationWindow = new ObjectAdapter<CancellationPolicyConfigQuery.CancellationWindow>(CancellationWindow.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 1: _penaltyRules = new ListAdapter<>(new ObjectAdapter<CancellationPolicyConfigQuery.PenaltyRule>(PenaltyRule.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_cancellationWindow, "cancellationWindow");
      Assertions.checkFieldNotMissing(_penaltyRules, "penaltyRules");

      return new CancellationPolicyConfigQuery.Tier(
        _cancellationWindow,
        _penaltyRules
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        CancellationPolicyConfigQuery.Tier value) throws IOException {
      writer.name("cancellationWindow");
      new ObjectAdapter<CancellationPolicyConfigQuery.CancellationWindow>(CancellationWindow.INSTANCE, false).toJson(writer, customScalarAdapters, value.cancellationWindow);

      writer.name("penaltyRules");
      new ListAdapter<>(new ObjectAdapter<CancellationPolicyConfigQuery.PenaltyRule>(PenaltyRule.INSTANCE, false)).toJson(writer, customScalarAdapters, value.penaltyRules);
    }
  }

  public enum CancellationWindow implements Adapter<CancellationPolicyConfigQuery.CancellationWindow> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("cutoff", "temporalUnit");

    @Override
    public CancellationPolicyConfigQuery.CancellationWindow fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Integer _cutoff = null;
      CancellationWindowTemporalUnit _temporalUnit = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _cutoff = Adapters.IntAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _temporalUnit = CancellationWindowTemporalUnit_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_cutoff, "cutoff");
      Assertions.checkFieldNotMissing(_temporalUnit, "temporalUnit");

      return new CancellationPolicyConfigQuery.CancellationWindow(
        _cutoff,
        _temporalUnit
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        CancellationPolicyConfigQuery.CancellationWindow value) throws IOException {
      writer.name("cutoff");
      Adapters.IntAdapter.toJson(writer, customScalarAdapters, value.cutoff);

      writer.name("temporalUnit");
      CancellationWindowTemporalUnit_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.temporalUnit);
    }
  }

  public enum PenaltyRule implements Adapter<CancellationPolicyConfigQuery.PenaltyRule> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("applicability", "flatAmount", "numberOfNights", "percentage", "type");

    @Override
    public CancellationPolicyConfigQuery.PenaltyRule fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      CancellationPenaltyRuleApplicability _applicability = null;
      Optional<CancellationPolicyConfigQuery.FlatAmount> _flatAmount = null;
      Optional<Integer> _numberOfNights = null;
      Optional<String> _percentage = null;
      CancellationPenaltyRuleType _type = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _applicability = CancellationPenaltyRuleApplicability_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          case 1: _flatAmount = new OptionalAdapter<>(new ObjectAdapter<CancellationPolicyConfigQuery.FlatAmount>(FlatAmount.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 2: _numberOfNights = OptionalAdapters.OptionalIntAdapter.fromJson(reader, customScalarAdapters); break;
          case 3: _percentage = new OptionalAdapter<>((customScalarAdapters.<String>responseAdapterFor(Decimal.type))).fromJson(reader, customScalarAdapters); break;
          case 4: _type = CancellationPenaltyRuleType_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_applicability, "applicability");
      Assertions.checkFieldNotMissing(_type, "type");

      return new CancellationPolicyConfigQuery.PenaltyRule(
        _applicability,
        _flatAmount,
        _numberOfNights,
        _percentage,
        _type
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        CancellationPolicyConfigQuery.PenaltyRule value) throws IOException {
      writer.name("applicability");
      CancellationPenaltyRuleApplicability_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.applicability);

      writer.name("flatAmount");
      new OptionalAdapter<>(new ObjectAdapter<CancellationPolicyConfigQuery.FlatAmount>(FlatAmount.INSTANCE, false)).toJson(writer, customScalarAdapters, value.flatAmount);

      writer.name("numberOfNights");
      OptionalAdapters.OptionalIntAdapter.toJson(writer, customScalarAdapters, value.numberOfNights);

      writer.name("percentage");
      new OptionalAdapter<>((customScalarAdapters.<String>responseAdapterFor(Decimal.type))).toJson(writer, customScalarAdapters, value.percentage);

      writer.name("type");
      CancellationPenaltyRuleType_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.type);
    }
  }

  public enum FlatAmount implements Adapter<CancellationPolicyConfigQuery.FlatAmount> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("amount", "currencyCode");

    @Override
    public CancellationPolicyConfigQuery.FlatAmount fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _amount = null;
      String _currencyCode = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _amount = (customScalarAdapters.<String>responseAdapterFor(Decimal.type)).fromJson(reader, customScalarAdapters); break;
          case 1: _currencyCode = (customScalarAdapters.<String>responseAdapterFor(CurrencyCode.type)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_amount, "amount");
      Assertions.checkFieldNotMissing(_currencyCode, "currencyCode");

      return new CancellationPolicyConfigQuery.FlatAmount(
        _amount,
        _currencyCode
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        CancellationPolicyConfigQuery.FlatAmount value) throws IOException {
      writer.name("amount");
      (customScalarAdapters.<String>responseAdapterFor(Decimal.type)).toJson(writer, customScalarAdapters, value.amount);

      writer.name("currencyCode");
      (customScalarAdapters.<String>responseAdapterFor(CurrencyCode.type)).toJson(writer, customScalarAdapters, value.currencyCode);
    }
  }

  public enum OverridePolicy implements Adapter<CancellationPolicyConfigQuery.OverridePolicy> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("cancellationPolicy", "dateRanges");

    @Override
    public CancellationPolicyConfigQuery.OverridePolicy fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      CancellationPolicyConfigQuery.CancellationPolicy _cancellationPolicy = null;
      List<CancellationPolicyConfigQuery.DateRange> _dateRanges = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _cancellationPolicy = new ObjectAdapter<CancellationPolicyConfigQuery.CancellationPolicy>(CancellationPolicy.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 1: _dateRanges = new ListAdapter<>(new ObjectAdapter<CancellationPolicyConfigQuery.DateRange>(DateRange.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_cancellationPolicy, "cancellationPolicy");
      Assertions.checkFieldNotMissing(_dateRanges, "dateRanges");

      return new CancellationPolicyConfigQuery.OverridePolicy(
        _cancellationPolicy,
        _dateRanges
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        CancellationPolicyConfigQuery.OverridePolicy value) throws IOException {
      writer.name("cancellationPolicy");
      new ObjectAdapter<CancellationPolicyConfigQuery.CancellationPolicy>(CancellationPolicy.INSTANCE, false).toJson(writer, customScalarAdapters, value.cancellationPolicy);

      writer.name("dateRanges");
      new ListAdapter<>(new ObjectAdapter<CancellationPolicyConfigQuery.DateRange>(DateRange.INSTANCE, false)).toJson(writer, customScalarAdapters, value.dateRanges);
    }
  }

  public enum CancellationPolicy implements Adapter<CancellationPolicyConfigQuery.CancellationPolicy> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("type", "tiers");

    @Override
    public CancellationPolicyConfigQuery.CancellationPolicy fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      CancellationPolicyType _type = null;
      Optional<List<CancellationPolicyConfigQuery.Tier1>> _tiers = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _type = CancellationPolicyType_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          case 1: _tiers = new OptionalAdapter<>(new ListAdapter<>(new ObjectAdapter<CancellationPolicyConfigQuery.Tier1>(Tier1.INSTANCE, false))).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_type, "type");

      return new CancellationPolicyConfigQuery.CancellationPolicy(
        _type,
        _tiers
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        CancellationPolicyConfigQuery.CancellationPolicy value) throws IOException {
      writer.name("type");
      CancellationPolicyType_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.type);

      writer.name("tiers");
      new OptionalAdapter<>(new ListAdapter<>(new ObjectAdapter<CancellationPolicyConfigQuery.Tier1>(Tier1.INSTANCE, false))).toJson(writer, customScalarAdapters, value.tiers);
    }
  }

  public enum Tier1 implements Adapter<CancellationPolicyConfigQuery.Tier1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("cancellationWindow");

    @Override
    public CancellationPolicyConfigQuery.Tier1 fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      CancellationPolicyConfigQuery.CancellationWindow1 _cancellationWindow = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _cancellationWindow = new ObjectAdapter<CancellationPolicyConfigQuery.CancellationWindow1>(CancellationWindow1.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_cancellationWindow, "cancellationWindow");

      return new CancellationPolicyConfigQuery.Tier1(
        _cancellationWindow
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        CancellationPolicyConfigQuery.Tier1 value) throws IOException {
      writer.name("cancellationWindow");
      new ObjectAdapter<CancellationPolicyConfigQuery.CancellationWindow1>(CancellationWindow1.INSTANCE, false).toJson(writer, customScalarAdapters, value.cancellationWindow);
    }
  }

  public enum CancellationWindow1 implements Adapter<CancellationPolicyConfigQuery.CancellationWindow1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("cutoff", "temporalUnit");

    @Override
    public CancellationPolicyConfigQuery.CancellationWindow1 fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Integer _cutoff = null;
      CancellationWindowTemporalUnit _temporalUnit = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _cutoff = Adapters.IntAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _temporalUnit = CancellationWindowTemporalUnit_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_cutoff, "cutoff");
      Assertions.checkFieldNotMissing(_temporalUnit, "temporalUnit");

      return new CancellationPolicyConfigQuery.CancellationWindow1(
        _cutoff,
        _temporalUnit
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        CancellationPolicyConfigQuery.CancellationWindow1 value) throws IOException {
      writer.name("cutoff");
      Adapters.IntAdapter.toJson(writer, customScalarAdapters, value.cutoff);

      writer.name("temporalUnit");
      CancellationWindowTemporalUnit_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.temporalUnit);
    }
  }

  public enum DateRange implements Adapter<CancellationPolicyConfigQuery.DateRange> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("from", "to");

    @Override
    public CancellationPolicyConfigQuery.DateRange fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      LocalDate _from = null;
      LocalDate _to = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _from = com.apollographql.adapter.core.JavaLocalDateAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          case 1: _to = com.apollographql.adapter.core.JavaLocalDateAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_from, "from");
      Assertions.checkFieldNotMissing(_to, "to");

      return new CancellationPolicyConfigQuery.DateRange(
        _from,
        _to
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        CancellationPolicyConfigQuery.DateRange value) throws IOException {
      writer.name("from");
      com.apollographql.adapter.core.JavaLocalDateAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.from);

      writer.name("to");
      com.apollographql.adapter.core.JavaLocalDateAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.to);
    }
  }

  public enum Property implements Adapter<CancellationPolicyConfigQuery.Property> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id");

    @Override
    public CancellationPolicyConfigQuery.Property fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _id = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _id = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_id, "id");

      return new CancellationPolicyConfigQuery.Property(
        _id
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        CancellationPolicyConfigQuery.Property value) throws IOException {
      writer.name("id");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.id);
    }
  }
}
