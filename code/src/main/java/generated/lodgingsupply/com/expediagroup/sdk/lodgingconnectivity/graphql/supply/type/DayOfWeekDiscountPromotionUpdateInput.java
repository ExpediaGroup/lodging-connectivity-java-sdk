//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.4'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type;

import com.apollographql.apollo3.api.Optional;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.List;

public class DayOfWeekDiscountPromotionUpdateInput {
  public final String id;

  public final Optional<PromotionName> name;

  public final Optional<PromotionStatus> status;

  public final Optional<PromotionCategory> category;

  public final Optional<String> code;

  public final Optional<RestrictionsUpdateInput> restrictions;

  public final Optional<List<EligibleRatePlanInput>> eligibleRatePlans;

  public final Optional<List<BlackoutDateRangeInput>> blackoutDates;

  public final Optional<DayOfWeekDiscountUpdateInput> discount;

  private transient volatile int $hashCode;

  private transient volatile boolean $hashCodeMemoized;

  private transient volatile String $toString;

  public DayOfWeekDiscountPromotionUpdateInput(String id, Optional<PromotionName> name,
      Optional<PromotionStatus> status, Optional<PromotionCategory> category, Optional<String> code,
      Optional<RestrictionsUpdateInput> restrictions,
      Optional<List<EligibleRatePlanInput>> eligibleRatePlans,
      Optional<List<BlackoutDateRangeInput>> blackoutDates,
      Optional<DayOfWeekDiscountUpdateInput> discount) {
    this.id = id;
    this.name = name;
    this.status = status;
    this.category = category;
    this.code = code;
    this.restrictions = restrictions;
    this.eligibleRatePlans = eligibleRatePlans;
    this.blackoutDates = blackoutDates;
    this.discount = discount;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof DayOfWeekDiscountPromotionUpdateInput) {
      DayOfWeekDiscountPromotionUpdateInput that = (DayOfWeekDiscountPromotionUpdateInput) o;
      return ((this.id == null) ? (that.id == null) : this.id.equals(that.id))
       &&((this.name == null) ? (that.name == null) : this.name.equals(that.name))
       &&((this.status == null) ? (that.status == null) : this.status.equals(that.status))
       &&((this.category == null) ? (that.category == null) : this.category.equals(that.category))
       &&((this.code == null) ? (that.code == null) : this.code.equals(that.code))
       &&((this.restrictions == null) ? (that.restrictions == null) : this.restrictions.equals(that.restrictions))
       &&((this.eligibleRatePlans == null) ? (that.eligibleRatePlans == null) : this.eligibleRatePlans.equals(that.eligibleRatePlans))
       &&((this.blackoutDates == null) ? (that.blackoutDates == null) : this.blackoutDates.equals(that.blackoutDates))
       &&((this.discount == null) ? (that.discount == null) : this.discount.equals(that.discount));
    }
    return false;
  }

  @Override
  public int hashCode() {
    if (!$hashCodeMemoized) {
      int __h = 1;
      __h *= 1000003;
      __h ^= (id == null) ? 0 : id.hashCode();
      __h *= 1000003;
      __h ^= (name == null) ? 0 : name.hashCode();
      __h *= 1000003;
      __h ^= (status == null) ? 0 : status.hashCode();
      __h *= 1000003;
      __h ^= (category == null) ? 0 : category.hashCode();
      __h *= 1000003;
      __h ^= (code == null) ? 0 : code.hashCode();
      __h *= 1000003;
      __h ^= (restrictions == null) ? 0 : restrictions.hashCode();
      __h *= 1000003;
      __h ^= (eligibleRatePlans == null) ? 0 : eligibleRatePlans.hashCode();
      __h *= 1000003;
      __h ^= (blackoutDates == null) ? 0 : blackoutDates.hashCode();
      __h *= 1000003;
      __h ^= (discount == null) ? 0 : discount.hashCode();
      $hashCode = __h;
      $hashCodeMemoized = true;
    }
    return $hashCode;
  }

  @Override
  public String toString() {
    if ($toString == null) {
      $toString = "DayOfWeekDiscountPromotionUpdateInput{"
        + "id=" + id + ", "
        + "name=" + name + ", "
        + "status=" + status + ", "
        + "category=" + category + ", "
        + "code=" + code + ", "
        + "restrictions=" + restrictions + ", "
        + "eligibleRatePlans=" + eligibleRatePlans + ", "
        + "blackoutDates=" + blackoutDates + ", "
        + "discount=" + discount
        + "}";
    }
    return $toString;
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private String id;

    private Optional<PromotionName> name = Optional.absent();

    private Optional<PromotionStatus> status = Optional.absent();

    private Optional<PromotionCategory> category = Optional.absent();

    private Optional<String> code = Optional.absent();

    private Optional<RestrictionsUpdateInput> restrictions = Optional.absent();

    private Optional<List<EligibleRatePlanInput>> eligibleRatePlans = Optional.absent();

    private Optional<List<BlackoutDateRangeInput>> blackoutDates = Optional.absent();

    private Optional<DayOfWeekDiscountUpdateInput> discount = Optional.absent();

    Builder() {
    }

    /**
     * Id of the Promotion as stored in the Expedia platform.
     */
    public Builder id(String id) {
      this.id = id;
      return this;
    }

    /**
     * Name of the promotion. Values: BASIC or EARLY_BOOKING_PROMOTION.
     */
    public Builder name(PromotionName name) {
      this.name = Optional.present(name);
      return this;
    }

    /**
     * Status of the promotion. Values: ACTIVE or INACTIVE.
     */
    public Builder status(PromotionStatus status) {
      this.status = Optional.present(status);
      return this;
    }

    /**
     * Category of the promotion. Currently only DISCOUNT_PROMOTION is supported (i.e Priced Promotions).
     */
    public Builder category(PromotionCategory category) {
      this.category = Optional.present(category);
      return this;
    }

    /**
     * Name of the promotion as the partner wants to call it.
     */
    public Builder code(String code) {
      this.code = Optional.present(code);
      return this;
    }

    /**
     * List of restrictions that can be applied to these promotions.
     */
    public Builder restrictions(RestrictionsUpdateInput restrictions) {
      this.restrictions = Optional.present(restrictions);
      return this;
    }

    /**
     * The rate plans for which this promotion is applicable for.
     */
    public Builder eligibleRatePlans(List<EligibleRatePlanInput> eligibleRatePlans) {
      this.eligibleRatePlans = Optional.present(eligibleRatePlans);
      return this;
    }

    /**
     * The 'exception' dates for which the promotion should NOT apply.
     * This field will not be returned in the Query All promotions functionality and will ONLY be returned when querying for a Single Promotion (by specifying the promotion Id).
     */
    public Builder blackoutDates(List<BlackoutDateRangeInput> blackoutDates) {
      this.blackoutDates = Optional.present(blackoutDates);
      return this;
    }

    /**
     * Detail of the actual discount being applied on the promotion.
     */
    public Builder discount(DayOfWeekDiscountUpdateInput discount) {
      this.discount = Optional.present(discount);
      return this;
    }

    public DayOfWeekDiscountPromotionUpdateInput build() {
      return new DayOfWeekDiscountPromotionUpdateInput(id, name, status, category, code, restrictions, eligibleRatePlans, blackoutDates, discount);
    }
  }
}
