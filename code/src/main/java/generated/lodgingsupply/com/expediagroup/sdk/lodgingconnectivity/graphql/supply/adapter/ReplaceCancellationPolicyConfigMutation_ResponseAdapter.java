//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.adapter;

import com.apollographql.apollo.api.Adapter;
import com.apollographql.apollo.api.Adapters;
import com.apollographql.apollo.api.Assertions;
import com.apollographql.apollo.api.CustomScalarAdapters;
import com.apollographql.apollo.api.ObjectAdapter;
import com.apollographql.apollo.api.json.JsonReader;
import com.apollographql.apollo.api.json.JsonWriter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.ReplaceCancellationPolicyConfigMutation;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.OptionalAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.OptionalAdapters;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

public class ReplaceCancellationPolicyConfigMutation_ResponseAdapter {
  public enum Data implements Adapter<ReplaceCancellationPolicyConfigMutation.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("replaceCancellationPolicyConfig");

    @Override
    public ReplaceCancellationPolicyConfigMutation.Data fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Optional<ReplaceCancellationPolicyConfigMutation.ReplaceCancellationPolicyConfig> _replaceCancellationPolicyConfig = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _replaceCancellationPolicyConfig = new OptionalAdapter<>(new ObjectAdapter<ReplaceCancellationPolicyConfigMutation.ReplaceCancellationPolicyConfig>(ReplaceCancellationPolicyConfig.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new ReplaceCancellationPolicyConfigMutation.Data(
        _replaceCancellationPolicyConfig
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        ReplaceCancellationPolicyConfigMutation.Data value) throws IOException {
      writer.name("replaceCancellationPolicyConfig");
      new OptionalAdapter<>(new ObjectAdapter<ReplaceCancellationPolicyConfigMutation.ReplaceCancellationPolicyConfig>(ReplaceCancellationPolicyConfig.INSTANCE, false)).toJson(writer, customScalarAdapters, value.replaceCancellationPolicyConfig);
    }
  }

  public enum ReplaceCancellationPolicyConfig implements Adapter<ReplaceCancellationPolicyConfigMutation.ReplaceCancellationPolicyConfig> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("clientMutationId", "cancellationPolicyConfig");

    @Override
    public ReplaceCancellationPolicyConfigMutation.ReplaceCancellationPolicyConfig fromJson(
        JsonReader reader, CustomScalarAdapters customScalarAdapters) throws IOException {
      Optional<String> _clientMutationId = null;
      Optional<ReplaceCancellationPolicyConfigMutation.CancellationPolicyConfig> _cancellationPolicyConfig = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _clientMutationId = OptionalAdapters.OptionalStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _cancellationPolicyConfig = new OptionalAdapter<>(new ObjectAdapter<ReplaceCancellationPolicyConfigMutation.CancellationPolicyConfig>(CancellationPolicyConfig.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new ReplaceCancellationPolicyConfigMutation.ReplaceCancellationPolicyConfig(
        _clientMutationId,
        _cancellationPolicyConfig
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        ReplaceCancellationPolicyConfigMutation.ReplaceCancellationPolicyConfig value) throws
        IOException {
      writer.name("clientMutationId");
      OptionalAdapters.OptionalStringAdapter.toJson(writer, customScalarAdapters, value.clientMutationId);

      writer.name("cancellationPolicyConfig");
      new OptionalAdapter<>(new ObjectAdapter<ReplaceCancellationPolicyConfigMutation.CancellationPolicyConfig>(CancellationPolicyConfig.INSTANCE, false)).toJson(writer, customScalarAdapters, value.cancellationPolicyConfig);
    }
  }

  public enum CancellationPolicyConfig implements Adapter<ReplaceCancellationPolicyConfigMutation.CancellationPolicyConfig> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id", "name", "property");

    @Override
    public ReplaceCancellationPolicyConfigMutation.CancellationPolicyConfig fromJson(
        JsonReader reader, CustomScalarAdapters customScalarAdapters) throws IOException {
      String _id = null;
      String _name = null;
      Optional<ReplaceCancellationPolicyConfigMutation.Property> _property = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _id = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _name = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _property = new OptionalAdapter<>(new ObjectAdapter<ReplaceCancellationPolicyConfigMutation.Property>(Property.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_id, "id");
      Assertions.checkFieldNotMissing(_name, "name");

      return new ReplaceCancellationPolicyConfigMutation.CancellationPolicyConfig(
        _id,
        _name,
        _property
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        ReplaceCancellationPolicyConfigMutation.CancellationPolicyConfig value) throws IOException {
      writer.name("id");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.id);

      writer.name("name");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.name);

      writer.name("property");
      new OptionalAdapter<>(new ObjectAdapter<ReplaceCancellationPolicyConfigMutation.Property>(Property.INSTANCE, false)).toJson(writer, customScalarAdapters, value.property);
    }
  }

  public enum Property implements Adapter<ReplaceCancellationPolicyConfigMutation.Property> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id");

    @Override
    public ReplaceCancellationPolicyConfigMutation.Property fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _id = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _id = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_id, "id");

      return new ReplaceCancellationPolicyConfigMutation.Property(
        _id
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        ReplaceCancellationPolicyConfigMutation.Property value) throws IOException {
      writer.name("id");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.id);
    }
  }
}
