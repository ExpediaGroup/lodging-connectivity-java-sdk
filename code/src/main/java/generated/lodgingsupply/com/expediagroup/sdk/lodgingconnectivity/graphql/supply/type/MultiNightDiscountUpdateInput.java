//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.4'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type;

import com.apollographql.apollo3.api.Optional;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;

public class MultiNightDiscountUpdateInput {
  public final Optional<DiscountUnit> unit;

  public final Optional<Double> value;

  public final Optional<Double> memberOnlyAdditionalValue;

  public final Integer applicableNight;

  public final Optional<Boolean> isRecurring;

  private transient volatile int $hashCode;

  private transient volatile boolean $hashCodeMemoized;

  private transient volatile String $toString;

  public MultiNightDiscountUpdateInput(Optional<DiscountUnit> unit, Optional<Double> value,
      Optional<Double> memberOnlyAdditionalValue, Integer applicableNight,
      Optional<Boolean> isRecurring) {
    this.unit = unit;
    this.value = value;
    this.memberOnlyAdditionalValue = memberOnlyAdditionalValue;
    this.applicableNight = applicableNight;
    this.isRecurring = isRecurring;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof MultiNightDiscountUpdateInput) {
      MultiNightDiscountUpdateInput that = (MultiNightDiscountUpdateInput) o;
      return ((this.unit == null) ? (that.unit == null) : this.unit.equals(that.unit))
       &&((this.value == null) ? (that.value == null) : this.value.equals(that.value))
       &&((this.memberOnlyAdditionalValue == null) ? (that.memberOnlyAdditionalValue == null) : this.memberOnlyAdditionalValue.equals(that.memberOnlyAdditionalValue))
       &&((this.applicableNight == null) ? (that.applicableNight == null) : this.applicableNight.equals(that.applicableNight))
       &&((this.isRecurring == null) ? (that.isRecurring == null) : this.isRecurring.equals(that.isRecurring));
    }
    return false;
  }

  @Override
  public int hashCode() {
    if (!$hashCodeMemoized) {
      int __h = 1;
      __h *= 1000003;
      __h ^= (unit == null) ? 0 : unit.hashCode();
      __h *= 1000003;
      __h ^= (value == null) ? 0 : value.hashCode();
      __h *= 1000003;
      __h ^= (memberOnlyAdditionalValue == null) ? 0 : memberOnlyAdditionalValue.hashCode();
      __h *= 1000003;
      __h ^= (applicableNight == null) ? 0 : applicableNight.hashCode();
      __h *= 1000003;
      __h ^= (isRecurring == null) ? 0 : isRecurring.hashCode();
      $hashCode = __h;
      $hashCodeMemoized = true;
    }
    return $hashCode;
  }

  @Override
  public String toString() {
    if ($toString == null) {
      $toString = "MultiNightDiscountUpdateInput{"
        + "unit=" + unit + ", "
        + "value=" + value + ", "
        + "memberOnlyAdditionalValue=" + memberOnlyAdditionalValue + ", "
        + "applicableNight=" + applicableNight + ", "
        + "isRecurring=" + isRecurring
        + "}";
    }
    return $toString;
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private Optional<DiscountUnit> unit = Optional.absent();

    private Optional<Double> value = Optional.absent();

    private Optional<Double> memberOnlyAdditionalValue = Optional.absent();

    private Integer applicableNight;

    private Optional<Boolean> isRecurring = Optional.absent();

    Builder() {
    }

    /**
     * Unit of the discount. Currently only PERCENT is supported for MVP for Create and Update. AMOUNT promotions are supported only for Read.
     */
    public Builder unit(DiscountUnit unit) {
      this.unit = Optional.present(unit);
      return this;
    }

    /**
     * Value of the discount applied.
     */
    public Builder value(Double value) {
      this.value = Optional.present(value);
      return this;
    }

    /**
     * Member only discount value applied.
     */
    public Builder memberOnlyAdditionalValue(Double memberOnlyAdditionalValue) {
      this.memberOnlyAdditionalValue = Optional.present(memberOnlyAdditionalValue);
      return this;
    }

    /**
     * Value of the applicable night on which the discount will be applied. Values permitted: 2 to 28.
     */
    public Builder applicableNight(Integer applicableNight) {
      this.applicableNight = applicableNight;
      return this;
    }

    /**
     * Whether the discount applied on the applicable night is recurring.
     */
    public Builder isRecurring(Boolean isRecurring) {
      this.isRecurring = Optional.present(isRecurring);
      return this;
    }

    public MultiNightDiscountUpdateInput build() {
      return new MultiNightDiscountUpdateInput(unit, value, memberOnlyAdditionalValue, applicableNight, isRecurring);
    }
  }
}
