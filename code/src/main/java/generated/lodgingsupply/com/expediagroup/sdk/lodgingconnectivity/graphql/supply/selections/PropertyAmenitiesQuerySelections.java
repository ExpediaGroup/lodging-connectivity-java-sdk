//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.selections;

import com.apollographql.apollo.api.CompiledArgument;
import com.apollographql.apollo.api.CompiledField;
import com.apollographql.apollo.api.CompiledListType;
import com.apollographql.apollo.api.CompiledNotNullType;
import com.apollographql.apollo.api.CompiledSelection;
import com.apollographql.apollo.api.CompiledVariable;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.Amenity;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.AmenityField;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.AmenityFieldFeeType;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.AmenityFieldFeeValue;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.AmenityFieldMeasurementValue;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.AmenityFieldValue;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.AmenityValue;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.GraphQLBoolean;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.GraphQLString;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.Locale;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.LocalizedString;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.Property;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.Query;
import java.util.Arrays;
import java.util.List;

public class PropertyAmenitiesQuerySelections {
  private static List<CompiledSelection> __feeValue = Arrays.asList(
    new CompiledField.Builder("type", new CompiledNotNullType(AmenityFieldFeeType.type)).build()
  );

  private static List<CompiledSelection> __measurementValue = Arrays.asList(
    new CompiledField.Builder("unitOfMeasure", new CompiledNotNullType(GraphQLString.type)).build(),
    new CompiledField.Builder("value", new CompiledNotNullType(GraphQLString.type)).build()
  );

  private static List<CompiledSelection> __textValue = Arrays.asList(
    new CompiledField.Builder("locale", new CompiledNotNullType(Locale.type)).build(),
    new CompiledField.Builder("value", new CompiledNotNullType(GraphQLString.type)).build()
  );

  private static List<CompiledSelection> __value1 = Arrays.asList(
    new CompiledField.Builder("feeValue", AmenityFieldFeeValue.type).selections(__feeValue).build(),
    new CompiledField.Builder("measurementValue", AmenityFieldMeasurementValue.type).selections(__measurementValue).build(),
    new CompiledField.Builder("textValue", new CompiledListType(new CompiledNotNullType(LocalizedString.type))).selections(__textValue).build(),
    new CompiledField.Builder("value", GraphQLString.type).build()
  );

  private static List<CompiledSelection> __fields = Arrays.asList(
    new CompiledField.Builder("key", new CompiledNotNullType(GraphQLString.type)).build(),
    new CompiledField.Builder("type", new CompiledNotNullType(GraphQLString.type)).build(),
    new CompiledField.Builder("value", new CompiledNotNullType(AmenityFieldValue.type)).selections(__value1).build()
  );

  private static List<CompiledSelection> __value = Arrays.asList(
    new CompiledField.Builder("available", new CompiledNotNullType(GraphQLBoolean.type)).build(),
    new CompiledField.Builder("fields", new CompiledNotNullType(new CompiledListType(new CompiledNotNullType(AmenityField.type)))).selections(__fields).build()
  );

  private static List<CompiledSelection> __amenities = Arrays.asList(
    new CompiledField.Builder("key", new CompiledNotNullType(GraphQLString.type)).build(),
    new CompiledField.Builder("value", new CompiledNotNullType(AmenityValue.type)).selections(__value).build()
  );

  private static List<CompiledSelection> __property = Arrays.asList(
    new CompiledField.Builder("amenities", new CompiledListType(new CompiledNotNullType(Amenity.type))).arguments(Arrays.asList(new CompiledArgument.Builder(Property.__amenities_filters).value(new CompiledVariable("filters")).build())).selections(__amenities).build()
  );

  public static List<CompiledSelection> __root = Arrays.asList(
    new CompiledField.Builder("property", Property.type).arguments(Arrays.asList(new CompiledArgument.Builder(Query.__property_id).value(new CompiledVariable("propertyId")).build())).selections(__property).build()
  );
}
