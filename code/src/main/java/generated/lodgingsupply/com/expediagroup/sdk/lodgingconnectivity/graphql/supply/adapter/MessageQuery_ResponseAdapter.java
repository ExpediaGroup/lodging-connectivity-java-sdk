//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.4'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.adapter;

import com.apollographql.apollo3.api.Adapter;
import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.ListAdapter;
import com.apollographql.apollo3.api.NullableAdapter;
import com.apollographql.apollo3.api.ObjectAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.MessageQuery;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.MessageReviewStatus;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.MessageThreadParticipantRole;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.MessageReviewStatus_ResponseAdapter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter.MessageThreadParticipantRole_ResponseAdapter;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.net.URL;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

public class MessageQuery_ResponseAdapter {
  public enum Data implements Adapter<MessageQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("message");

    @Override
    public MessageQuery.Data fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      MessageQuery.Message _message = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _message = new NullableAdapter<>(new ObjectAdapter<MessageQuery.Message>(Message.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new MessageQuery.Data(
        _message
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        MessageQuery.Data value) throws IOException {
      writer.name("message");
      new NullableAdapter<>(new ObjectAdapter<MessageQuery.Message>(Message.INSTANCE, false)).toJson(writer, customScalarAdapters, value.message);
    }
  }

  public enum Message implements Adapter<MessageQuery.Message> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id", "creationDateTimeUtc", "fromRole", "reviewStatus", "type", "attachments", "body", "messageThread");

    @Override
    public MessageQuery.Message fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _id = null;
      Object _creationDateTimeUtc = null;
      MessageThreadParticipantRole _fromRole = null;
      MessageReviewStatus _reviewStatus = null;
      String _type = null;
      List<MessageQuery.Attachment> _attachments = null;
      MessageQuery.Body _body = null;
      MessageQuery.MessageThread _messageThread = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _id = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _creationDateTimeUtc = Adapters.NullableAnyAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _fromRole = new NullableAdapter<>(MessageThreadParticipantRole_ResponseAdapter.INSTANCE).fromJson(reader, customScalarAdapters); break;
          case 3: _reviewStatus = new NullableAdapter<>(MessageReviewStatus_ResponseAdapter.INSTANCE).fromJson(reader, customScalarAdapters); break;
          case 4: _type = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 5: _attachments = new ListAdapter<>(new ObjectAdapter<MessageQuery.Attachment>(Attachment.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 6: _body = new NullableAdapter<>(new ObjectAdapter<MessageQuery.Body>(Body.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 7: _messageThread = new ObjectAdapter<MessageQuery.MessageThread>(MessageThread.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_id, "id");
      Assertions.checkFieldNotMissing(_attachments, "attachments");
      Assertions.checkFieldNotMissing(_messageThread, "messageThread");

      return new MessageQuery.Message(
        _id,
        _creationDateTimeUtc,
        _fromRole,
        _reviewStatus,
        _type,
        _attachments,
        _body,
        _messageThread
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        MessageQuery.Message value) throws IOException {
      writer.name("id");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.id);

      writer.name("creationDateTimeUtc");
      Adapters.NullableAnyAdapter.toJson(writer, customScalarAdapters, value.creationDateTimeUtc);

      writer.name("fromRole");
      new NullableAdapter<>(MessageThreadParticipantRole_ResponseAdapter.INSTANCE).toJson(writer, customScalarAdapters, value.fromRole);

      writer.name("reviewStatus");
      new NullableAdapter<>(MessageReviewStatus_ResponseAdapter.INSTANCE).toJson(writer, customScalarAdapters, value.reviewStatus);

      writer.name("type");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.type);

      writer.name("attachments");
      new ListAdapter<>(new ObjectAdapter<MessageQuery.Attachment>(Attachment.INSTANCE, false)).toJson(writer, customScalarAdapters, value.attachments);

      writer.name("body");
      new NullableAdapter<>(new ObjectAdapter<MessageQuery.Body>(Body.INSTANCE, false)).toJson(writer, customScalarAdapters, value.body);

      writer.name("messageThread");
      new ObjectAdapter<MessageQuery.MessageThread>(MessageThread.INSTANCE, false).toJson(writer, customScalarAdapters, value.messageThread);
    }
  }

  public enum Attachment implements Adapter<MessageQuery.Attachment> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id", "name", "uploadDateTimeUtc", "url");

    @Override
    public MessageQuery.Attachment fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _id = null;
      String _name = null;
      Object _uploadDateTimeUtc = null;
      URL _url = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _id = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _name = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _uploadDateTimeUtc = Adapters.AnyAdapter.fromJson(reader, customScalarAdapters); break;
          case 3: _url = com.expediagroup.sdk.lodgingconnectivity.graphql.adapter.URLAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_id, "id");
      Assertions.checkFieldNotMissing(_name, "name");
      Assertions.checkFieldNotMissing(_uploadDateTimeUtc, "uploadDateTimeUtc");
      Assertions.checkFieldNotMissing(_url, "url");

      return new MessageQuery.Attachment(
        _id,
        _name,
        _uploadDateTimeUtc,
        _url
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        MessageQuery.Attachment value) throws IOException {
      writer.name("id");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.id);

      writer.name("name");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.name);

      writer.name("uploadDateTimeUtc");
      Adapters.AnyAdapter.toJson(writer, customScalarAdapters, value.uploadDateTimeUtc);

      writer.name("url");
      com.expediagroup.sdk.lodgingconnectivity.graphql.adapter.URLAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.url);
    }
  }

  public enum Body implements Adapter<MessageQuery.Body> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("value");

    @Override
    public MessageQuery.Body fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      String _value = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _value = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_value, "value");

      return new MessageQuery.Body(
        _value
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        MessageQuery.Body value) throws IOException {
      writer.name("value");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.value);
    }
  }

  public enum MessageThread implements Adapter<MessageQuery.MessageThread> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id", "creationDateTimeUtc", "bookingInquiry", "primaryTraveler", "property", "reservationSummary");

    @Override
    public MessageQuery.MessageThread fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _id = null;
      Object _creationDateTimeUtc = null;
      MessageQuery.BookingInquiry _bookingInquiry = null;
      MessageQuery.PrimaryTraveler _primaryTraveler = null;
      MessageQuery.Property _property = null;
      MessageQuery.ReservationSummary _reservationSummary = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _id = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _creationDateTimeUtc = Adapters.NullableAnyAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _bookingInquiry = new NullableAdapter<>(new ObjectAdapter<MessageQuery.BookingInquiry>(BookingInquiry.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 3: _primaryTraveler = new NullableAdapter<>(new ObjectAdapter<MessageQuery.PrimaryTraveler>(PrimaryTraveler.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 4: _property = new ObjectAdapter<MessageQuery.Property>(Property.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 5: _reservationSummary = new NullableAdapter<>(new ObjectAdapter<MessageQuery.ReservationSummary>(ReservationSummary.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_id, "id");
      Assertions.checkFieldNotMissing(_property, "property");

      return new MessageQuery.MessageThread(
        _id,
        _creationDateTimeUtc,
        _bookingInquiry,
        _primaryTraveler,
        _property,
        _reservationSummary
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        MessageQuery.MessageThread value) throws IOException {
      writer.name("id");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.id);

      writer.name("creationDateTimeUtc");
      Adapters.NullableAnyAdapter.toJson(writer, customScalarAdapters, value.creationDateTimeUtc);

      writer.name("bookingInquiry");
      new NullableAdapter<>(new ObjectAdapter<MessageQuery.BookingInquiry>(BookingInquiry.INSTANCE, false)).toJson(writer, customScalarAdapters, value.bookingInquiry);

      writer.name("primaryTraveler");
      new NullableAdapter<>(new ObjectAdapter<MessageQuery.PrimaryTraveler>(PrimaryTraveler.INSTANCE, false)).toJson(writer, customScalarAdapters, value.primaryTraveler);

      writer.name("property");
      new ObjectAdapter<MessageQuery.Property>(Property.INSTANCE, false).toJson(writer, customScalarAdapters, value.property);

      writer.name("reservationSummary");
      new NullableAdapter<>(new ObjectAdapter<MessageQuery.ReservationSummary>(ReservationSummary.INSTANCE, false)).toJson(writer, customScalarAdapters, value.reservationSummary);
    }
  }

  public enum BookingInquiry implements Adapter<MessageQuery.BookingInquiry> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id", "adultCount", "checkInDate", "checkOutDate", "childCount", "hasPets");

    @Override
    public MessageQuery.BookingInquiry fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _id = null;
      Integer _adultCount = null;
      LocalDate _checkInDate = null;
      LocalDate _checkOutDate = null;
      Integer _childCount = null;
      Boolean _hasPets = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _id = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _adultCount = Adapters.IntAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _checkInDate = new NullableAdapter<>(com.apollographql.apollo3.adapter.JavaLocalDateAdapter.INSTANCE).fromJson(reader, customScalarAdapters); break;
          case 3: _checkOutDate = new NullableAdapter<>(com.apollographql.apollo3.adapter.JavaLocalDateAdapter.INSTANCE).fromJson(reader, customScalarAdapters); break;
          case 4: _childCount = Adapters.IntAdapter.fromJson(reader, customScalarAdapters); break;
          case 5: _hasPets = Adapters.BooleanAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_id, "id");
      Assertions.checkFieldNotMissing(_adultCount, "adultCount");
      Assertions.checkFieldNotMissing(_childCount, "childCount");
      Assertions.checkFieldNotMissing(_hasPets, "hasPets");

      return new MessageQuery.BookingInquiry(
        _id,
        _adultCount,
        _checkInDate,
        _checkOutDate,
        _childCount,
        _hasPets
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        MessageQuery.BookingInquiry value) throws IOException {
      writer.name("id");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.id);

      writer.name("adultCount");
      Adapters.IntAdapter.toJson(writer, customScalarAdapters, value.adultCount);

      writer.name("checkInDate");
      new NullableAdapter<>(com.apollographql.apollo3.adapter.JavaLocalDateAdapter.INSTANCE).toJson(writer, customScalarAdapters, value.checkInDate);

      writer.name("checkOutDate");
      new NullableAdapter<>(com.apollographql.apollo3.adapter.JavaLocalDateAdapter.INSTANCE).toJson(writer, customScalarAdapters, value.checkOutDate);

      writer.name("childCount");
      Adapters.IntAdapter.toJson(writer, customScalarAdapters, value.childCount);

      writer.name("hasPets");
      Adapters.BooleanAdapter.toJson(writer, customScalarAdapters, value.hasPets);
    }
  }

  public enum PrimaryTraveler implements Adapter<MessageQuery.PrimaryTraveler> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("firstName", "lastName");

    @Override
    public MessageQuery.PrimaryTraveler fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _firstName = null;
      String _lastName = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _firstName = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _lastName = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new MessageQuery.PrimaryTraveler(
        _firstName,
        _lastName
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        MessageQuery.PrimaryTraveler value) throws IOException {
      writer.name("firstName");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.firstName);

      writer.name("lastName");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.lastName);
    }
  }

  public enum Property implements Adapter<MessageQuery.Property> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id");

    @Override
    public MessageQuery.Property fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _id = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _id = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_id, "id");

      return new MessageQuery.Property(
        _id
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        MessageQuery.Property value) throws IOException {
      writer.name("id");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.id);
    }
  }

  public enum ReservationSummary implements Adapter<MessageQuery.ReservationSummary> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id", "checkInDate", "checkOutDate", "adultCount", "childCount", "petCount", "alternativeIds");

    @Override
    public MessageQuery.ReservationSummary fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _id = null;
      LocalDate _checkInDate = null;
      LocalDate _checkOutDate = null;
      Integer _adultCount = null;
      Integer _childCount = null;
      Integer _petCount = null;
      MessageQuery.AlternativeIds _alternativeIds = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _id = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _checkInDate = com.apollographql.apollo3.adapter.JavaLocalDateAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          case 2: _checkOutDate = com.apollographql.apollo3.adapter.JavaLocalDateAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          case 3: _adultCount = Adapters.IntAdapter.fromJson(reader, customScalarAdapters); break;
          case 4: _childCount = Adapters.IntAdapter.fromJson(reader, customScalarAdapters); break;
          case 5: _petCount = Adapters.IntAdapter.fromJson(reader, customScalarAdapters); break;
          case 6: _alternativeIds = new ObjectAdapter<MessageQuery.AlternativeIds>(AlternativeIds.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_id, "id");
      Assertions.checkFieldNotMissing(_checkInDate, "checkInDate");
      Assertions.checkFieldNotMissing(_checkOutDate, "checkOutDate");
      Assertions.checkFieldNotMissing(_adultCount, "adultCount");
      Assertions.checkFieldNotMissing(_childCount, "childCount");
      Assertions.checkFieldNotMissing(_petCount, "petCount");
      Assertions.checkFieldNotMissing(_alternativeIds, "alternativeIds");

      return new MessageQuery.ReservationSummary(
        _id,
        _checkInDate,
        _checkOutDate,
        _adultCount,
        _childCount,
        _petCount,
        _alternativeIds
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        MessageQuery.ReservationSummary value) throws IOException {
      writer.name("id");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.id);

      writer.name("checkInDate");
      com.apollographql.apollo3.adapter.JavaLocalDateAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.checkInDate);

      writer.name("checkOutDate");
      com.apollographql.apollo3.adapter.JavaLocalDateAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.checkOutDate);

      writer.name("adultCount");
      Adapters.IntAdapter.toJson(writer, customScalarAdapters, value.adultCount);

      writer.name("childCount");
      Adapters.IntAdapter.toJson(writer, customScalarAdapters, value.childCount);

      writer.name("petCount");
      Adapters.IntAdapter.toJson(writer, customScalarAdapters, value.petCount);

      writer.name("alternativeIds");
      new ObjectAdapter<MessageQuery.AlternativeIds>(AlternativeIds.INSTANCE, false).toJson(writer, customScalarAdapters, value.alternativeIds);
    }
  }

  public enum AlternativeIds implements Adapter<MessageQuery.AlternativeIds> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("supplierId");

    @Override
    public MessageQuery.AlternativeIds fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _supplierId = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _supplierId = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_supplierId, "supplierId");

      return new MessageQuery.AlternativeIds(
        _supplierId
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        MessageQuery.AlternativeIds value) throws IOException {
      writer.name("supplierId");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.supplierId);
    }
  }
}
