//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.adapter;

import com.apollographql.apollo.api.Adapter;
import com.apollographql.apollo.api.ApolloOptionalAdapter;
import com.apollographql.apollo.api.CustomScalarAdapters;
import com.apollographql.apollo.api.ListAdapter;
import com.apollographql.apollo.api.NullableAdapter;
import com.apollographql.apollo.api.ObjectAdapter;
import com.apollographql.apollo.api.Optional;
import com.apollographql.apollo.api.json.JsonReader;
import com.apollographql.apollo.api.json.JsonWriter;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.ApplicableRegulationsInput;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.RegistrationDetailInput;
import com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type.UpdateUnitRegistrationInput;
import java.io.IOException;
import java.lang.IllegalStateException;
import java.lang.Override;

public enum UpdateUnitRegistrationInput_InputAdapter implements Adapter<UpdateUnitRegistrationInput> {
  INSTANCE;

  @Override
  public UpdateUnitRegistrationInput fromJson(JsonReader reader,
      CustomScalarAdapters customScalarAdapters) throws IOException {
    throw new IllegalStateException("Input type used in output position");
  }

  @Override
  public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
      UpdateUnitRegistrationInput value) throws IOException {
    if (value.applicableRegulations instanceof Optional.Present) {
      writer.name("applicableRegulations");
      new ApolloOptionalAdapter<>(new NullableAdapter<>(new ListAdapter<>(new ObjectAdapter<ApplicableRegulationsInput>(ApplicableRegulationsInput_InputAdapter.INSTANCE, false)))).toJson(writer, customScalarAdapters, value.applicableRegulations);
    }
    writer.name("details");
    new ListAdapter<>(new ObjectAdapter<RegistrationDetailInput>(RegistrationDetailInput_InputAdapter.INSTANCE, false)).toJson(writer, customScalarAdapters, value.details);
  }
}
