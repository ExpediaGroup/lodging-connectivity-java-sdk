//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type;

import com.apollographql.apollo.api.Optional;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.net.URL;

public class UpdateNotificationCallbackConfigInput {
  public final String callbackConfigId;

  public final Optional<URL> callbackUrl;

  public final Optional<String> apiKey;

  public final Optional<Integer> requestTimeoutSeconds;

  public final Optional<String> contactEmail;

  private transient volatile int $hashCode;

  private transient volatile boolean $hashCodeMemoized;

  private transient volatile String $toString;

  public UpdateNotificationCallbackConfigInput(String callbackConfigId, Optional<URL> callbackUrl,
      Optional<String> apiKey, Optional<Integer> requestTimeoutSeconds,
      Optional<String> contactEmail) {
    this.callbackConfigId = callbackConfigId;
    this.callbackUrl = callbackUrl;
    this.apiKey = apiKey;
    this.requestTimeoutSeconds = requestTimeoutSeconds;
    this.contactEmail = contactEmail;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof UpdateNotificationCallbackConfigInput) {
      UpdateNotificationCallbackConfigInput that = (UpdateNotificationCallbackConfigInput) o;
      return ((this.callbackConfigId == null) ? (that.callbackConfigId == null) : this.callbackConfigId.equals(that.callbackConfigId))
       &&((this.callbackUrl == null) ? (that.callbackUrl == null) : this.callbackUrl.equals(that.callbackUrl))
       &&((this.apiKey == null) ? (that.apiKey == null) : this.apiKey.equals(that.apiKey))
       &&((this.requestTimeoutSeconds == null) ? (that.requestTimeoutSeconds == null) : this.requestTimeoutSeconds.equals(that.requestTimeoutSeconds))
       &&((this.contactEmail == null) ? (that.contactEmail == null) : this.contactEmail.equals(that.contactEmail));
    }
    return false;
  }

  @Override
  public int hashCode() {
    if (!$hashCodeMemoized) {
      int __h = 1;
      __h *= 1000003;
      __h ^= (callbackConfigId == null) ? 0 : callbackConfigId.hashCode();
      __h *= 1000003;
      __h ^= (callbackUrl == null) ? 0 : callbackUrl.hashCode();
      __h *= 1000003;
      __h ^= (apiKey == null) ? 0 : apiKey.hashCode();
      __h *= 1000003;
      __h ^= (requestTimeoutSeconds == null) ? 0 : requestTimeoutSeconds.hashCode();
      __h *= 1000003;
      __h ^= (contactEmail == null) ? 0 : contactEmail.hashCode();
      $hashCode = __h;
      $hashCodeMemoized = true;
    }
    return $hashCode;
  }

  @Override
  public String toString() {
    if ($toString == null) {
      $toString = "UpdateNotificationCallbackConfigInput{"
        + "callbackConfigId=" + callbackConfigId + ", "
        + "callbackUrl=" + callbackUrl + ", "
        + "apiKey=" + apiKey + ", "
        + "requestTimeoutSeconds=" + requestTimeoutSeconds + ", "
        + "contactEmail=" + contactEmail
        + "}";
    }
    return $toString;
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private String callbackConfigId;

    private Optional<URL> callbackUrl = Optional.absent();

    private Optional<String> apiKey = Optional.absent();

    private Optional<Integer> requestTimeoutSeconds = Optional.absent();

    private Optional<String> contactEmail = Optional.absent();

    Builder() {
    }

    /**
     * Id of callback configuration to update
     */
    public Builder callbackConfigId(String callbackConfigId) {
      this.callbackConfigId = callbackConfigId;
      return this;
    }

    /**
     * Updated callback url of callback configuration
     */
    public Builder callbackUrl(URL callbackUrl) {
      this.callbackUrl = Optional.present(callbackUrl);
      return this;
    }

    /**
     * Updated api key of callback configuration
     */
    public Builder apiKey(String apiKey) {
      this.apiKey = Optional.present(apiKey);
      return this;
    }

    /**
     * Updated request timeout in seconds of callback configuration
     */
    public Builder requestTimeoutSeconds(Integer requestTimeoutSeconds) {
      this.requestTimeoutSeconds = Optional.present(requestTimeoutSeconds);
      return this;
    }

    /**
     * Email address for correspondence
     */
    public Builder contactEmail(String contactEmail) {
      this.contactEmail = Optional.present(contactEmail);
      return this;
    }

    public UpdateNotificationCallbackConfigInput build() {
      return new UpdateNotificationCallbackConfigInput(callbackConfigId, callbackUrl, apiKey, requestTimeoutSeconds, contactEmail);
    }
  }
}
