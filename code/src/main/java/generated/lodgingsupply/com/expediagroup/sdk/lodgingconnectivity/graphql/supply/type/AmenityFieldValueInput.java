//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type;

import com.apollographql.apollo.api.Optional;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.List;

/**
 * All fields are nullable, send only the one relevant field value for each amenity field key.
 */
public class AmenityFieldValueInput {
  public final Optional<AmenityFieldFeeValueInput> feeValue;

  public final Optional<AmenityFieldMeasurementValueInput> measurementValue;

  public final Optional<List<LocalizedStringInput>> textValue;

  public final Optional<String> value;

  private transient volatile int $hashCode;

  private transient volatile boolean $hashCodeMemoized;

  private transient volatile String $toString;

  public AmenityFieldValueInput(Optional<AmenityFieldFeeValueInput> feeValue,
      Optional<AmenityFieldMeasurementValueInput> measurementValue,
      Optional<List<LocalizedStringInput>> textValue, Optional<String> value) {
    this.feeValue = feeValue;
    this.measurementValue = measurementValue;
    this.textValue = textValue;
    this.value = value;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof AmenityFieldValueInput) {
      AmenityFieldValueInput that = (AmenityFieldValueInput) o;
      return ((this.feeValue == null) ? (that.feeValue == null) : this.feeValue.equals(that.feeValue))
       &&((this.measurementValue == null) ? (that.measurementValue == null) : this.measurementValue.equals(that.measurementValue))
       &&((this.textValue == null) ? (that.textValue == null) : this.textValue.equals(that.textValue))
       &&((this.value == null) ? (that.value == null) : this.value.equals(that.value));
    }
    return false;
  }

  @Override
  public int hashCode() {
    if (!$hashCodeMemoized) {
      int __h = 1;
      __h *= 1000003;
      __h ^= (feeValue == null) ? 0 : feeValue.hashCode();
      __h *= 1000003;
      __h ^= (measurementValue == null) ? 0 : measurementValue.hashCode();
      __h *= 1000003;
      __h ^= (textValue == null) ? 0 : textValue.hashCode();
      __h *= 1000003;
      __h ^= (value == null) ? 0 : value.hashCode();
      $hashCode = __h;
      $hashCodeMemoized = true;
    }
    return $hashCode;
  }

  @Override
  public String toString() {
    if ($toString == null) {
      $toString = "AmenityFieldValueInput{"
        + "feeValue=" + feeValue + ", "
        + "measurementValue=" + measurementValue + ", "
        + "textValue=" + textValue + ", "
        + "value=" + value
        + "}";
    }
    return $toString;
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private Optional<AmenityFieldFeeValueInput> feeValue = Optional.absent();

    private Optional<AmenityFieldMeasurementValueInput> measurementValue = Optional.absent();

    private Optional<List<LocalizedStringInput>> textValue = Optional.absent();

    private Optional<String> value = Optional.absent();

    Builder() {
    }

    /**
     * Used for field type: fee.
     */
    public Builder feeValue(AmenityFieldFeeValueInput feeValue) {
      this.feeValue = Optional.present(feeValue);
      return this;
    }

    /**
     * Used for field type: measurement.
     */
    public Builder measurementValue(AmenityFieldMeasurementValueInput measurementValue) {
      this.measurementValue = Optional.present(measurementValue);
      return this;
    }

    /**
     * Used for field type: text.
     */
    public Builder textValue(List<LocalizedStringInput> textValue) {
      this.textValue = Optional.present(textValue);
      return this;
    }

    /**
     * Used for field types: enum, string, trilean, int, and decimal.
     */
    public Builder value(String value) {
      this.value = Optional.present(value);
      return this;
    }

    public AmenityFieldValueInput build() {
      return new AmenityFieldValueInput(feeValue, measurementValue, textValue, value);
    }
  }
}
