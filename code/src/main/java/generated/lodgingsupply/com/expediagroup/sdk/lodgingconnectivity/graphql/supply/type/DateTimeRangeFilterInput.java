//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.expediagroup.sdk.lodgingconnectivity.graphql.supply.type;

import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

public class DateTimeRangeFilterInput {
  public final OffsetDateTime from;

  public final OffsetDateTime to;

  public final Optional<Optional<RangeOperator>> operator;

  private transient volatile int $hashCode;

  private transient volatile boolean $hashCodeMemoized;

  private transient volatile String $toString;

  public DateTimeRangeFilterInput(OffsetDateTime from, OffsetDateTime to,
      Optional<Optional<RangeOperator>> operator) {
    this.from = from;
    this.to = to;
    this.operator = operator;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof DateTimeRangeFilterInput) {
      DateTimeRangeFilterInput that = (DateTimeRangeFilterInput) o;
      return ((this.from == null) ? (that.from == null) : this.from.equals(that.from))
       &&((this.to == null) ? (that.to == null) : this.to.equals(that.to))
       &&((this.operator == null) ? (that.operator == null) : this.operator.equals(that.operator));
    }
    return false;
  }

  @Override
  public int hashCode() {
    if (!$hashCodeMemoized) {
      int __h = 1;
      __h *= 1000003;
      __h ^= (from == null) ? 0 : from.hashCode();
      __h *= 1000003;
      __h ^= (to == null) ? 0 : to.hashCode();
      __h *= 1000003;
      __h ^= (operator == null) ? 0 : operator.hashCode();
      $hashCode = __h;
      $hashCodeMemoized = true;
    }
    return $hashCode;
  }

  @Override
  public String toString() {
    if ($toString == null) {
      $toString = "DateTimeRangeFilterInput{"
        + "from=" + from + ", "
        + "to=" + to + ", "
        + "operator=" + operator
        + "}";
    }
    return $toString;
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private OffsetDateTime from;

    private OffsetDateTime to;

    private Optional<Optional<RangeOperator>> operator = Optional.empty();

    Builder() {
    }

    public Builder from(OffsetDateTime from) {
      this.from = from;
      return this;
    }

    public Builder to(OffsetDateTime to) {
      this.to = to;
      return this;
    }

    public Builder operator(@NotNull Optional<RangeOperator> operator) {
      this.operator = Optional.of(operator);
      return this;
    }

    public DateTimeRangeFilterInput build() {
      return new DateTimeRangeFilterInput(from, to, operator);
    }
  }
}
