import kotlinx.kover.gradle.plugin.dsl.AggregationType
import kotlinx.kover.gradle.plugin.dsl.CoverageUnit

plugins {
    id 'org.jetbrains.kotlin.jvm' version '2.1.0'
    id 'org.jetbrains.dokka' version '2.0.0'
    id 'com.apollographql.apollo' version '4.1.0'

    /* Publishing Plugins */
    id 'maven-publish'
    id 'signing'

    /* Test Reporting */
    id 'org.jetbrains.kotlinx.kover' version "0.9.0"

    /* Linting */
    id "org.jlleitschuh.gradle.ktlint" version "12.1.2"
}

kotlin {
    jvmToolchain(8)
}

dependencies {
    /* Kotlin */
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:2.1.0'

    /* Dokka */
    dokkaHtmlPlugin 'org.jetbrains.dokka:versioning-plugin:2.0.0'

    /* Apollo */
    api 'com.apollographql.java:client:0.0.2'
    implementation 'com.apollographql.adapters:apollo-adapters-core:0.0.4'

    /* EG SDK Core */
    api(project(':core'))

    /* Testing */
    testImplementation platform('org.junit:junit-bom:5.11.4')
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'
    testImplementation 'io.mockk:mockk:1.13.14'
    testImplementation "com.squareup.okhttp3:mockwebserver:4.12.0"
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }

    classpath = classpath.filter {
        // exclude original sdk.properties file during testing
        !it.absolutePath.contains("build/resources/main/sdk.properties")
    }
}

tasks.named("check") {
    finalizedBy("koverHtmlReport")
}

kover {
    reports {
        filters {
            excludes {
                packages(
                        "com.expediagroup.sdk.lodgingconnectivity.supply.operation",
                        "com.expediagroup.sdk.lodgingconnectivity.sandbox.operation",
                        "com.expediagroup.sdk.lodgingconnectivity.payment.operation",
                        "testservice"
                )
            }
        }

        verify {
            rule {
                bound {
                    aggregationForGroup = AggregationType.COVERED_PERCENTAGE
                    coverageUnits = CoverageUnit.LINE
                    minValue = 24
                }
                bound {
                    aggregationForGroup = AggregationType.COVERED_PERCENTAGE
                    coverageUnits = CoverageUnit.BRANCH
                    minValue = 28
                }
            }
        }
    }
}

apply from: "tasks-gradle/sdk-properties.gradle"
apply from: "tasks-gradle/apollo.gradle"
apply from: "tasks-gradle/publishing.gradle"
apply from: "tasks-gradle/dokka.gradle"
apply from: "tasks-gradle/lint.gradle"
