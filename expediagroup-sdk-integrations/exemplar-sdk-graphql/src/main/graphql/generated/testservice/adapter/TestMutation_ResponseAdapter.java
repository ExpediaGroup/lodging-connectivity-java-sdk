//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.1.1'.
//
package testservice.adapter;

import com.apollographql.apollo.api.Adapter;
import com.apollographql.apollo.api.Adapters;
import com.apollographql.apollo.api.Assertions;
import com.apollographql.apollo.api.CustomScalarAdapters;
import com.apollographql.apollo.api.ObjectAdapter;
import com.apollographql.apollo.api.json.JsonReader;
import com.apollographql.apollo.api.json.JsonWriter;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class TestMutation_ResponseAdapter {
  public enum Data implements Adapter<testservice.TestMutation.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("testMutation");

    @Override
    public testservice.TestMutation.Data fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      testservice.TestMutation.TestMutation1 _testMutation = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _testMutation = new ObjectAdapter<testservice.TestMutation.TestMutation1>(TestMutation.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_testMutation, "testMutation");

      return new testservice.TestMutation.Data(
        _testMutation
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        testservice.TestMutation.Data value) throws IOException {
      writer.name("testMutation");
      new ObjectAdapter<testservice.TestMutation.TestMutation1>(TestMutation.INSTANCE, false).toJson(writer, customScalarAdapters, value.testMutation);
    }
  }

  public enum TestMutation implements Adapter<testservice.TestMutation.TestMutation1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id", "content");

    @Override
    public testservice.TestMutation.TestMutation1 fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String _id = null;
      String _content = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _id = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _content = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_id, "id");

      return new testservice.TestMutation.TestMutation1(
        _id,
        _content
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        testservice.TestMutation.TestMutation1 value) throws IOException {
      writer.name("id");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.id);

      writer.name("content");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.content);
    }
  }
}
